BUILDING ON VARIOUS PLATFORMS.

The code here, together with the FOX toolkit, have been built and tested on
a range of systems. The file is a place to collect comments on special
treatment that was needed in some cases.


In general with any system it will be necessary (or at least best) to
ensure that autoconf and automake are installed, together with
the develoment support for X11. Xft and (n)curses should also be installed.

On old systems the versions of autoconf etc supplied may be too old to
be usable. The usual internet archives can supply up to date versions,
often in binary but as a fall-back in source form. In extremis these can be
fetched, built and installed in the usual manner. Those who find that an
undue challenge should stick to building this code on recent releases of
operating systems and development tools! Also a script "scripts/stamp.sh"
run after you have fetched or updated the Reduce source tree should set the
timestamps on all autoconf related files so as to avoid reliance on any local
autoconf. 

January 2011:

I now view almost all of the previously tested systems as "legacy" and in
many cases as "too old to matter". But if you need them you could at worst
back off to an old release of the code or reinstate adjustments.

The main platforms tested on now are

Windows 7 (64-bit) building in either 32-bit mode or 64-bit mode. The
               32-bit build should run on any version of Windows from
               XP onwards, but Windows 95 and friends are now unsupported.

Linux: I tend to test on the lastest 64-bit Ubuntu and the latest 64-bit
               OpenSuSE. There should be no special issues in building on
               32-bit versions of Linux. Binary compatibility is much
               better than it was 5 years ago, so I hope that most other
               Linux distributions will even be able to run executables
               made using the ones I test most.

Macintosh: Snow Leopard on an x86 Mac. The older FOX-based version of Reduce
               can provide a GUI via X11 and it is known to have issues with
               some Mac keystroke-combinations. The forthcoming wxWidgets
               code is (at the time of writing) thoroughly incomplete and
               barely usable at all, but will run in proper native mode
               under MacOSX as either a 32 or 64-bit package.

BSD:           I do not know of strong reasons why thkings should not
               build, and I intend to test periodically.

Solaris:       Earlier versions could be built, but unless there is strong
               enthusiasm I am not going to do a lot of testing.

Other Unix:    Probably! "./configure" is intended to support very generic
               adaptation. But there are no guarantees - ask if you have a
               particular case.

iPad:          wxWidgets claims to build for an iPad so PERHAPS once that
               version is stable... Ha Ha.

Arbitrary embedded use: A scheme to build a cut-down executable without any
               GUI code at all exists and is intended for use if Reduce is
               needed as a behind-the-scenes compuattional back end. See the
               CSL sources for an example illustrating its use.  

==============================================================================
==============================================================================


February 2007:

Systems tried:

RedHat 6.2     OK after custom patch - see below
RedHat 7.2     OK
RedHat 8.0     OK after "export SED=sed" - see below
RedHat 9       OK
Fedora Core 2  OK
Fedora Core 4  OK
Fedore Core 5  OK
Fedora Core 6  OK (I have trouble getting VMware tools installed)
Debian 3.1     OK
... Ubuntu 6.10
... SuSE 

64-bit OpenSuSE 10.2   OK

MacOS 10.3 (Panther)   OK
MacOS 10.4 (Tiger)     OK - build is for ppc and i386 as FAT binary

Windows XP             OK
Windows/cygwin         OK

Windows Vista          a quick check on the release candidate for Vista
                           does not show up and disasters.
Windows XP 64          OK, but created as a cross-build and not heavily
                           tested. The build process, being nonstandard,
                           is to be considered "unsupported"
Windows Vista 64       doubly unsupported, but a quick check looks OK.

Solaris 10 x86         OK, but it is essential to have the "companion DVD"
                           installed so that gcc, autoamake etc are
                           available. Xft fails utterly for me.


The earliest Red Hat that I have tried is 6.2. I had to work tolerably
hard to get an environment with all the tools I needed that would run happily
under VMware for me, and despite all the autoconf tools when I tried to
build FOX I found one compilation failure relating to options for reading
the clock. Because I believe that is now a system of historical rather than
practical interest I patched FXThread.cpp in the function FXThread::time
to use gettimeofday rather than clock_gettime by making a minor change to
an existing #ifdef. I do not intend to move that patch back into my main
sources or investigate further, because with that small adjustment I could
build workable binaries.

It looks as if an install from a Debian 3.0 CD set followed by online
updates ends up with a Debian 3.1 system, so I am not providing any
explicitly 3.0-series builds.

Ubuntu: An initial Ubuntu install is fairly minimal. When I move executables
across to it and try them they may fail abjectly - probably because of the
lack of some vital dynamic library. But things improve greatly when I
fetch and install a reasonably comprehensive development environment. This
effect may well appply to most other distributions.

Windows: I build from a cygwin shell, and it is important that enough 
of the cygwin build tools have been installed. I compile in the "no-cygwin"
or "mingw" mode, so that standare Windows libraries are used rather than
the cygwin ones.

Windows-cygwin: The build scripts make provision for forcing use of cygwin,
but because the main cygwin library is subjec to the GPL you do not have
permission to redistribute a system built that way.It may be a useful option
while debugging X-windows aspects of the code while running on Windows.

Windows-64: I used the command-line compilers from the Windows SDK, and use
them from a cygwin shell. That allows me to build 64-bit executables
while running on 32-bit windows. Setting up that build environment that
way is perhaps a little delicate, and it is not possible to build 64-bit
image files as part of a cross-build. I will not view this platform as
"supported" until there is a stable release of the cygwin/mingw build
tools for 64-bit windows. Well since I wrote that I have tried the 64-bit
mingw stull and I like that better!

Windows Vista: As cygwin/mingw becomes stable I expect 32-bit builds to
happen just as they did on XP. The situation about Vista-64 is much the
same as that for XP-64.

Solaris: I am downloading solaris 10 r7 and may update these notes
when I have tried it a bit! All earlier solaris experience is now out
of date.

The version built on was SunOS 5.10, 11/06 with lots of useful
tools from the companion CD installed. Note that the extra packages have to
be installed using "pkgadd". I found development most convenient it I put
/usr/sfw/bin and /opt/sfw/bin on my PATH, but I have tried to make the
build scripts so that they do not rely on that. But in consequence they do
rely on all the tools being installed at the locations that they get put
in my default. Note that one needs to use "gmake" or even /usr/swf/bin/gmake
to build bits of the code if doing so manually.
I had installed the 64-bit version of Solaris, but the default mode for
the C compiler appears to be to create 32-bit executables. The "-m64"
option may change that, but I am not experimenting with that right now.
I am also not trying other releases of Solaris, or the version running on
sparc rather then i386.
On Solaris if I use Xft and my customised Type1 fonts something crashes
abruptly as I attept to open the font, and so at least as a temporary
measure I have disabled the detection of Xft on that platform. That would have
consequences if you run the code on a different machine from the one that
provides the X server, in that custom maths fonts will then not be rendered.









