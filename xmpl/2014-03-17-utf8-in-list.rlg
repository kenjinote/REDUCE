% This is for checking how the underlying Lisp copes with
% printing (and exploding) strings and symbols that contain
% multi-byte characters - ie utf-8 sequences for characters with
% code over U+007f.

% The output is a little tedious to decode, but this is intended to
% illustrate a collection of cases both as regards the actual
% output generated and the calculation of "output columns" and hence
% the way in which lines get wrapped.

% At present this is only expected to give even partly sensible
% results with CSL.

lisp;


nil

on echo;


nil


% test line overflow

<<
% This test dispays a sequence of characters in clumps of 7 interleaved
% with numbers showing the output column that has been reached. The
% three instances use a letter "a" which provides a simple reference case.
% then there is a "pi", a "forall" symbol and a double-struck capical B:
% those use two, three and four bytes. Note that the #Bopf; may not be
% available in the font you use unless it is somewhat specialised.
% Note that #Zopf;, #Qopf; and #Ropf; are often used to denote the integers,
% rationals an dreals, and that #Bopf; is a similar font effect.
%
% If things work well then the display should be similar in all cases,
% both in term of the column values printed and the position
% where line-breaks are inserted. If (eg) a sequence of utf-8 bytes ends up
% counted as multiple "columns" that could lead to differences.
%
% First try printing strings.
  linelength 72;
  terpri(); terpri();
  prin2 "Check linelength effect with strings";
  terpri();
  prin2 ".. each of the following 4 blocks should show the sama layout";
  foreach x in list("a", "#pi;", "#ForAll;", "#Bopf;") do <<
     terpri();
     for i := 1:11 do <<
       for j := 1:7 do prin2 x;
       prin2 posn() >> >>;
  terpri(); terpri();
% Now the same but printing symbols (using prin2).
  prin2 "Check linelength effect with symbols";
  terpri();
  prin2 ".. each of the following 4 blocks should show the sama layout";
  foreach x in list('a, '#pi;, '#ForAll;, '#Bopf;) do <<
     terpri();
     for i := 1:11 do <<
       for j := 1:7 do prin2 x;
       prin2 posn() >> >>;

% This section uses prin1 and variations on explode to process first strings
% and then symbols with various contents. For prin1 the requirement is that
% the output be re-inputable.
% The string here is intended to contain a jolly mix of potential issues.
  w1 := "2AbCd #pi; #ForAll; #Bopf; #hash;pi; #quot; #gamma; #Gamma;";
  foreach x in list(w1, intern w1) do <<
     terpri();
     prin2 "Test using ";
     if stringp x then prin2 "strings" else prin2 "symbols";
     terpri();
% prin2 is used just to display the information "naturally" (at least
% if you have an utf-8 capable terminal with enough fonts installed.
     prin2 "Raw: "; prin2 x; print posn();

% prin1 should generate re-inputable material, and to assure that it
% renders extended characters as hex sequence such as "#1234;". Within a
% string if such a sequence literally occured then the initial "#" is expanded
% to be "#hash;". In strings any double quote mark is doubled, while in
% symbols special characters are preceeded by an exclamation mark.
     prin2 "prin1: "; prin1 x; print posn();

% explode2 should be rather like prin2 except that it generates a list of
% characters. Note that this means that multi-byte sequences in the data will
% need to be rendered as single multi-byte character objects. E.g.
% explode2 "#alpha;" => (#alpha;), a list of length 1.
% spaces) it must explode2 as 
     prin2 "explode2: "; prin1 explode2 x; print posn();

% explode is like prin1 except that it can end up with extended characters...
% thus
% explode "#alpha;" => (!" !#alpha; !"), a list of length 3. The only joker
% here is that if the string contains a literal sequence "# w o r d ;" (without
% the spaces) then that has to end up as (!" !# h a s h !; w o r d !; !")
% so it can be re-inputable.
     prin2 "explode: "; prin1 explode x; print posn();
% explodecn is like explodec but returns a list of the numeric codes of
% the characters involved. E.g.
% explodecn "#alpha;" => (945)
     princ "explodecn: "; prin1 explodecn x; print posn();
% exploden is like explode but returns a list of integer codes.
% Note some codes can be bigger than 0xff.
     princ "exploden: "; prin1 exploden x; print posn();
% explode2uc (and explode2lc, explode2ucn, explode2lcn) are like
% explode2 except that they folds characters to upper or lower case.
% There are two issues here. The first is whether #alpha; will change to
% #Alpha; (and similarly for all other non-Latin letters), the second
% is that the names for special characters will need to retain their
% regular case, so for instance #Alpha; must appear not #ALPHA; even
% after conversion to upper case. If in fact extended characters are
% printed in hex not using names much of that worry evaporates.
% In some - perhaps all - locales only a-x and A-Z will be changed
% by case folding...
     princ "explode2uc: "; prin1 explode2uc x; print posn();
     princ "explode2lc: "; prin1 explode2lc x; print posn() >>;
  terpri() >>;



Check linelength effect with strings
.. each of the following 4 blocks should show the sama layout
aaaaaaa7aaaaaaa15aaaaaaa24aaaaaaa33aaaaaaa42aaaaaaa51aaaaaaa60aaaaaaa69a
aaaaaa6aaaaaaa14aaaaaaa23
πππππππ7πππππππ15πππππππ24πππππππ33πππππππ42πππππππ51πππππππ60πππππππ69π
ππππππ6πππππππ14πππππππ23
∀∀∀∀∀∀∀7∀∀∀∀∀∀∀15∀∀∀∀∀∀∀24∀∀∀∀∀∀∀33∀∀∀∀∀∀∀42∀∀∀∀∀∀∀51∀∀∀∀∀∀∀60∀∀∀∀∀∀∀69∀
∀∀∀∀∀∀6∀∀∀∀∀∀∀14∀∀∀∀∀∀∀23
𝔹𝔹𝔹𝔹𝔹𝔹𝔹7𝔹𝔹𝔹𝔹𝔹𝔹𝔹15𝔹𝔹𝔹𝔹𝔹𝔹𝔹24𝔹𝔹𝔹𝔹𝔹𝔹𝔹33𝔹𝔹𝔹𝔹𝔹𝔹𝔹42𝔹𝔹𝔹𝔹𝔹𝔹𝔹51𝔹𝔹𝔹𝔹𝔹𝔹𝔹60𝔹𝔹𝔹𝔹𝔹𝔹𝔹69𝔹
𝔹𝔹𝔹𝔹𝔹𝔹6𝔹𝔹𝔹𝔹𝔹𝔹𝔹14𝔹𝔹𝔹𝔹𝔹𝔹𝔹23

Check linelength effect with symbols
.. each of the following 4 blocks should show the sama layout
aaaaaaa7aaaaaaa15aaaaaaa24aaaaaaa33aaaaaaa42aaaaaaa51aaaaaaa60aaaaaaa69a
aaaaaa6aaaaaaa14aaaaaaa23
πππππππ7πππππππ15πππππππ24πππππππ33πππππππ42πππππππ51πππππππ60πππππππ69π
ππππππ6πππππππ14πππππππ23
∀∀∀∀∀∀∀7∀∀∀∀∀∀∀15∀∀∀∀∀∀∀24∀∀∀∀∀∀∀33∀∀∀∀∀∀∀42∀∀∀∀∀∀∀51∀∀∀∀∀∀∀60∀∀∀∀∀∀∀69∀
∀∀∀∀∀∀6∀∀∀∀∀∀∀14∀∀∀∀∀∀∀23
𝔹𝔹𝔹𝔹𝔹𝔹𝔹7𝔹𝔹𝔹𝔹𝔹𝔹𝔹15𝔹𝔹𝔹𝔹𝔹𝔹𝔹24𝔹𝔹𝔹𝔹𝔹𝔹𝔹33𝔹𝔹𝔹𝔹𝔹𝔹𝔹42𝔹𝔹𝔹𝔹𝔹𝔹𝔹51𝔹𝔹𝔹𝔹𝔹𝔹𝔹60𝔹𝔹𝔹𝔹𝔹𝔹𝔹69𝔹
𝔹𝔹𝔹𝔹𝔹𝔹6𝔹𝔹𝔹𝔹𝔹𝔹𝔹14𝔹𝔹𝔹𝔹𝔹𝔹𝔹23
Test using strings
Raw: 2AbCd π ∀ 𝔹 #pi; " γ Γ27
prin1: "2AbCd #03c0; #2200; #01d539; #hash;pi; "" #03b3; #0393;"64
explode2: (!2 !A b !C d !  !#03c0; !  !#2200; !  !#01d539; !  !# p i !;
!  !" !  !#03b3; !  !#0393;)28
explode: (!" !2 !A b !C d !  !#03c0; !  !#2200; !  !#05d539; !  !# h a s
h !; p i !; !  !" !" !  !#03b3; !  !#0393; !")46
explodecn: (50 65 98 67 100 32 960 32 8704 32 120121 32 35 112 105 59 32
34 32 947 32 915)17
exploden: (34 50 65 98 67 100 32 960 32 8704 32 382265 32 35 104 97 115
104 59 112 105 59 32 34 34 32 947 32 915 34)44
explode2uc: (!2 !A !B !C !D !  !#03c0; !  !#2200; !  !#05d539; !  !# h a
s h !; !P !I !; !  !" !  !#03b3; !  !#0393;)44
explode2lc: (!2 a b c d !  !#03c0; !  !#2200; !  !#05d539; !  !# h a s h
!; p i !; !  !" !  !#03b3; !  !#0393;)38

Test using symbols
Raw: 2AbCd π ∀ 𝔹 #pi; " γ Γ27
prin1: 
!2!Ab!Cd! !#03c0;! !#2200;! !#01d539;! !#pi!;! !"! !#03b3;! !#0393;67
explode2: (!2 !A b !C d !  !#03c0; !  !#2200; !  !#01d539; !  !# p i !;
!  !" !  !#03b3; !  !#0393;)28
explode: (!! !2 !! !A b !! !C d !! !  !! !#03c0; !! !  !! !#2200; !! ! 
!! !#05d539; !! !  !! !# p i !! !; !! !  !! !" !! !  !! !#03b3; !! !  !!
!#0393;)8
explodecn: (50 65 98 67 100 32 960 32 8704 32 120121 32 35 112 105 59 32
34 32 947 32 915)17
exploden: (33 50 33 65 98 33 67 100 33 32 33 960 33 32 33 8704 33 32 33
382265 33 32 33 35 112 105 33 59 33 32 33 34 33 32 33 947 33 32 33 915)
71
explode2uc: (!! !2 !A !B !C !D !  !#03c0; !  !#2200; !  !#05d539; !  !#
!P !I !; !  !" !  !#03b3; !  !#0393;)37
explode2lc: (!! !2 a b c d !  !#03c0; !  !#2200; !  !#05d539; !  !# p i
!; !  !" !  !#03b3; !  !#0393;)31


nil


end;

nil
Tested on x86_64-pc-windows CSL
Time (counter 1): 0 ms

End of Lisp run after 0.00+0.04 seconds
real 0.23
user 0.00
sys 0.04
