on rounded;



% This is part of ongoing work... the main Reduce sources in arith/rounded.red
% define safe!_fp!-plus etc but both CSL and PSL defined their own
% "better" versions. The CSL one in cslbase/arith08.c and the PSL one
% is packages/support/psl.red.

% As at least a temporary measure the CSL code has been adjusted to try to
% match the portable code. The PSL version should be trivial to do the
% same to by commenting out the versions in psl.red. However a better
% long term solution will be to end up with compatible nice versions.

% The code here checks against a copy of the reference code. At present I
% believe that CSL matches that. PSL is not expected to - but I *really*
% do not understand the nature of some of the discrepancies and they look
% a bit like bugs to me. If nothing else on one Linux I see results that
% that suggest "1.0 = 1.0" sometimes says "no"...

lisp;


nil


on echo,comp;


nil

load compiler;


nil

off pwrds;


nil


errs := 0;


0


maxx := 1.797e+308;


1.797e+308



ll := v := nil;


nil

for i := 0:20 do <<
   w := expt(1.12345, i);
   v := w . (1.0/w) . v;
   v := (!!plumin*w) . (!!plumin/w) . v;
   if w < maxx/!!plumax then
     v := (!!plumax*w) . (!!plumax/w) . v;
   v := (!!timmin*w) . (!!timmax/w) . v
   >>;


nil


v;


(2.16402e-153 4.62102e+152 4.56509e-295 4.3381e-297 10.2583 0.0974821
1.92623e-153 5.19148e+152 4.06346e-295 4.87364e-297 9.13106 0.109516
1.71457e-153 5.83237e+152 3.61694e-295 5.47529e-297 8.1277 0.123036 1.52616e-153
6.55238e+152 1.6257e+308 3.10607e+306 3.2195e-295 6.15121e-297 7.23459 0.138225
1.35846e-153 7.36127e+152 1.44706e+308 3.48952e+306 2.86572e-295 6.91058e-297
6.43962 0.155289 1.20919e-153 8.27002e+152 1.28805e+308 3.9203e+306 2.55082e-295
7.76369e-297 5.732 0.174459 1.07632e-153 9.29095e+152 1.14651e+308 4.40426e+306
2.27053e-295 8.72212e-297 5.10214 0.195996 9.58045e-154 1.04379e+153
1.02053e+308 4.94797e+306 2.02103e-295 9.79886e-297 4.54149 0.220192
8.52771e-154 1.17265e+153 9.08386e+307 5.55879e+306 1.79895e-295 1.10085e-296
4.04245 0.247375 7.59064e-154 1.31741e+153 8.08568e+307 6.24503e+306
1.60127e-295 1.23675e-296 3.59825 0.277913 6.75655e-154 1.48005e+153
7.19719e+307 7.01598e+306 1.42532e-295 1.38943e-296 3.20286 0.312221 6.0141e-154
1.66276e+153 6.40633e+307 7.8821e+306 1.2687e-295 1.56096e-296 2.85091 0.350765
5.35325e-154 1.86803e+153 5.70237e+307 8.85514e+306 1.12929e-295 1.75366e-296
2.53764 0.394067 4.76501e-154 2.09863e+153 5.07577e+307 9.94831e+306 1.0052e-295
1.97014e-296 2.25879 0.442715 4.2414e-154 2.35771e+153 4.51802e+307 1.11764e+307
8.9474e-296 2.21336e-296 2.01059 0.497368 3.77534e-154 2.64877e+153 4.02156e+307
1.25562e+307 7.96422e-296 2.4866e-296 1.78965 0.558768 3.36049e-154 2.97576e+153
3.57965e+307 1.41062e+307 7.08907e-296 2.79357e-296 1.593 0.627748 2.99122e-154
3.34312e+153 3.1863e+307 1.58476e+307 6.31009e-296 3.13844e-296 1.41795 0.705243
2.66253e-154 3.75582e+153 2.83618e+307 1.7804e+307 5.61671e-296 3.52588e-296
1.26214 0.792305 2.36996e-154 4.21948e+153 2.52452e+307 2.00019e+307
4.99952e-296 3.96114e-296 1.12345 0.890115 2.10954e-154 4.74038e+153
2.24712e+307 2.24712e+307 4.45015e-296 4.45015e-296 1.0 1.0)


for each x in v do
  ll := x . (-x) . ll;


nil


% ll is now a list of critical values

length ll;


324


fluid '(errs);


nil


symbolic procedure badcase();
  errs := errs + 1;


badcase



symbolic procedure portable!-fp!-plus(x,y);
   if zerop x then y
    else if zerop y then x
    else if x>0.0 and y>0.0
     then if x<!!plumax and y<!!plumax then plus2(x,y) else nil
    else if x<0.0 and y<0.0
     then if -x<!!plumax and -y<!!plumax then plus2(x,y) else nil
    else if abs x<!!plumin and abs y<!!plumin then nil
    else (if u=0.0 then u else if abs u<!!fleps1*abs x then 0.0 else u)
         where u = plus2(x,y);


portable!-fp!-plus


symbolic procedure portable!-fp!-times(x,y);
 if zerop x or zerop y then 0.0
 else if x=1.0 then y else if y=1.0 then x else
   begin scalar u,v; u := abs x; v := abs y;
      if u>=1.0 and u<=!!timmax then
         if v<=!!timmax then go to ret else return nil;
      if u>!!timmax then if v<=1.0 then go to ret else return nil;
      if u<1.0 and u>=!!timmin then
         if v>=!!timmin then go to ret else return nil;
      if u<!!timmin and v<1.0 then return nil;
 ret: return times2(x,y) end;


portable!-fp!-times


symbolic procedure portable!-fp!-quot(x,y);
 if zerop y then rdqoterr()
 else if zerop x then 0.0 else if y=1.0 then x else
   begin scalar u,v; u := abs x; v := abs y;
      if u>=1.0 and u<=!!timmax then
         if v>=!!timmin then go to ret else return nil;
      if u>!!timmax then if v>=1.0 then go to ret else return nil;
      if u<1.0 and u>=!!timmin then
         if v<=!!timmax then go to ret else return nil;
      if u<!!timmin and v>1.0 then return nil;
 ret: return quotient(x,y) end;


portable!-fp!-quot


symbolic procedure tab_to n;
  while posn() < n do prin2 " ";


tab_to


for each x in ll do
  for each y in ll do <<
     if errs < 20 then <<
        a1 := safe!-fp!-plus(x, y);
        a2 := portable!-fp!-plus(x, y);
        if not eqn(a1, a2) then <<
            terpri();
            prin2t "safe-fp-plus incorrect";
            prin2 "x: "; prin2 x; tab_to 40; prin2t hexfloat1 x;
            prin2 "y: "; prin2 y; tab_to 40; prin2t hexfloat1 y;
            prin2 "new: "; prin2 a1; tab_to 40; prin2t hexfloat1 a1;
            prin2 "ref: "; prin2 a2; tab_to 40; prin2t hexfloat1 y;
            terpri();
            badcase() >>;
        a1 := safe!-fp!-times(x, y);
        a2 := portable!-fp!-times(x, y);
        if not eqn(a1, a2) then <<
            terpri();
            prin2t "safe-fp-times incorrect";
            prin2 "x: "; prin2 x; tab_to 40; prin2t hexfloat1 x;
            prin2 "y: "; prin2 y; tab_to 40; prin2t hexfloat1 y;
            prin2 "new: "; prin2 a1; tab_to 40; prin2t hexfloat1 a1;
            prin2 "ref: "; prin2 a2; tab_to 40; prin2t hexfloat1 y;
            terpri();
            badcase() >>;
        a1 := safe!-fp!-quot(x, y);
        a2 := portable!-fp!-quot(x, y);
        if not eqn(a1, a2) then <<
            terpri();
            prin2t "safe-fp-quot incorrect";
            prin2 "x: "; prin2 x; tab_to 40; prin2t hexfloat1 x;
            prin2 "y: "; prin2 y; tab_to 40; prin2t hexfloat1 y;
            prin2 "new: "; prin2 a1; tab_to 40; prin2t hexfloat1 a1;
            prin2 "ref: "; prin2 a2; tab_to 40; prin2t hexfloat1 y;
            terpri();
            badcase() >> >> >>;


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 4.45015e-296                         1d_1a94_a200_0000_B-981
new: 2.24712e+295                       11_9799_812d_ea11_B982
ref: nil                                1d_1a94_a200_0000_B-981


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -4.45015e-296                        -1d_1a94_a200_0000_B-981
new: -2.24712e+295                      -11_9799_812d_ea11_B982
ref: nil                                -1d_1a94_a200_0000_B-981


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 4.45015e-296                         1d_1a94_a200_0000_B-981
new: 2.24712e+295                       11_9799_812d_ea11_B982
ref: nil                                1d_1a94_a200_0000_B-981


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -4.45015e-296                        -1d_1a94_a200_0000_B-981
new: -2.24712e+295                      -11_9799_812d_ea11_B982
ref: nil                                -1d_1a94_a200_0000_B-981


safe-fp-plus incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 2.24712e+307                         10_0000_0000_0000_B1022
new: 2.24712e+307                       10_0000_0000_0000_B1022
ref: nil                                10_0000_0000_0000_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 2.24712e+307                         10_0000_0000_0000_B1022
new: nil                                nil
ref: 4.45015e-308                       10_0000_0000_0000_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -2.24712e+307                        -10_0000_0000_0000_B1022
new: nil                                nil
ref: -4.45015e-308                      -10_0000_0000_0000_B1022


safe-fp-plus incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 2.24712e+307                         10_0000_0000_0000_B1022
new: 2.24712e+307                       10_0000_0000_0000_B1022
ref: nil                                10_0000_0000_0000_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 2.24712e+307                         10_0000_0000_0000_B1022
new: nil                                nil
ref: 4.45015e-308                       10_0000_0000_0000_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -2.24712e+307                        -10_0000_0000_0000_B1022
new: nil                                nil
ref: -4.45015e-308                      -10_0000_0000_0000_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 3.96114e-296                         19_e7e0_24a4_ee94_B-981
new: 2.52452e+295                       13_c391_aa12_e0e2_B982
ref: nil                                19_e7e0_24a4_ee94_B-981


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -3.96114e-296                        -19_e7e0_24a4_ee94_B-981
new: -2.52452e+295                      -13_c391_aa12_e0e2_B982
ref: nil                                -19_e7e0_24a4_ee94_B-981


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 4.99952e-296                         10_592d_6928_0000_B-980
new: 2.00019e+295                       1f_5172_1293_117a_B981
ref: nil                                10_592d_6928_0000_B-980


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -4.99952e-296                        -10_592d_6928_0000_B-980
new: -2.00019e+295                      -1f_5172_1293_117a_B981
ref: nil                                -10_592d_6928_0000_B-980


safe-fp-plus incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 2.52452e+307                         11_f9a6_b50b_0f28_B1022
new: 2.52452e+307                       11_f9a6_b50b_0f28_B1022
ref: nil                                11_f9a6_b50b_0f28_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 2.52452e+307                         11_f9a6_b50b_0f28_B1022
new: nil                                nil
ref: 3.96114e-308                       11_f9a6_b50b_0f28_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -2.52452e+307                        -11_f9a6_b50b_0f28_B1022
new: nil                                nil
ref: -3.96114e-308                      -11_f9a6_b50b_0f28_B1022


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 3.52588e-296                         17_0f22_3a63_c0dd_B-981
new: 2.83618e+295                       16_342c_3c44_2242_B982
ref: nil                                17_0f22_3a63_c0dd_B-981


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: -3.52588e-296                        -17_0f22_3a63_c0dd_B-981
new: -2.83618e+295                      -16_342c_3c44_2242_B982
ref: nil                                -17_0f22_3a63_c0dd_B-981


safe-fp-quot incorrect
x: 1.0                                  10_0000_0000_0000_B1
y: 5.61671e-296                         12_5dd6_68a2_4001_B-980
new: 1.7804e+295                        1b_e073_6466_9b36_B981
ref: nil                                12_5dd6_68a2_4001_B-980


nil



end;

nil
Tested on x86_64-pc-windows CSL
Time (counter 1): 16 ms

End of Lisp run after 0.01+0.06 seconds
real 0.21
user 0.03
sys 0.04
