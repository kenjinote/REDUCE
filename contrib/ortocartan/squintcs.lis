(setq infosquint '(This is the program Squint that can check first
integrals of sets of ordinary differential equations that are
polynomials of first or second degree in the first derivatives of the
unknown functions!. It can only run on top of Ortocartan!.))

(de squintinit (L) (PROG (V V1 ARRAY MEM GLS)
    (TERPRI) (TERPRI)
    (PRINTC (CAR L))
    (TERPRI) (TERPRI)
    (MAPC (CDR L) (FUNCTION (LAMBDA (LE) (SELECT (CAR LE)
        ((QUOTE PARAMETER)   (SETQ COORD (CDR LE)))
        ((QUOTE FUNCTIONS)   (SETQ FUNCTIONS (CDR LE)))
        ((QUOTE CONSTANTS)   (SETQ CONSTANTS (CDR LE)))
        ((QUOTE SYMBOLS)   (SETQ METSUBS (CDR LE)))
        ((QUOTE SUBSTITUTIONS)   (SETQ SIMPLSUBS (CDR LE)))
        ((QUOTE DONT)   (SETQ NOPRINT (CDDR LE)))
        ((QUOTE STOP)   (SETQ STOP (CADDR LE)))
        ((QUOTE DATA)   (SETQ DATASUBS (CDDR LE)))
        ((QUOTE EXPAND)   (PROG2 (SETQ LPOWER (CADDDR LE))
                                 (SETQ UPOWER (CADR (CDDDDR LE))) ))
        ((QUOTE MARKERS)   (SETQ MARKERS (CDR LE)))
        ((QUOTE RMARGIN)   (SETQ RMARGIN (CADR LE)))
        ((QUOTE LMARGIN)   (SETQ LMARGIN (CADR LE)))
        ((QUOTE VARIABLES)   (SETQ LAGVARS (CDR LE)))
        ((QUOTE integral)   (SETQ LAGRAN (CADR LE)))
        ((QUOTE OUTPUT)   (COND
           ((EQUAL LE (QUOTE (OUTPUT FOR INPUT)))
                                     (SETQ OUTINP (QUOTE INPUT)))
           ((EQUAL LE (QUOTE (OUTPUT FOR LATEX)))
                                     (SETQ OUTINP (QUOTE LATEX)))
           (T          (ERROR (LIST (QUOTE "*****///") LE (QUOTE "///*****")
                                    (QUOTE "IS AN ILLEGAL ARGUMENT")
                                    (QUOTE "FOR OUR SYSTEM.")
                                    (QUOTE "SORRY, CAN'T GO ON."))) )))
        (ERROR (LIST (QUOTE "*****///") LE (QUOTE "///*****")
                          (QUOTE "IS AN ILLEGAL ARGUMENT")
                          (QUOTE "FOR OUR SYSTEM.")
                                    (QUOTE "SORRY, CAN'T GO ON")))) )))
    (OR LAGVARS (ERROR (LIST (QUOTE "YOU DID NOT SPECIFY")
                     (QUOTE "WHICH FUNCTIONS ARE THE")
                     (QUOTE "UNKNOWNS IN YOUR SET.")
                     (QUOTE "PLEASE ADD THE ARGUMENT")
                     (QUOTE "*****///VARIABLES///****")
                     (QUOTE "IN THE INPUT DATA") )))
    (OR COORD (ERROR (LIST (QUOTE "YOU DID NOT SPECIFY THE NAME OF")
                           (QUOTE "THE PARAMETER UNDER THE")
                           (QUOTE "ACTION INTEGRAL. I CANNOT DO MY")
                           (QUOTE "JOB WITHOUT THIS INFORMATION.")
                           (QUOTE "SORRY, TRY AGAIN PLEASE.")) ))
    (SETQ MESS (NOT (MEMQ (QUOTE MESSAGES) NOPRINT)))
    (OR LPOWER (SETQ LPOWER 2))
    (OR UPOWER (SETQ UPOWER 3))
    (AND (GREATERP RMARGIN 72) (LINELENGTH RMARGIN))
    (MAP METSUBS (FUNCTION (LAMBDA (ME)
                 (RPLACA ME (INTOPRE (CAR ME))) )))
    (LISTDEPS)
    (DEFSYMB)
    (MAKEPAIRS)
    (PUTSYMB)
    (SETQ LAGRAN (SIMPLIFY (INTOPRE LAGRAN) T))
    (OR (MEMQ (QUOTE integral) NOPRINT) (PROG2
        (INPRINT (QUOTE integral) NIL NIL (QUOTE =) LAGRAN)
        (TERPRI) ))
    (MAPC (QUOTE (LISTDEPS DEFSYMB MAKEPAIRS PUTSYMB))
          (FUNCTION (LAMBDA (QE) (REMPROP QE (QUOTE EXPR)) )))
    (MAP DATASUBS (FUNCTION (LAMBDA (DE)
         (RPLACA DE (SIMPLIFY (INTOPRE (CAR DE)) T)) )))
    (AND SYMBOLS (PROGN
         (MESSAGE (QUOTE SYMBOLS) T)
         (TURNCAR)
         (MAPC SYMBOLS (FUNCTION (LAMBDA (SE) (PROG2
               (INPRINT SE NIL NIL (QUOTE =) (GET SE (QUOTE CONTENT)))
               (TURNCAR)) ))) ))
    (MAPC MARKERS (FUNCTION (LAMBDA (ME) (SET ME NIL) )))
    (AND SIMPLSUBS (PROG (S M L DGLS M!?)
         (OR (SETQ MEM (MEMQ (QUOTE SUBSTITUTIONS) NOPRINT)) (PROG2
             (MESSAGE (QUOTE SUBSTITUTIONS) T)
             (TURNCAR)))
         (SETQ S (QUOTE =))
         (SETQ V SIMPLSUBS)
         (AND MARKERS (SETQ GLS
              (MAPCAR V (FUNCTION (LAMBDA (VE) (AND (EQ VE S) S) ))) )
              (SETQ DGLS GLS))
       A (OR (SETQ M (FRONT (SETQ L (PREVIOUS S V)) V)) MEM
             (MESSAGE (QUOTE EVERYWHERE) T))
         (SETQ V (MEMBER L V))
         (OR MEM (PROGN
             (MAPC M (FUNCTION (LAMBDA (ME) (PROG2
                (MESSAGE ME NIL)
                (MESSAGE BLANK NIL)) )))
             (TURNCAR) (TURNCAR) ))
         (RPLACA V (INTOPRE (CAR V)))
         (COND (M!?   (PROGN (SETQ DGLS (EQUATE V DGLS))
                            (RPLACA DGLS T)
                            (RPLACA V (SMOOTH (CAR V) T))
                            (SETQ M!? NIL)))
               (T   (RPLACA V (SIMPLIFY (CAR V) T))))
         (RPLACA (CDDR V) (SIMPLIFY (INTOPRE (CADDR V)) T))
         (SETQ M!? NIL)
         (AND (EQ (CADDR V) (QUOTE EXPAND)) (COND
              ((AND (NOT (ATOM (CAR V))) (EQ (CAAR V) (QUOTE EXPT))
                    (CDAR V) (CDDAR V) (NULL (CDDDAR V)))
                        (OR (AND DGLS (CAR DGLS)) (RPLACA (CDDR V)
                                      (DEVELOP (CADAR V) (CADDAR V))) ))
              (T   (ERROR (LIST (QUOTE "THE EXPRESSION *****///")
                      (CAR V) (QUOTE "///***** IS NOT AN EXPONENTIAL")
                      (QUOTE "EXPRESSION, AND SO THE COMMAND")
                      (QUOTE "** EXPAND ** IS MEANINGLESS IN THIS")
                      (QUOTE "CASE. SORRY, MUST QUIT."))) )))
         (OR MEM (PROGN
             (INPRINT (CAR V) NIL NIL S (CADDR V))
             (TURNCAR) (TURNCAR) ))
         (AND (SETQ V (CDDDR V)) (GO A)) ))
    (AND DATASUBS (PROG (GL)
         (PROG ( ) (MESSAGE (QUOTE (THE SUBSTITUTIONS LISTED ABOVE WILL
                            BE THEMSELVES TRANSFORMED BY THE FOLLOWING
                            SUBSTITUTIONS)) T)
                   (SETQ V DATASUBS)
                 A (COND ((EQ (CADR V) (QUOTE =))
                                         (MESSAGE (QUOTE EVERYWHERE) T))
                         (T   (MAPC (FRONT (PREVIOUS (QUOTE =) V) V)
                                    (FUNCTION (LAMBDA (FE) (PROG2
                                    (INPRINT (QUOTE "IN THE VALUE") NIL
                                       NIL (QUOTE "OF THE EXPRESSION")
                                       (CAR V))
                                    (SETQ V (CDR V))) ))) ))
                   (INPRINT (CAR V) NIL NIL (QUOTE =) (CADDR V))
                   (AND (SETQ V (CDDDR V)) (GO A)))
         (SETQ GL (MAPCAR SIMPLSUBS (FUNCTION (LAMBDA (SE)
                          (AND (EQ SE (QUOTE =)) SE) ))) )
         (CLEARDATA)
         (REMPROP (QUOTE CLEARDATA) (QUOTE EXPR))
         (REMPROP (QUOTE EQUATE) (QUOTE EXPR))
         (SETQ DATASUBS NIL)
         (OR (MEMQ (QUOTE MODIFICATIONS) NOPRINT) (PROGN
             (MESSAGE (QUOTE (THE SUBSTITUTIONS YOU ASKED ME TO
                 MODIFY WILL HAVE THE FOLLOWING FINAL FORM)) T)
             (TURNCAR) (TURNCAR) (TURNCAR)
             (PROG (S M L)
                 (SETQ S (QUOTE =))
                 (SETQ V SIMPLSUBS)
              A  (COND ((OR (PREVIOUS S GL) (NEXT S GL)) (PROGN
                            (OR (SETQ M (REMOVELAST (FRONT S V)))
                                (MESSAGE (QUOTE EVERYWHERE) T))
                            (MAPC M (FUNCTION (LAMBDA (ME) (PROGN
                                  (SETQ V (CDR V))
                                  (MESSAGE ME NIL)
                                  (MESSAGE BLANK NIL)) )))
                            (TURNCAR) (TURNCAR)
                            (INPRINT (CAR V) NIL NIL S (CADDR V))
                            (TURNCAR) (TURNCAR)
                            (AND (SETQ V (CDDDR V))
                                 (SETQ GL (CDDR (MEMQ S GL)))
                                 (GO A)) ))
                       (T   (AND (SETQ GL (CDDR (MEMQ S GL)))
                                 (SETQ V (CDDR (MEMQ S V)))
                                 (GO A))) ))) )))
    (SETQ N (LENGTH LAGVARS))
    (SETQ N (STIMES (LIST (QUOTE (1 . 6))
                          (ADD1 N) (PLUS 2 N) (PLUS 3 N)) ))
 Q  (SETQ LIND (CONS N lind))
    (setq N (SUB1 N))
    (or (greaterp 0 N) (go Q))
    (SETQ LIND (REVERSIP LIND))
    (SETQ LABC (COPY LIND))
    (SETQ SIMPLSUBS (SUBSTITUTIONS SIMPLSUBS))
                       ))
(de squint (LIS)
    (PROG (COORD FUNCTIONS CONSTANTS EMATRIX METSUBS SIMPLSUBS NOPRINT
           STOP TENSORS DATASUBS IE AGAM GAM RM RC RINV
           FUNNAMES SYMBOLS UPIE LPOWER UPOWER WORKARR WV LIND LIJ LIJK
           LIJKL LAB LABC LABCD MESS MARKERS LMARGIN CLOCK
           VELO EXPA ATIDA VTIDA ACCE SHEAR ROT ELWEYL
           MAGWEYL VMATRIX UVELO LVELO METRIC INVMETRIC CHRIS UACCE
           LACCE ROTDD ROTDU SHEARDD SHEARDU PROJDD PROJDU DETEM OUTINP
           LAGVARS LAGRAN DUPLAG1 DUPLAG2 N X V V1 W RES)
    (MAPC (OBLIST) (FUNCTION RESETVARS))
    (SETQ CLOCK (TIME))
    (SETQ RMARGIN 72)
    (SETQ LMARGIN  8)
    (squintinit LIS)
    (RPLACD LIS NIL)
    (SETQ V (CAR COORD))
    (SETQ X (GENSYM))
    (PUT X (QUOTE PRIOR) -1)
    (AND STOP (NOT (ATOM STOP)) (EQ (CAR STOP) (QUOTE equation))
         (SETQ STOP (CAADR STOP)))
    (setq lagran (deriv (car coord) lagran))
    (subsall (quote lagran) (quote maineq) nil nil simplsubs)
    (and (atom lagran) (progn
         (printc (list (quote "THE FIRST INTEGRAL IS ALREADY")
                       (quote "MAXIMALLY SIMPLIFIED")
                       (quote "AND IS EXPLICITLY CONSTANT")))
         (inprint (quote maineq) nil nil (quote =) lagran)
         (go end)))
    (or (member (quote maineq) noprint) (progn
        (inprint (quote maineq) nil nil (quote =) lagran)
        (terpri) (terpri)
        (timemessage (quote maineq) t)
        (terpri) ))
    (map lagvars (function (lambda (ve) (prog2
        (setq W (list (quote der) (car coord) (car ve)))
        (map ve (function (lambda (le) (prog2
            (setq v1 (list (quote der) (car coord) (car le)))
            (mapc le (function (lambda (L) (prog2
                (setq v2 (stimes (list W v1
                         (list (quote der) (car coord) L)) ))
                (setq res (cons v2 res))) ))) )))) ))))
    (setq res (reversip res))
    (setq v1 res)
    (setq X 0)
    (setq W nil)
 A  (setq V (car v1))
    (setq X (add1 X))
    (and (member (cons X nil) noprint) (go A1))
    (mapc lagran (function (lambda (le)
        (and (or (member V le) (subset V le)) (setq W (cons le W))) )))
    (setq W (cond ((null W)   0)
                  ((null (cdr W))   (car W))
                  (t   (splus W)) ))
    (setq W (substitute V 1 (copy W)))
    (subsall (quote W) (quote equation) nil (cons X nil) simplsubs)
        (inprint (quote "THIS IS THE COEFFICIENT OF") nil nil blank V)
        (terpri)
        (inprint (quote equation) nil (cons X nil) (quote =) W)
        (terpri)
 A1 (and (eqn X stop) (go end))
    (setq v1 (cdr v1))
    (setq W nil)
    (and v1 (go A))
    (mapc res (function (lambda (ve)
        (setq lagran (substitute ve 0 lagran)) )))
    (setq res nil)
    (map lagvars (function (lambda (ve) (prog2
        (setq W (list (quote der) (car coord) (car ve)))
        (mapc ve (function (lambda (le) (progn
            (setq v1 (list (quote der) (car coord) le))
            (setq v1 (stimes (list W v1)))
            (setq res (cons v1 res))) ))) ))))
    (setq res (reversip res))
    (setq v1 res)
    (setq W nil)
 B  (setq V (car v1))
    (setq X (add1 X))
    (and (member (cons X nil) noprint) (go B1))
    (mapc lagran (function (lambda (le)
        (and (or (member V le) (subset V le)) (setq W (cons le W))) )))
    (setq W (cond ((null W)   0)
                  ((null (cdr W))   (car W))
                  (t   (splus W)) ))
    (setq W (substitute V 1 (copy W)))
    (subsall (quote W) (quote equation) nil (cons X nil) simplsubs)
        (inprint (quote "THIS IS THE COEFFICIENT OF") nil nil blank V)
        (terpri)
        (inprint (quote equation) nil (cons X nil) (quote =) W)
        (terpri)
 B1 (and (eqn X stop) (go end))
    (setq v1 (cdr v1))
    (setq W nil)
    (and v1 (go B))
    (mapc res (function (lambda (ve)
        (setq lagran (substitute ve 0 lagran)) )))
    (setq res nil)
    (mapc lagvars (function (lambda (ve) (prog2
        (setq res (cons (list (quote der) (car coord) ve) res))) )))
    (setq res (reversip res))
    (setq v1 res)
    (setq W nil)
 C  (setq V (car v1))
    (setq X (add1 X))
    (and (member (cons X nil) noprint) (go C1))
    (mapc lagran (function (lambda (le)
        (and (or (member V le) (subset V le)) (setq W (cons le W))) )))
    (setq W (cond ((null W)   0)
                  ((null (cdr W))   (car W))
                  (t   (splus W)) ))
    (setq W (substitute V 1 (copy W)))
    (subsall (quote W) (quote equation) nil (cons X nil) simplsubs)
        (inprint (quote "THIS IS THE COEFFICIENT OF") nil nil blank V)
        (terpri)
        (inprint (quote equation) nil (cons X nil) (quote =) W)
        (terpri)
 C1 (and (eqn X stop) (go end))
    (setq v1 (cdr v1))
    (setq W nil)
    (and v1 (go C))
    (mapc res (function (lambda (ve)
        (setq lagran (substitute ve 0 lagran)) )))
    (setq X (add1 X))
    (subsall (quote lagran) (quote equation) nil (cons X nil) simplsubs)
    (or (member (cons X nil) noprint) (progn
        (inprint (quote "THESE ARE THE TERMS THAT ARE") nil nil blank
                 (quote "FREE OF THE DERIVATIVES"))
        (terpri)
        (inprint (quote equation) nil (cons X nil) (quote =) lagran)
        (terpri) ))
 end (LINELENGTH 72)
    (TERPRI) (TERPRI)
    (MESSAGE (QUOTE ("I REALLY LIKED THIS!" "CAN I HAVE MORE ?"
                                           "  PLEASE ?!?")) T)
    (TERPRI)
    (MESSAGE (QUOTE "END OF WORK") T)
    (MESSAGE (LIST (QUOTE "RUN TIME =") (PLUS (TIME) (MINUS CLOCK))
                   (QUOTE MSEC)) T)
     ))
