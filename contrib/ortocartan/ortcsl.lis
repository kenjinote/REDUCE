(setq info (QUOTE (THIS IS the set of all ORTOCARTAN programs IN
Codemist Standard Lisp (CSL) to be run under Windows 98 and Linux!.
Just let the CSL read this file and then execute (preserve)!. The
Ortocartan manual will tell you most of the rest of the story!.
Consult the author concerning the programs Ellisevol!, Eulagr!,
Landlagr!, Ncurva!, Detcurv and Squint!.)))

%The first group of definitions introduces the functions and variables
%that were system functions and variables in the oldest version of
%Ortocartan and sets some parameters

(GLOBAL '(LBRACE RBRACE OVER EXPO SUBSCR SPECCHAR NULLCHAR SPECFUN LATBR
          POTBREAK GOODBREAK greeklet LPAR RPAR BREAK))

(SETQ LBRACE (QUOTE !{))
(SETQ RBRACE (QUOTE !}))
(SETQ OVER (QUOTE !\over))
(SETQ EXPO (QUOTE !^))
(SETQ SUBSCR (QUOTE !_))
(SETQ LATBR (GENSYM))
(SETQ GOODBREAK (GENSYM))
(SETQ POTBREAK (GENSYM))
(SETQ SPECCHAR (LIST LPAR RPAR LBRACE RBRACE (QUOTE !,) BLANK))
(SETQ NULLCHAR (LIST LATBR GOODBREAK POTBREAK EXPO SUBSCR OVER))
(SETQ SPECFUN (QUOTE (SIN (!\SIN) COS (!\COS) TAN (!\TAN)  COT (!\COT)
      LOG (!\LOG) EXP (!\EXP) INT (!\INT) SINH (!\SINH) COSH (!\COSH)
      TANH (!\TANH) COTH (!\COTH) ARCSIN (!\ARCSIN) ARCTAN (!\ARCTAN)
      ARSH (!\ARSH) ARCH (!\ARCH) ARTH (!\ARTH)  ) ))
(setq !*lower nil)
(setq greeklet (quote (alpha (!{!\alpha!}) beta (!{!\beta!})
  gamma (!{!\gamma!}) delta (!{!\delta!}) epsilon (!{!\epsilon!})
  varepsilon (!{!\varepsilon!}) zeta (!{!\zeta!}) eta (!{!\eta!}) theta
  (!{!\theta!}) vartheta (!{!\vartheta!}) iota (!{!\iota!}) kappa
  (!{!\kappa!}) lambda (!{!\lambda!}) mu (!{!\mu!}) nu (!{!\nu!}) xi
  (!{!\xi!}) pi (!{!\pi!}) varpi (!{!\varpi!}) rho (!{!\rho!}) varrho
  (!{!\varrho!}) sigma (!{!\sigma!}) varsigma (!{!\varsigma!}) tau
  (!{!\tau!}) upsilon (!{!\upsilon!}) phi (!{!\phi!}) varphi
  (!{!\varphi!}) chi (!{!\chi!}) psi (!{!\psi!}) omega (!{!\omega!})
  Gamma (!{!\Gamma!}) Delta (!{!\Delta!}) Theta (!{!\Theta!}) Lambda
  (!{!\Lambda!}) Xi (!{!\Xi!}) Pi (!{!\Pi!}) Sigma (!{!\Sigma!}) Upsilon
  (!{!\Upsilon!}) Phi (!{!\Phi!}) Psi (!{!\Psi!}) Omega (!{!\Omega!})
                   )) )
(setq !*lower t)

(LINELENGTH 72)
(SETQ LPAR '!()
(SETQ RPAR '!))
(SETQ !*ORD T)

(FLUID '(A ADDBL AE AGAM ARRAY AT BODY CHECK CONSTANTS CONTENT COORD E1
E2 E3 E4 L LEVEL LINECOUNTER LKC LLD LMARGIN M R RMARGIN STORE SZ S1 S2
TOP T01 T02 T13 T23 V V1 V2 V3 V4 V5
DATASUBS EMATRIX FUNCTIONS METSUBS NOPRINT SIMPLSUBS STOP TENSORS
FUNNAMES IE LIJ LIND LPOWER //MODE UPOWER GAM J K LAB LABC LIJK LOCSUBS
N RANK WORKARR RC UPIE LIJKL CLOCK DETE DGL DGLS GL GLS
HELP I LABCD LF MEM M!? RM R RES RINV W LL LLM
LS2 MARKERS MESS UL VAR VELO EXPA VTIDA ATIDA B BE B1 B2 C CE SHEAR ROT
ELWEYL MAGWEYL
VMATRIX UVELO LVELO METRIC INVMETRIC CHRIS CONST COP C1 C2 DE DERV
DETEM FR UACCE LACCE LIA LJB PBC ROTDD ROTDU
SHEARDD SHEARDU PROJDD PROJDU UJ DP LA LB UR
OUTINP RS UM VN
SP VA VB VUJ VUL GLS LAGRAN LAGVARS LE V6 V7 V8 V9 L1 L2 RES1 VE
D DELTA DIMS DUPLAG1 DUPLAG2 D1 D2 E EE EL E00 FACTORS
FE FILE FN HE INX LEE LIJK2 LIJK3 LIJK4
LIJK5 LINE LIS H HELP HOLD IND INDICES LC LISNAME LISOFSUBS LSR ME MODE
N NAME NUM NUMBER N1 N2 OBJ OPER P PA PAIRS PAT PB PC PL PRINTNAME Q QE
RANKD RE RHO S SE SET1 SET2 SEX SIG SIGN SOURCE SUBL SYMBOLS TA
TEMPSTORE TENS TEXP U UE UNIFN VAL VALENCE VC WE WV W1 X XE Y Z
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v!-a!-r
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l!-l
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-l
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-b!-o!-d!-y
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-l
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-1
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-2
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-l
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-1
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2
!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-5
))

(SETQ !*COMP T)

(putd 'printx 'expr 'print)
(remd 'print)
(putd 'print 'expr 'printc)
(putd 'otab 'expr 'ttab)
(putd 'ferror 'expr 'error)

(REMD 'ERROR)
(DE ERROR (L) (PROGN
    (TERPRI) (MESSAGE L T) (TERPRI) (TERPRI)
    (PRINTC (QUOTE "AND NOW READ THIS IF YOU CAN"))
    (TERPRI) (TERPRI)
    (FERROR NIL) ))

(dm select (!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-l)
     (sublis (list (cons 'v3
        (cadr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-l))
                   (cons 'v4
        (cddr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-l))
        (cons 'A (gensym)))
   '(prog (!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-1
       !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2
       !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-5)
    (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-1 v3)
    (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2 'v4)
 A  (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-5
          (eval (caar
           !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2)))
    (cond ((equal
          !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-1
            !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-5)
                 (return (eval (cadar
       !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2))) ))
    (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2
     (cdr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2))
     (cond ((cdr
         !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2)
               (go A)))
     (return (eval (car
    !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-s!-e!-l!-e!-c!-t!-v!-2)))) ))

(dm conc (!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-l)
    (sublis (list (cons 'v3
        (cadr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-l))
                  (cons 'v4
        (cddr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-l))
                   (cons 'A (gensym)))
   '(prog (!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-1
           !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-2)
    (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-1 v3)
    (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-2 'v4)
  A (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-1
       (nconc !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-1
   (eval (car !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-2))))
    (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-2
       (cdr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-2))
    (cond (!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-2 (go A)))
    (return !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-c!-o!-n!-c!-v!-1) )))

%  (de DO (>>VAR >>LL >>UL >>QSEX) (PROG (H)
%     (AND (GREATERP (SETQ H (SET >>VAR >>LL)) >>UL) (RETURN NIL))
%  A  (EVAL >>QSEX)
%     (AND (EQN >>UL H) (RETURN NIL))
%     (SET >>VAR (SETQ H (ADD1 H)))
%     (GO A) ))

(dm do (!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l)
    (sublis (list (cons 'v1
          (cadr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l))
       (cons 'v2
          (caddr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l))
       (cons 'v3
          (cadddr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l))
       (cons 'v4 (car
          (cddddr !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l)))
       (cons 'G1 (gensym)))
    '(prog (!-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v!-a!-r
            !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l!-l
            !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-l
            !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-b!-o!-d!-y
            !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v)
       (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v!-a!-r v1)
       (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l!-l v2)
       (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v
              !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l!-l)
       (set !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v!-a!-r
              !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-l!-l)
       (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-l v3)
       (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-b!-o!-d!-y v4)
  G1   (cond ((greaterp !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v
                          !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-l)
                       (return nil)))
       (eval !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-u!-b!-o!-d!-y)
       (set !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v!-a!-r
          (setq !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v
                   (add1 !-d!-o!-n!-t!-y!-o!-u!-d!-a!-r!-e!-d!-o!-v)))
       (go G1) )))

(putd 'xsassoc 'expr 'sassoc)
(REMD 'SASSOC)

(DE SASSOC (AT LIS FN) (COND
    ((ATOM LIS)   (EVAL FN))
    ((EQUAL AT (CAAR LIS))   (CAR LIS))
    (T   (SASSOC AT (CDR LIS) FN))))

(DE NTH (L N) (COND
   ((EQUAL N 1) (CAR L))
   (T (NTH (CDR L) (SUB1 N)))))

(DE OUTPUT (FILE SEX MODE) (PROG (W W1)
   (OR (SETQ W (GET FILE 'OUTFILE))
       (PUT FILE 'OUTFILE (SETQ W (OPEN FILE 'OUTPUT))))
   (SETQ W1 (WRS W))
   (COND (MODE   (PRINTX SEX))
         (T   (PRINC SEX)))
   (WRS W1)
   (RETURN SEX)))

(DE IMAGEL (A B) (LENGTH (EXPLODECN A)))

(DE CLARRAY (NAME) (NILOUTVECTOR (EVAL NAME)))

(DE NILOUTVECTOR (V) (COND
  ((NOT (VECTORP V)) NIL)
  (T (PROG (I N)
   (SETQ N (UPBV V))
   (SETQ I 0)
TOP
   (PUTV V I (NILOUTVECTOR (GETV V I)))
   (COND
     ((EQUAL I N) (RETURN V)))
   (SETQ I (ADD1 I))
   (GO TOP)))))

(DE MKARRAY (NAME DIMS)
   (SET NAME (MKARRAY1 DIMS))
   NAME)

(DE MKARRAY1 (DIMS) (COND
   ((NULL DIMS) NIL)
   (T (PROG (I V)
      (SETQ V (MKVECT (CAR DIMS)))
      (SETQ I 0)
 LOOP (COND
        ((GREATERP I (CAR DIMS)) (RETURN V)))
      (PUTV V I (MKARRAY1 (CDR DIMS)))
      (SETQ I (ADD1 I))
      (GO LOOP)))))

(DE PICKEL (NAME INX) (PICKEL1 (EVAL NAME) INX))

(DE PICKEL1 (V INX) (COND
   ((NULL INX) V)
   (T (PICKEL1 (GETV V (CAR INX)) (CDR INX)))))

(DE PUTIN (NAME INX VAL)
   (PUTIN1 (EVAL NAME) INX VAL))

(DE PUTIN1 (V INX VAL) (COND
   ((NULL (CDR INX))
      (PUTV V (CAR INX) VAL))
   (T (PUTIN1 (GETV V (CAR INX)) (CDR INX) VAL))))

(DE EFFACE (A B) (COND
   ((NULL B) NIL)
   ((EQUAL A (CAR B)) (CDR B))
   (T (RPLACD B (EFFACE A (CDR B))))))

%The next group of functions are a few functions performing arithmetics
%of rational numbers and then a group of functions that print algebraic
%expressions in the mathematical format

(de RANP  (A) (OR (NUMBERP A) (AND (NOT (ATOM A)) (NUMBERP (CAR A))
                       (NUMBERP (CDR A)) (NOT (ZEROP (CDR A)))) ))
(de RANMINUS  (A) (COND
     ((NUMBERP A)   (COND ((ZEROP A)  0)   (T  (MINUS A))))
     ((MINUSP (CDR A))   (CONS (CAR A) (MINUS (CDR A))))
     (T   (CONS (MINUS (CAR A)) (CDR A))) ))
(de RMINUSP  (A) (COND
     ((NUMBERP A)   (MINUSP A))
     ((MINUSP (CAR A))   (NOT (MINUSP (CDR A))))
     (T   (MINUSP (CDR A))) ))
(de TAIL  (X M) (AND (SETQ X (MEMBER X M)) (CDR X)))

 (SETQ BREAK (GENSYM))
 (SETQ RMARGIN 72)

(de COPYBREAK (L) (PROG (RES)
    (MAPC L (FUNCTION (LAMBDA (LE) (AND (EQ LE BREAK)
                                      (SETQ RES (CONS BREAK RES))) )))
    (RETURN RES) ))
(de JOINAT (AT LEVEL ADDBL) (PROG (U V)
    (SETQ V (PLUS ADDBL (IMAGEL AT NIL)))
    (OR (GREATERP RMARGIN (SETQ U (PLUS V LINECOUNTER))) (PROGN
        (MAPC STORE (FUNCTION (LAMBDA (SE)
                                   (RPLACD SE (CONS BREAK (CDR SE))) )))
        (SETQ LINECOUNTER LMARGIN)
        (SETQ U (PLUS V LINECOUNTER))))
    (SETQ V (SASSOC LEVEL STORE NIL))
    (RPLACD V (CONS (CONS AT LINECOUNTER) (CDR V)))
    (SETQ LINECOUNTER U)
    (RETURN STORE) ))
(de PRETOPRINT (E) (COND
    ((EQ (CAR E) (QUOTE TIMES))   (PROGN
              (SETQ E (CDR E))
              (AND (NUMBERP (CAR E)) (MINUSP (CAR E))
                   (JOINAT (QUOTE -) LEVEL 1)
                   (OR (EQN (CAR E) -1) (JOINAT (MINUS(CAR E))LEVEL 1))
                   (SETQ E (CDR E)))
              (MAPC E (FUNCTION (LAMBDA (EE) (COND
                   ((ATOM EE)   (JOINAT EE LEVEL 1))
                   ((OR (EQ (CAR EE) (QUOTE PLUS))
                        (NOT (ATOM (CAR EE))))   (PROGN
                                       (JOINAT LPAR LEVEL 0)
                                       (PRETOPRINT EE)
                                       (JOINAT RPAR LEVEL 1)))
                   (T   (PROG2
                        (PRETOPRINT EE)
                        (SETQ LINECOUNTER (ADD1 LINECOUNTER))) )) )))
              (SETQ LINECOUNTER (SUB1 LINECOUNTER))
              STORE))
    ((EQ (CAR E) (QUOTE EXPT))   (PROG (V)
              (AND (EQN TOP LEVEL) (SETQ TOP (PLUS 2 TOP))
                   (SETQ STORE (CONS (CONS (PLUS 2 LEVEL)
                                      (SETQ V (COPYBREAK (CDAR STORE))))
                             (CONS (CONS (ADD1 LEVEL) (COPY V)) STORE)))
                   (SETQ V NIL))
              (COND ((ATOM (CADR E))   (JOINAT (CADR E) LEVEL 0))
                    ((RANP (CADR E))   (PROGN (JOINAT LPAR LEVEL 0)
                                              (JOINAT (CAADR E)LEVEL 0)
                                              (JOINAT (QUOTE /)LEVEL 0)
                                              (JOINAT (CDADR E)LEVEL 0)
                                              (JOINAT RPAR LEVEL 0)))
                    ((EQ (CAADR E) (QUOTE DER))   (PRETOPRINT (CADR E)))
                    ((AND (ATOM (CAADR E))
                          (NOT (EQ (CAADR E) (QUOTE PLUS))))   (PROG2
                                     (SETQ V (CDADR E))
                                     (JOINAT (CAADR E) LEVEL 0)))
                    (T   (PROGN (JOINAT LPAR LEVEL 0)
                                (PRETOPRINT (CADR E))
                                (JOINAT RPAR LEVEL 0))))
              (COND ((ATOM (CADDR E))
                                   (JOINAT (CADDR E) (PLUS 2 LEVEL) 0))
                    (T   (PROGN (SETQ LEVEL (PLUS 2 LEVEL))
                                (PRETOPRINT (CADDR E))
                                (SETQ LEVEL (PLUS -2 LEVEL))) ))
              (OR V (RETURN STORE))
              (JOINAT LPAR LEVEL 0)
              (MAP V (FUNCTION (LAMBDA (VE) (AND (COND
                    ((ATOM (CAR VE))   (JOINAT (CAR VE) LEVEL 0))
                    (T   (PRETOPRINT (CAR VE)))) (CDR VE)
                                    (JOINAT (QUOTE !,) LEVEL 0)) )))
              (RETURN (JOINAT RPAR LEVEL 0) )))
    ((EQ (CAR E) (QUOTE MINUS))   (PROG2
              (JOINAT (QUOTE -) LEVEL 1)
              (COND ((ATOM (SETQ E (CADR E)))   (JOINAT E LEVEL 0))
                    ((AND (ATOM (CAR E)) (NOT (EQ (CAR E)(QUOTE PLUS))))
                                                         (PRETOPRINT E))
                    (T   (PROGN (JOINAT LPAR LEVEL 0)
                                (PRETOPRINT E)
                                (JOINAT RPAR LEVEL 0))) )))
    ((RANP E)   (PROGN (AND (MINUSP (CAR E)) (JOINAT (QUOTE -)LEVEL 1))
                       (JOINAT LPAR LEVEL 0)
                       (JOINAT (COND ((MINUSP (CAR E)) (MINUS (CAR E)))
                                      (T   (CAR E))) LEVEL 0)
                       (JOINAT (QUOTE /) LEVEL 0)
                       (JOINAT (CDR E) LEVEL 0)
                       (JOINAT RPAR LEVEL 0)))
    ((EQ (CAR E) (QUOTE DER))   (PROG (V)
              (SETQ V (LAST E))
              (COND ((ATOM V)   (JOINAT V LEVEL 0))
                    (T   (PROGN (JOINAT LPAR LEVEL 0)
                                (PRETOPRINT V)
                                (JOINAT RPAR LEVEL 0))))
              (JOINAT (QUOTE !,) LEVEL 0)
              (MAP (CDR E) (FUNCTION (LAMBDA (EE) (AND (CDR EE)
                                  (JOINAT (CAR EE) (SUB1 LEVEL) 1)) )))
              (RETURN STORE)))
    ((NOT (EQ (CAR E) (QUOTE PLUS)))   (PROGN
              (COND ((ATOM (CAR E))   (JOINAT (CAR E) LEVEL 0))
                    (T   (PRETOPRINT (CAR E))))
              (SETQ LINECOUNTER (ADD1 LINECOUNTER))
              (JOINAT LPAR LEVEL 0)
              (MAP (CDR E) (FUNCTION (LAMBDA (EE) (AND (COND
                    ((ATOM (CAR EE))   (JOINAT (CAR EE) LEVEL 0))
                    (T   (PRETOPRINT (CAR EE)))) (CDR EE)
                                    (JOINAT (QUOTE !,) LEVEL 0)) )))
              (JOINAT RPAR LEVEL 0) ))
    (T   (PROGN
         (COND ((AND (NUMBERP (CAR (SETQ E (CDR E)))) (MINUSP (CAR E)))
                              (PROG2 (JOINAT (QUOTE -) LEVEL 1)
                                     (JOINAT (MINUS (CAR E)) LEVEL 1)))
               ((ATOM (CAR E))   (JOINAT (CAR E) LEVEL 1))
               (T   (PROG2 (PRETOPRINT (CAR E))
                           (SETQ LINECOUNTER (ADD1 LINECOUNTER))) ))
         (MAPC (CDR E) (FUNCTION (LAMBDA (EE) (COND
              ((AND (NUMBERP EE) (MINUSP EE))   (PROG2
                                          (JOINAT (QUOTE -) LEVEL 1)
                                          (JOINAT (MINUS EE) LEVEL 1)))
              ((ATOM EE)   (PROG2 (JOINAT (QUOTE +) LEVEL 1)
                                  (JOINAT EE LEVEL 1)))
              ((OR (EQ (CAR EE) (QUOTE MINUS))
                   (AND (RANP EE) (RMINUSP EE))
                   (AND (EQ (CAR EE) (QUOTE TIMES)) (RANP (CADR EE))
                        (RMINUSP (CADR EE))))   (PROG2
                                 (PRETOPRINT EE)
                                 (SETQ LINECOUNTER (ADD1 LINECOUNTER))))
              (T   (PROGN (JOINAT (QUOTE +) LEVEL 1)
                          (PRETOPRINT EE)
                          (SETQ LINECOUNTER (ADD1 LINECOUNTER))) ))) ))
         (SETQ LINECOUNTER (SUB1 LINECOUNTER))
         STORE)) ))
(de JOINBLOCKS (B1 B2) (PROG ( )
 A  (AND (GREATERP (CAAR B1) (CAAR B2))
         (SETQ B2 (CONS (CONS (ADD1(CAAR B2)) (COPYBREAK(CDAR B2))) B2))
         (GO A))
 B  (AND (GREATERP (CAAR B2) (CAAR B1))
         (SETQ B1 (CONS (CONS (ADD1(CAAR B1)) (COPYBREAK(CDAR B1))) B1))
         (GO B))
    (MAPC B1 (FUNCTION (LAMBDA (BE) (PROG2 (NCONC BE (CDAR B2))
                                         (SETQ B2 (CDR B2))) )))
    (RETURN B1) ))
(de PRINTLINE (LINE C) (PROG (V)
    (AND C (PRINC (QUOTE >)))
    (SETQ V LINE)
  A (COND ((OR (NULL V) (EQUAL (CAR V) BREAK))   (RETURN (TERPRI)) ))
    (OTAB (CDAR V))
    (PRINC (CAAR V))
    (SETQ V (CDR V))
    (GO A) ))
(de ALLBLANKS (L) (OR (NULL L)
    (AND (EQUAL (CAR L) BREAK) (ALLBLANKS (CDR L))) ))
(de MATHPRINT (PRINTNAME VALENCE INDICES SIGN SEX)
    (PROG (LINECOUNTER STORE LEVEL TOP IND M)
    (SETQ LINECOUNTER 4)
    (SETQ STORE (LIST (CONS 1 NIL) (CONS 0 NIL)))
    (SETQ LEVEL 1)
    (SETQ TOP 1)
    (SETQ IND INDICES)
    (AND (MEMBER (QUOTE +)VALENCE) (SETQ STORE (CONS(CONS 2 NIL)STORE)))
    (COND ((ATOM PRINTNAME)   (JOINAT PRINTNAME 1 0))
          (T   (PROGN (PRETOPRINT PRINTNAME)
                      (MAP STORE (FUNCTION (LAMBDA (SE)
                           (AND (CDR SE) (CDDR SE)
                                (ALLBLANKS (CDAR SE)) (SETQ M T)
                               (SETQ STORE (EFFACE (CAR SE) STORE))) )))
                      (AND M (SETQ M (LENGTH STORE))
                             (MAPC STORE (FUNCTION (LAMBDA (SE)
                                  (RPLACA SE (SETQ M (SUB1 M))) )))) )))
    (OR VALENCE INDICES (SETQ LINECOUNTER (ADD1 LINECOUNTER)))
    (MAPC VALENCE (FUNCTION (LAMBDA (VE) (PROG2
         (COND ((ATOM (CAR IND))   (JOINAT (CAR IND) (COND
                                                 ((EQ VE (QUOTE +))   2)
                                                 (T   0)) 1))
               (T   (PROGN
                    (SETQ M (SASSOC (COND ((EQ VE (QUOTE +))   2)
                                          (T   0)) STORE NIL))
                    (RPLACD M (CONS (CONS (CAAR IND) LINECOUNTER)
                                    (CDR M)))
                    (SETQ M (SASSOC 1 STORE NIL))
                    (RPLACD M (CONS (CONS (QUOTE !.) LINECOUNTER)
                                    (CDR M)))
                    (SETQ LINECOUNTER (PLUS LINECOUNTER 1
                                           (IMAGEL (CAAR IND) NIL))) )))
         (SETQ IND (CDR IND))) )))
    (SETQ M NIL)
    (MAPC IND (FUNCTION (LAMBDA (IE) (JOINAT IE 0 1) )))
    (JOINAT SIGN 1 1)
    (AND (ATOM SEX) (PROGN
         (MAPC STORE (FUNCTION (LAMBDA (SE)
                        (AND (ALLBLANKS (CDR SE)) (EFFACE SE STORE)) )))
         (JOINAT SEX 1 0)
         (MAPC STORE (FUNCTION (LAMBDA (SE)
                                     (RPLACD SE (REVERSIP (CDR SE))) )))
         (GO A)))
    (SETQ IND STORE)
    (SETQ STORE (LIST (CONS 1 NIL) (CONS 0 NIL)))
    (SETQ TOP 1)
    (PRETOPRINT SEX)
    (MAP STORE (FUNCTION (LAMBDA (EL)
          (AND (CDR EL) (CDDR EL) (ALLBLANKS (CDAR EL)) (SETQ M T)
               (EFFACE (CAR EL) STORE)) )))
    (AND M (SETQ M (LENGTH STORE))
           (MAPC STORE (FUNCTION (LAMBDA (SE)
                                     (RPLACA SE (SETQ M (SUB1 M))) ))) )
    (MAPC STORE (FUNCTION (LAMBDA (SE) (RPLACD SE (REVERSIP(CDR SE))))))
    (MAPC IND (FUNCTION (LAMBDA (IE) (RPLACD IE (REVERSIP (CDR IE))) )))
    (SETQ STORE (JOINBLOCKS IND STORE))
 A  (SETQ IND NIL)
    (MAPC STORE (FUNCTION (LAMBDA (SE) (PROGN
         (SETQ M (TAIL BREAK SE))
         (AND M (SETQ IND T))
         (PRINTLINE (CDR SE) (EQN (CAR SE) 1))
         (RPLACD SE M)) )))
    (AND IND (PROG2 (TERPRI) (GO A)))
    (TERPRI) ))

%The next group are functions that print the results in the input format
%and as the Latex file

 (de PRETOIN (E) (COND
    ((ATOM E)   E)
    ((EQ (CAR E) (QUOTE TIMES))   (PROG (V W)
        (SETQ V (MAPCAR (CDR E) (FUNCTION (LAMBDA (VE) (COND
            ((ATOM VE)   VE)
            ((RANP VE)   (LIST (CAR VE) (CDR VE)))
            (T   (PRETOIN VE))) ))) )
        (SETQ W V)
      A (AND (CDR W) (PROGN
             (RPLACD W (CONS (QUOTE *) (CDR W)))
             (SETQ W (CDDR W))
             (GO A)))
        (RETURN V)))
    ((EQ (CAR E) (QUOTE EXPT))   (LIST (COND
        ((ATOM (CADR E))   (CADR E))
        (T   (PRETOIN (CADR E))) ) (QUOTE ^) (COND
            ((ATOM (CADDR E))   (CADDR E))
            (T   (PRETOIN (CADDR E))) )))
    ((EQ (CAR E) (QUOTE MINUS))   (LIST (QUOTE -) (PRETOIN (CADR E))))
    ((RANP E)   (LIST (CAR E) (CDR E)))
    ((EQ (CAR E) (QUOTE EXP))   (LIST (QUOTE EXP) (PRETOIN (CADR E))))
    ((NOT (EQ (CAR E) (QUOTE PLUS)))   (MAPCAR E (FUNCTION PRETOIN)))
    (T   (PROG (V W)
         (SETQ V (MAPCAR (CDR E) (FUNCTION (LAMBDA (VE) (COND
             ((ATOM VE)   VE)
             ((RANP VE)   (LIST (CAR VE) (CDR VE)))
             (T   (PRETOIN VE))) ))) )
         (COND ((OR (ATOM (CAR V)) (NOT (EQ (CAAR V) (QUOTE MINUS))))
                       (SETQ V (CONS (QUOTE +) V)))
               (T   (PROG2 (SETQ V (CONS (QUOTE -) V))
                           (RPLACA (CDR V) (CADADR V))) ))
         (SETQ W (CDR V))
       A (AND (CDR W) (PROGN
              (COND ((OR (ATOM (CADR W)) (NOT (EQ (CAADR W)
                                                  (QUOTE MINUS))))
                            (RPLACD W (CONS (QUOTE +) (CDR W))))
                    (T   (PROG2 (RPLACD W (CONS (QUOTE -) (CDR W)))
                                (RPLACA (CDDR W) (CADR (CADDR W))) )))
              (SETQ W (CDDR W))
              (GO A)))
         (AND (EQ (CAR V) (QUOTE +)) (SETQ V (CDR V)))
         (RETURN V))) ))
 (de PRETOLATEX (E) (COND
    ((EQ (CAR E) (QUOTE TIMES))   (PROGN
              (SETQ E (CDR E))
              (AND (NUMBERP (CAR E)) (MINUSP (CAR E))
                   (SETQ STORE (CONS (QUOTE -) STORE))
                   (SETQ STORE (CONS BLANK STORE))
                   (OR (EQN (CAR E) -1)
                       (SETQ STORE (CONS (MINUS(CAR E)) STORE)))
                   (SETQ E (CDR E)))
              (MAPC E (FUNCTION (LAMBDA (EE) (COND
                   ((ATOM EE)   (SETQ STORE (CONS EE STORE)))
                   ((OR (EQ (CAR EE) (QUOTE PLUS))
                        (NOT (ATOM (CAR EE))))   (PROGN
                             (SETQ STORE (CONS LBRACE STORE))
                             (SETQ STORE (CONS LPAR STORE))
                             (PRETOLATEX EE)
                             (SETQ STORE (CONS RPAR STORE))
                             (SETQ STORE (CONS RBRACE STORE)) ))
                   (T   (PRETOLATEX EE))) )))
              (AND (EQUAL (CAR STORE) BLANK) (SETQ STORE (CDR STORE)))
              STORE))
    ((EQ (CAR E) (QUOTE EXPT))   (PROG (V)
         (COND ((ATOM (CADR E))   (SETQ STORE (CONS (CADR E) STORE)))
               ((RANP (CADR E))   (SETQ STORE (NCONC (LIST RBRACE RPAR
                       (CDADR E) BLANK OVER BLANK (CAADR E) LBRACE LPAR)
                                                     STORE)))
               ((EQ (CAADR E) (QUOTE DER))   (PROGN
                    (SETQ STORE (CONS LBRACE STORE))
                    (PRETOLATEX (CADR E))
                    (SETQ STORE (CONS RBRACE STORE)) ))
               ((AND (ATOM (CAADR E)) (NOT (EQ (CAADR E) (QUOTE PLUS)))
                     (NOT (EQ (CAADR E) (QUOTE MINUS))))   (PROGN
                          (SETQ V (CDADR E))
                          (SETQ STORE (CONS LBRACE STORE))
                          (SETQ STORE (CONS (CAADR E) STORE))
                          (SETQ STORE (CONS RBRACE STORE)) ))
               (T   (PROGN (SETQ STORE (CONS LBRACE STORE))
                           (SETQ STORE (CONS LPAR STORE))
                           (PRETOLATEX (CADR E))
                           (SETQ STORE (CONS RPAR STORE))
                           (SETQ STORE (CONS RBRACE STORE)) )))
         (SETQ STORE (CONS EXPO STORE))
         (SETQ STORE (CONS LBRACE STORE))
         (COND ((ATOM (CADDR E))   (SETQ STORE (CONS (CADDR E) STORE)))
               (T   (PRETOLATEX (CADDR E)) ))
         (SETQ STORE (CONS RBRACE STORE))
         (OR V (RETURN STORE))
         (SETQ STORE (CONS LPAR STORE))
         (MAP V (FUNCTION (LAMBDA (VE) (AND (COND
              ((ATOM (CAR VE))   (SETQ STORE (CONS (CAR VE) STORE)))
              (T   (PRETOLATEX (CAR VE)))) (CDR VE) (PROG2
                       (SETQ STORE (CONS (QUOTE !,) STORE))
                       (SETQ STORE (CONS BLANK STORE)) )) )))
         (SETQ STORE (CONS RPAR STORE))
         (RETURN STORE)))
    ((EQ (CAR E) (QUOTE MINUS))   (PROGN
         (SETQ STORE (CONS (QUOTE -) STORE))
         (SETQ STORE (CONS BLANK STORE))
         (COND ((ATOM (SETQ E (CADR E)))   (SETQ STORE (CONS E STORE)))
               ((AND (ATOM (CAR E)) (NOT (EQ (CAR E)(QUOTE PLUS))))
                                                         (PRETOLATEX E))
               (T   (PROGN (SETQ STORE(CONS LPAR STORE))
                           (PRETOLATEX E)
                           (SETQ STORE (CONS RPAR STORE))) )) ))
    ((RANP E)   (PROGN (AND (MINUSP (CAR E)) (PROG2
                            (SETQ STORE (CONS (QUOTE -) STORE))
                            (SETQ STORE (CONS BLANK STORE)) ))
                       (SETQ STORE (CONS LBRACE STORE))
                       (SETQ STORE (CONS (COND
                             ((MINUSP (CAR E)) (MINUS (CAR E)))
                             (T   (CAR E))) STORE))
                       (SETQ STORE (CONS BLANK STORE))
                       (SETQ STORE (CONS OVER STORE))
                       (SETQ STORE (CONS BLANK STORE))
                       (SETQ STORE (CONS (CDR E) STORE))
                       (SETQ STORE (CONS RBRACE STORE)) ))
    ((EQ (CAR E) (QUOTE DER))   (PROG (V)
         (SETQ V (LAST E))
         (COND ((ATOM V)   (SETQ STORE (CONS V STORE)))
               (T   (PROGN (SETQ STORE (CONS LPAR STORE))
                           (PRETOLATEX V)
                           (SETQ STORE (CONS RPAR STORE)) )))
         (SETQ STORE (CONS (QUOTE !,) STORE))
         (SETQ STORE (CONS SUBSCR STORE))
         (SETQ STORE (CONS LBRACE STORE))
         (MAP (CDR E) (FUNCTION (LAMBDA (EE) (AND (CDR EE) (PROG2
              (SETQ STORE (CONS (CAR EE) STORE))
              (AND (CDDR EE) (SETQ STORE (CONS BLANK STORE))) )) )))
         (SETQ STORE (CONS RBRACE STORE))
         (RETURN STORE)))
    ((NOT (EQ (CAR E) (QUOTE PLUS)))   (PROGN
          (COND ((ATOM (CAR E))   (SETQ STORE (CONS (CAR E) STORE)))
                (T   (PRETOLATEX (CAR E))))
          (SETQ STORE (CONS BLANK STORE))
          (SETQ STORE (CONS LPAR STORE))
          (MAP (CDR E) (FUNCTION (LAMBDA (EE) (AND (COND
               ((ATOM (CAR EE))   (SETQ STORE (CONS (CAR EE) STORE)))
               (T   (PRETOLATEX (CAR EE)))) (CDR EE)
                       (SETQ STORE (CONS (QUOTE !,) STORE))) )))
          (SETQ STORE (CONS RPAR STORE)) ))
    (T   (PROGN
         (COND ((AND (NUMBERP (CAR (SETQ E (CDR E)))) (MINUSP (CAR E)))
                     (PROGN (SETQ STORE (CONS (QUOTE -) STORE))
                            (SETQ STORE (CONS BLANK STORE))
                            (SETQ STORE (CONS (MINUS (CAR E)) STORE))
                            (SETQ STORE (CONS BLANK STORE)) ))
               ((ATOM (CAR E)) (PROG2 (SETQ STORE (CONS (CAR E) STORE))
                                      (SETQ STORE (CONS BLANK STORE)) ))
               (T   (PROG2 (PRETOLATEX (CAR E))
                           (SETQ STORE (CONS BLANK STORE))) ))
         (MAPC (CDR E) (FUNCTION (LAMBDA (EE) (COND
              ((EQ EE GOODBREAK)   (SETQ STORE (CONS EE STORE)))
              ((AND (NUMBERP EE) (MINUSP EE))   (PROGN
                    (SETQ STORE (CONS (QUOTE -) STORE))
                    (SETQ STORE (CONS BLANK STORE))
                    (SETQ STORE (CONS (MINUS EE) STORE))
                    (SETQ STORE (CONS BLANK STORE)) ))
              ((ATOM EE)   (PROGN (SETQ STORE (CONS (QUOTE +) STORE))
                                  (SETQ STORE (CONS BLANK STORE))
                                  (SETQ STORE (CONS EE STORE))
                                  (SETQ STORE (CONS BLANK STORE)) ))
              ((OR (EQ (CAR EE) (QUOTE MINUS))
                   (AND (RANP EE) (RMINUSP EE))
                   (AND (EQ (CAR EE) (QUOTE TIMES)) (RANP (CADR EE))
                        (RMINUSP (CADR EE))))   (PROG2
                                 (PRETOLATEX EE)
                                 (SETQ STORE (CONS BLANK STORE)) ))
              (T   (PROGN (SETQ STORE (CONS (QUOTE +) STORE))
                          (SETQ STORE (CONS BLANK STORE))
                          (PRETOLATEX EE)
                          (SETQ STORE (CONS BLANK STORE))) )) )))
         (AND (EQUAL (CAR STORE) BLANK) (SETQ STORE (CDR STORE)))
         STORE)) ))
 (de LATPRINTLINE (LINE) (PROG2
    (MAPC LINE (FUNCTION (LAMBDA (LE) (COND
        ((EQUAL LE LATBR)   (LATLINEBREAK))
        (T   (PRINC LE))) )))
    (TERPRI) ))
 (de LATLINEBREAK ( ) (PROGN
    (TERPRI)
    (PRINTC (QUOTE !$!$))
    (TERPRI) (TERPRI)
    (PRINTC (QUOTE !$!$)) ))
 (de MAKEPOTBREAKS (LIS) (COND
    ((ATOM LIS)   LIS)
    ((EQ (CAR LIS) (QUOTE PLUS))   (PROG2
        (MAP (CDR LIS) (FUNCTION (LAMBDA (LE) (PROG2
            (AND (CDR LE) (NOT (EQ (CAR LE) GOODBREAK))
                 (RPLACD LE (CONS GOODBREAK (CDR LE)) ))
            (AND (NOT (ATOM (CAR LE))) (EQ (CAAR LE) (QUOTE TIMES))
                (MAP (CDAR LE) (FUNCTION (LAMBDA (VE)
                    (AND (CDR VE) (NOT (EQ (CAR VE) POTBREAK))
                         (NOT (EQN (CAR VE) -1))
                         (RPLACD VE (CONS POTBREAK (CDR VE)) ))
                          ))) )) )))
        LIS))
    (T   LIS) ))
 (de CLEARBREAKS (LIS) (AND LIS (COND
    ((OR (EQUAL (CAR LIS) GOODBREAK) (EQUAL (CAR LIS) POTBREAK))
                                                (CLEARBREAKS (CDR LIS)))
    (T   (RPLACD LIS (CLEARBREAKS (CDR LIS))) ))) )
 (de BREAKLINE (LIS) (COND
    ((GREATERP 50 (LENGTH LIS))   (CLEARBREAKS LIS))
    (T   (PROG (LINECOUNTER V1)
        (SETQ V1 (MEMBER GOODBREAK LIS))
        (SETQ LINECOUNTER 0)
        (MAP LIS (FUNCTION (LAMBDA (LE) (PROGN
            (SETQ LINECOUNTER (COND
                ((MEMBER (CAR LE) SPECCHAR)   (ADD1 LINECOUNTER))
                ((MEMBER (CAR LE) NULLCHAR)   LINECOUNTER)
                (T   (PLUS (IMAGEL (CAR LE) NIL) LINECOUNTER)) ))
            (AND (GREATERP LINECOUNTER 90) (CDR LE) (PROGN
                (SETQ V1 (MEMBER GOODBREAK (CDR LE)))
                (RPLACD LE (CONS LATBR (CDR LE)))
                (SETQ LINECOUNTER 0) ))
            (AND (EQUAL LE V1) (CDR LE) (COND
                ((GREATERP LINECOUNTER 50)   (PROGN
                    (SETQ V1 (MEMBER GOODBREAK (CDR V1)))
                    (RPLACA LE LATBR)
                    (SETQ LINECOUNTER 0) ))
                (T   (SETQ V1 (MEMBER GOODBREAK (CDR V1))) )))
            (AND (GREATERP LINECOUNTER 70)
                 (SETQ V1 (MEMBER POTBREAK LE)))  ))))
        (SETQ LIS (CLEARBREAKS LIS))
        (RETURN LIS))) ))
 (de INPRINT (PRINTNAME VALENCE INDICES SIGN SEX)
%NOTE - INPRINT IS DESIGNED TO REPLACE MATHPRINT / IT PRINTS THE
%"PRINTNAME" AS AN EXPRESSION READABLE FOR HUMANS!, AS AN EXPRESSION
%READABLE FOR ORTOCARTAN OR AS A SOURCE CODE FOR THE TEXT-EDITOR
%LATEX - ON REQUEST OF THE USER
    (PROG (LINECOUNTER STORE LEVEL TOP IND M)
    (AND (EQ OUTINP (QUOTE INPUT)) (PROGN
         (COND ((ATOM SEX)   (SETQ STORE (CONS SEX NIL)))
               (T   (SETQ STORE (CONS (PRETOIN SEX) NIL)) ))
         (SETQ STORE (CONS SIGN STORE))
         (AND INDICES (SETQ STORE (CONS INDICES STORE)))
         (AND VALENCE (SETQ STORE (CONS VALENCE STORE)))
         (COND ((ATOM PRINTNAME)   (SETQ STORE (CONS PRINTNAME STORE)))
               (T   (SETQ STORE (CONS (PRETOIN PRINTNAME) STORE)) ))
         (MAPC STORE (FUNCTION (LAMBDA (VE) (PROG2 (PRINC VE)
                                                   (PRINC BLANK)) )))
         (TERPRI) (TERPRI)
         (RETURN STORE)))
    (AND (EQ OUTINP (QUOTE LATEX)) (PROGN
         (SETQ M (LINELENGTH))
         (LINELENGTH 120)
         (SETQ PRINTNAME (MAKEPOTBREAKS (COPY PRINTNAME)))
         (COND ((ATOM PRINTNAME)   (SETQ STORE (CONS PRINTNAME STORE)))
               (T   (PRETOLATEX PRINTNAME)))
         (COND (VALENCE   (PROG (V)
                   (SETQ V INDICES)
                   (MAPC VALENCE (FUNCTION (LAMBDA (VE)
                         (SETQ STORE (CONS LBRACE STORE)) )))
                   (MAPC VALENCE (FUNCTION (LAMBDA (VE) (PROGN
                       (SETQ STORE (CONS (COND
                           ((EQ VE (QUOTE +))   EXPO)
                           ((EQ VE (QUOTE -))   SUBSCR)
                           (T   (ERROR (LIST (QUOTE "*****///") VE
             (QUOTE "///*****") (QUOTE "HAS NO MEANING AS A VALENCE")
             (QUOTE "INDICATOR. I HAVE TO STOP"))) )) STORE))
                       (SETQ STORE (CONS LBRACE STORE))
                       (SETQ STORE (CONS (CAR V) STORE))
                       (SETQ STORE (CONS RBRACE STORE))
                       (SETQ V (CDR V))
                       (SETQ STORE (CONS RBRACE STORE))) ))) ))
               (INDICES   (PROGN (SETQ STORE (CONS SUBSCR STORE))
                                 (SETQ STORE (CONS LBRACE STORE))
                                 (MAPC INDICES (FUNCTION (LAMBDA (VE)
                                     (SETQ STORE (CONS VE STORE)) )))
                                 (SETQ STORE (CONS RBRACE STORE)) )))
         (SETQ STORE (CONS BLANK STORE))
         (SETQ STORE (CONS SIGN STORE))
         (SETQ STORE (CONS BLANK STORE))
         (SETQ SEX (MAKEPOTBREAKS (COPY SEX)))
         (COND ((ATOM SEX)   (SETQ STORE (CONS SEX STORE)))
               (T   (PRETOLATEX SEX)))
         (SETQ STORE (REVERSIP STORE))
         (PRINTC (QUOTE "\begin{equation}"))
         (SETQ STORE (BREAKLINE STORE))
         (MAP STORE (FUNCTION (LAMBDA (LE)
             (AND (SETQ IND (MEMBER (CAR LE) SPECFUN))
                  (RPLACA LE (CAADR IND))) )))
(setq !*lower nil)
         (map store (function (lambda (le)
             (and (setq ind (member (car le) greeklet))
                  (rplaca le (caadr ind))) )))
(setq !*lower t)
         (LATPRINTLINE STORE)
         (PRINTC (QUOTE "\end{equation}"))
         (LINELENGTH M)
         (TERPRI) (TERPRI)
         (RETURN STORE)))
    (SETQ LINECOUNTER 4)
    (SETQ STORE (LIST (CONS 1 NIL) (CONS 0 NIL)))
    (SETQ LEVEL 1)
    (SETQ TOP 1)
    (SETQ IND INDICES)
    (AND (MEMBER (QUOTE +)VALENCE) (SETQ STORE (CONS(CONS 2 NIL)STORE)))
    (COND ((ATOM PRINTNAME)   (JOINAT PRINTNAME 1 0))
          (T   (PROGN (PRETOPRINT PRINTNAME)
                      (MAP STORE (FUNCTION (LAMBDA (SE)
                               (AND (CDR SE) (CDDR SE)
                                    (ALLBLANKS (CDAR SE)) (SETQ M T)
                                    (EFFACE (CAR SE) STORE)) )))
                      (AND M (SETQ M (LENGTH STORE))
                             (MAPC STORE (FUNCTION (LAMBDA (SE)
                                  (RPLACA SE (SETQ M (SUB1 M))) )))) )))
    (OR VALENCE INDICES (SETQ LINECOUNTER (ADD1 LINECOUNTER)))
    (MAPC VALENCE (FUNCTION (LAMBDA (VE) (PROG2
         (COND ((ATOM (CAR IND))   (JOINAT (CAR IND) (COND
                                                 ((EQ VE (QUOTE +))   2)
                                                 (T   0)) 1))
               (T   (PROGN
                    (SETQ M (SASSOC (COND ((EQ VE (QUOTE +))   2)
                                          (T   0)) STORE NIL))
                    (RPLACD M (CONS (CONS (CAAR IND) LINECOUNTER)
                                    (CDR M)))
                    (SETQ M (SASSOC 1 STORE NIL))
                    (RPLACD M (CONS (CONS (QUOTE !.) LINECOUNTER)
                                    (CDR M)))
                    (SETQ LINECOUNTER (PLUS LINECOUNTER 1
                                           (IMAGEL (CAAR IND) NIL))) )))
         (SETQ IND (CDR IND))) )))
    (SETQ M NIL)
    (MAPC IND (FUNCTION (LAMBDA (IE) (JOINAT IE 0 1) )))
    (JOINAT SIGN 1 1)
    (AND (ATOM SEX) (PROGN
         (MAPC STORE (FUNCTION (LAMBDA (SE)
                        (AND (ALLBLANKS (CDR SE)) (EFFACE SE STORE)) )))
         (JOINAT SEX 1 0)
         (MAPC STORE (FUNCTION (LAMBDA (SE)
                                     (RPLACD SE (REVERSIP (CDR SE))) )))
         (GO A)))
    (SETQ IND STORE)
    (SETQ STORE (LIST (CONS 1 NIL) (CONS 0 NIL)))
    (SETQ TOP 1)
    (PRETOPRINT SEX)
    (MAP STORE (FUNCTION (LAMBDA (EL)
          (AND (CDR EL) (CDDR EL) (ALLBLANKS (CDAR EL)) (SETQ M T)
               (SETQ STORE (EFFACE (CAR EL) STORE))) )))
    (AND M (SETQ M (LENGTH STORE))
           (MAPC STORE (FUNCTION (LAMBDA (SE)
                                     (RPLACA SE (SETQ M (SUB1 M))) ))) )
    (MAPC STORE (FUNCTION (LAMBDA (SE) (RPLACD SE (REVERSIP(CDR SE))))))
    (MAPC IND (FUNCTION (LAMBDA (IE) (RPLACD IE (REVERSIP (CDR IE))) )))
    (SETQ STORE (JOINBLOCKS IND STORE))
 A  (SETQ IND NIL)
    (MAPC STORE (FUNCTION (LAMBDA (SE) (PROGN
         (SETQ M (TAIL BREAK SE))
         (AND M (SETQ IND T))
         (PRINTLINE (CDR SE) (EQN (CAR SE) 1))
         (RPLACD SE M)) )))
    (AND IND (PROG2 (TERPRI) (GO A)))
    (TERPRI) ))

%The next group are functions doing arithmetics of rational numbers

(de COPYN (X N) (AND (NOT (ZEROP N))
                           (CONS (COPY X) (COPYN X (SUB1 N))) ))
(de GREP (A B) (COND
    (A   (AND B (COND ((RANP A)
                (OR (NOT (RANP B)) (AND (EQUAL A B) 1) (RGREATERP B A)))
                      ((RANP B)   NIL)
                      ((ATOM A)
                           (OR (NOT (ATOM B)) (AND (EQ A B) 1) (GREATERP
                              (OR (GET A (QUOTE PRIOR)) (NOPRIOR A))
                              (OR (GET B (QUOTE PRIOR)) (NOPRIOR B)) )))
                      ((ATOM B)   NIL)
                      ((EQUAL (CAR A) (CAR B))   (GREP (CDR A) (CDR B)))
                      (T   (GREP (CAR A) (CAR B))) )))
    (T   (OR B 1)) ))
(de GCF (A B) (PROG (S)
    (AND (MINUSP A) (SETQ A (MINUS A)))
    (AND (MINUSP B) (SETQ B (MINUS B)))
    (COND ((ZEROP A)   (RETURN B))
          ((ZEROP B)   (RETURN A))
          ((GREATERP B A)   (PROGN (SETQ S A) (SETQ A B) (SETQ B S))))
 H  (AND (ZEROP (SETQ S (REMAINDER A B))) (RETURN B))
    (SETQ A B)
    (SETQ B S)
    (GO H) ))
(de NFACTORS (N) (COND
    ((MINUSP N)   (CONS -1 (NFACTORS (MINUS N))))
    ((OR (ZEROP N) (ONEP N))   (CONS N NIL))
    (T   (PROG (P H PL FACTORS DP)
         (SETQ DP (CONS 2 0))
      A  (COND ((EQN N 2)   (PROGN (RPLACD DP (ADD1 (CDR DP)))
                                   (SETQ L (CONS DP L))
                                   (RETURN (CONS 2 FACTORS))))
               ((ZEROP (REMAINDER N 2))   (PROGN
                                          (RPLACD DP (ADD1 (CDR DP)))
                                         (SETQ FACTORS (CONS 2 FACTORS))
                                         (SETQ N (QUOTIENT N 2))
                                         (GO A))))
         (SETQ L (CONS DP L))
         (SETQ P 3)
      E  (SETQ DP (CONS P 0))
      B  (COND ((EQN N P)   (PROGN (RPLACD DP (ADD1 (CDR DP)))
                                   (SETQ L (CONS DP L))
                                   (RETURN (CONS P FACTORS))))
               ((ZEROP (REMAINDER N P))   (PROGN
                                         (RPLACD DP (ADD1 (CDR DP)))
                                         (SETQ FACTORS (CONS P FACTORS))
                                         (SETQ N (QUOTIENT N P))
                                         (GO B)))
               ((GREATERP (TIMES P P) N)   (PROG2
                            (SETQ L (CONS (CONS N 1) (CONS DP L)))
                            (RETURN (CONS N FACTORS)))))
         (SETQ L (CONS DP L))
         (SETQ PL (NCONC PL (CONS P NIL)))
       C (SETQ P (PLUS P 2))
         (SETQ H PL)
       D (AND (ZEROP (REMAINDER P (CAR H))) (GO C))
         (OR (SETQ H (CDR H)) (GO E))
         (GO D))) ))
(de RANSIM (A) (PROG (S)
    (COND ((NUMBERP A)   (RETURN A))
          ((ZEROP (CAR A))   (RETURN 0))
          ((MINUSP (CDR A))
                      (SETQ A (CONS (MINUS (CAR A)) (MINUS (CDR A)))) ))
    (SETQ S (GCF (CAR A) (CDR A)))
    (RETURN (COND
         ((ONEP S)   (COND ((ONEP (CDR A))   (CAR A))
                           (T   A)))
         ((EQN (CDR A) S)   (QUOTIENT (CAR A) S))
         (T   (CONS (QUOTIENT (CAR A) S) (QUOTIENT (CDR A) S))) ))) )
(de RANTIMES (A B) (COND
     ((NUMBERP A)   (COND ((NUMBERP B)   (TIMES A B))
                          (T  (RANSIM (CONS (TIMES(CAR B)A)(CDR B))) )))
     ((NUMBERP B)   (RANSIM (CONS (TIMES (CAR A) B) (CDR A))))
     (T (RANSIM (CONS (TIMES(CAR A)(CAR B)) (TIMES(CDR A)(CDR B))))) ))
(de RANINVER (A) (COND
    ((NUMBERP A)   (COND ((MINUSP A)   (CONS -1 (MINUS A)))
                         (T   (CONS 1 A))))
    ((ZEROP (CAR A))   (ERROR (QUOTE "INVERT OF 0")))
    ((ONEP (CAR A))   (CDR A))
    ((MINUSP (CAR A))   (CONS (MINUS (CDR A)) (MINUS (CAR A))))
    (T   (CONS (CDR A) (CAR A))) ))
(de RANPLUS (A B) (COND
    ((NUMBERP A) (COND ((NUMBERP B)   (PLUS A B))
                       (T (RANSIM (CONS (PLUS (CAR B) (TIMES (CDR B) A))
                                                           (CDR B))) )))
    ((NUMBERP B)  (RANSIM (CONS (PLUS(CAR A)(TIMES(CDR A) B)) (CDR A))))
    (T  (RANSIM (CONS (PLUS (TIMES(CAR A)(CDR B))(TIMES (CDR A)(CAR B)))
                      (TIMES (CDR A) (CDR B))) ))) )
(de RGREATERP (A B) (COND
    ((NUMBERP A)   (COND ((NUMBERP B)   (GREATERP A B))
                         (T   (GREATERP (TIMES A (CDR B)) (CAR B))) ))
    ((NUMBERP B)   (GREATERP (CAR A) (TIMES (CDR A) B)))
    (T   (GREATERP (TIMES (CAR A) (CDR B)) (TIMES (CDR A) (CAR B)))) ))
(de RANINTEXPT (A B) (COND
    ((EQN B 0)   (COND
          ((EQN A 0)   (ERROR (QUOTE "UNDETERMINED EXPONENT 0 TO 0")))
          (T   1)))
    ((EQN A 0) (COND ((MINUSP B) (ERROR(QUOTE "NEGATIVE POWER OF 0")))
                     (T   0)))
    ((EQN A 1)   1)
    ((EQN B 1)   A)
    ((EQN B -1)   (RANINVER A))
    (T   (PROG (Z)
         (AND (MINUSP B) (SETQ A (RANINVER A)) (SETQ B (MINUS B)))
         (AND (NUMBERP A)
              (RETURN (EVAL (CONS (QUOTE TIMES) (COPYN A B))) ))
         (SETQ Z (EVAL (CONS (QUOTE TIMES) (COPYN (CAR A) B))))
         (SETQ A (EVAL (CONS (QUOTE TIMES) (COPYN (CDR A) B))))
         (RETURN (CONS Z A)))) ))
(de SROOT (N S) (PROG (M Q Z P A)
    (COND ((MINUSP (CAR N))   (COND
               ((ZEROP (REMAINDER S 2))
                                 (ERROR (QUOTE "ROOT OF NEGATIVE N")))
               (T   (PROG2 (SETQ M -1)
                           (SETQ N (CDR N))))))
          (T   (SETQ M 1)))
    (AND (ONEP (CAR N)) (RETURN (AND (MINUSP M) (SETQ SZ M) NIL)))
 E  (SETQ Z (NCONC Z Q))
 H  (SETQ A (CDR N))
    (SETQ Q (RPLACD N NIL))
    (SETQ P 1)
 W  (OR (SETQ N A) (RETURN (PROG2 (OR (ONEP M) (SETQ SZ M))
                                  (NCONC Z Q)) ))
    (OR (EQN (CAR N) (CAR Q)) (GO E))
    (OR (EQN (SETQ P (ADD1 P)) S) (PROGN
                                  (SETQ A (CDR N))
                                  (SETQ Q (NCONC Q (RPLACD N NIL)))
                                  (GO W)))
    (SETQ M (TIMES M (CAR Q)))
    (OR (SETQ N (CDR N)) (RETURN (PROG2 (SETQ SZ M) Z)))
    (GO H) ))
(de INTRANEXPT (J R) (PROG (N SZ I W L LF)
    (SETQ J (RANINTEXPT J (CAR R)))
    (SETQ R (CDR R))
    (SETQ LF (NFACTORS J))
    (SETQ W L)
    (MAPC W (FUNCTION (LAMBDA (WE) (AND (EQN (CDR WE) 0)
                                        (SETQ L (EFFACE WE L))) )))
    (SETQ W (CONS R (MAPCAR L (FUNCTION CDR))))
    (SETQ I (CAR W))
 A  (SETQ I (GCF (CADR W) I))
    (AND (EQN I 1) (GO B))
    (AND (CDR (SETQ W (CDR W))) (GO A))
    (OR (EQN I 1) (PROGN
        (SETQ R (QUOTIENT R I))
        (SETQ RES R)
        (MAPC L (FUNCTION (LAMBDA (LE)
                (RPLACD LE (QUOTIENT (CDR LE) I)) )))
        (SETQ W NIL)
        (MAPC L (FUNCTION (LAMBDA (LE)
            (SETQ W (NCONC W (COPYN (CAR LE) (CDR LE)))) )))
        (AND (EQN R 1) (SETQ M (RANTIMES M (EVAL (CONS (QUOTE TIMES)
                                                     W))))(RETURN NIL))
        (SETQ LF (COND ((EQN (CAR LF) -1)   (CONS -1 W))
                       (T   W)))
        (SETQ J (EVAL (CONS (QUOTE TIMES) W))) ))
 B  (SETQ N (SROOT LF R))
    (AND SZ (RETURN (PROG2 (SETQ M (RANTIMES M SZ))
                           (COND ((NULL N)   NIL)
                                 ((NULL (CDR N))   (CAR N))
                                 (T   (EVAL (CONS (QUOTE TIMES)N)))) )))
    (OR N (RETURN NIL))
    (RETURN J) ))
(de RANRANEXPT (X Y) (PROG (M RES)
    (COND ((NUMBERP Y)   (RETURN (RANINTEXPT X Y)))
          ((RMINUSP Y)   (COND ((EQN X 0)
                                (ERROR (QUOTE "NEGATIVE POWER OF 0")))
                               (T   (PROG2 (SETQ X (RANINVER X))
                                           (SETQ Y (RANMINUS Y))) ))))
    (COND ((GREATERP (CAR Y) (CDR Y))   (PROG2
              (SETQ M (RANINTEXPT X (QUOTIENT (CAR Y) (CDR Y))))
             (SETQ Y (CONS (REMAINDER (CAR Y) (CDR Y)) (CDR Y)) )))
          (T   (SETQ M 1)))
    (OR (NUMBERP X) (PROG2
              (SETQ M (RANTIMES M (CONS 1 (COND
                 ((ONEP (CAR Y))   (CDR X))
                 (T   (EVAL (CONS (QUOTE TIMES)
                                  (COPYN (CDR X) (CAR Y))) ))) )))
              (SETQ X (EVAL (CONS (QUOTE TIMES) (CONS (CAR X)
                               (COPYN (CDR X) (SUB1 (CDR Y))) ))) )))
    (SETQ RES (CDR Y))
    (SETQ X (INTRANEXPT X Y))
    (RETURN (COND
         ((NULL X)   M)
         ((EQN M 1)   (LIST (QUOTE EXPT) X (CONS 1 RES)))
         (T   (LIST (QUOTE TIMES) M
                    (LIST (QUOTE EXPT) X (CONS 1 RES)) )))) ))

%The next group are functions for algebraic simplification of symbolic
%expresssions

(de SMINUS (E) (COND
    ((RANP E)   (RANMINUS E))
    ((ATOM E)   (LIST (QUOTE MINUS) E))
    ((EQ (CAR E) (QUOTE MINUS))   (CADR E))
    ((EQ (CAR E) (QUOTE TIMES))   (COND
         ((EQN (CADR E) -1)   (CONS (QUOTE TIMES) (CDDR E)))
         ((RANP (CADR E))   (CONS (QUOTE TIMES)
                                   (CONS (RANMINUS (CADR E)) (CDDR E))))
         (T   (CONS (QUOTE TIMES) (CONS -1 (CDR E)))   )))
    ((EQ (CAR E) (QUOTE PLUS))
                    (CONS (QUOTE PLUS) (MAPCAR (CDR E) (QUOTE SMINUS))))
    (T   (LIST (QUOTE MINUS) E)))  )
(de JOINPLUS (E) (COND
    ((NULL CONTENT)   (SETQ CONTENT (CONS E CONTENT)))
    ((EQUAL (CAAR CONTENT) (CAR E))   (PROG2
         (RPLACD (CAR CONTENT) (RANPLUS (CDAR CONTENT) (CDR E)))
         (AND (EQN (CDAR CONTENT) 0)
              (SETQ CONTENT (CDR CONTENT))) ))
    ((GREP (CAAR CONTENT) (CAR E))   (SETQ CONTENT (CONS E CONTENT)))
    (T   (PROG (HELP)
         (SETQ HELP CONTENT)
      A  (OR (CDR HELP) (RETURN (NCONC HELP (CONS E NIL))))
         (COND ((EQUAL (CAADR HELP) (CAR E))   (RETURN (PROG2
                    (RPLACD (CADR HELP) (RANPLUS (CDADR HELP) (CDR E)))
                    (AND (EQN (CDADR HELP) 0)
                         (SETQ CONTENT (EFFACE (CADR HELP) CONTENT))))))
               ((GREP (CAADR HELP) (CAR E))
                           (RETURN (RPLACD HELP (CONS E (CDR HELP)))) ))
         (SETQ HELP (CDR HELP))
         (GO A))) ))
(de TRANSPAIR (E) (COND
    ((EQN (CDR E) 1)   (CAR E))
    ((EQN (CDR E) -1)   (SMINUS (CAR E)))
    (T    (CONS (QUOTE TIMES) (COND
         ((AND (NOT (ATOM (CAR E))) (EQ (CAAR E) (QUOTE TIMES)))
                                                (CONS (CDR E) (CDAR E)))
         (T   (LIST (CDR E) (CAR E))) ))) ))
(de SPLUS (E) (PROG (NUMBER HELP CONTENT)
    (SETQ NUMBER 0)
 A  (SETQ HELP (CDR E))
    (COND ((RANP (CAR (RPLACD E NIL)))
            (OR (EQN (CAR E) 0) (SETQ NUMBER (RANPLUS NUMBER (CAR E)))))
          ((ATOM (CAR E))   (JOINPLUS (RPLACD E 1)))
          ((EQ (CAAR E)(QUOTE PLUS))  (SETQ HELP (APPEND (CDAR E)HELP)))
          ((EQ (CAAR E) (QUOTE MINUS))   (JOINPLUS (CONS (CADAR E) -1)))
          ((EQ (CAAR E) (QUOTE TIMES))   (JOINPLUS (PROG (P HELP)
               (SETQ HELP (CDAR E))
               (COND ((RANP (SETQ P (CAR HELP))) (SETQ HELP (CDR HELP)))
                     (T    (SETQ P 1)))
               (SETQ HELP (COND ((CDR HELP)   (CONS (QUOTE TIMES) HELP))
                                (T   (CAR HELP))))
               (RETURN (CONS HELP P))) ))
          (T   (JOINPLUS (RPLACD E 1))))
    (AND (SETQ E HELP) (GO A))
    (MAP (SETQ CONTENT (REVERSIP CONTENT)) (FUNCTION (LAMBDA (CE)
                                    (RPLACA CE (TRANSPAIR (CAR CE))) )))
    (OR CONTENT (RETURN NUMBER))
    (AND (EQN NUMBER 0) (RETURN (COND
                   ((CDR CONTENT)   (CONS (QUOTE PLUS) CONTENT))
                   (T   (CAR CONTENT)) )))
    (RETURN (CONS (QUOTE PLUS) (CONS NUMBER CONTENT))) ))
(de SPLUSPARTS (E1 E2) (COND
    ((EQN E1 0)   (COND
         ((OR (ATOM E2) (NOT (EQ (CAR E2) (QUOTE PLUS))))   E2)
         (T   (APPEND E2 NIL)) ))
    ((EQN E2 0)   E1)
    ((AND(NOT(ATOM E1))(EQ(CAR E1)(QUOTE PLUS)))  (SPLUS(RPLACA E1 E2)))
    (T   (SPLUS (LIST E1 E2))) ))
(de SLOG (X) (COND
    ((AND (RANP X) (RMINUSP X))
                       (ERROR (QUOTE "LOGARITHM OF NEGATIVE NUMBER")))
    ((ATOM X)   (COND ((EQN X 1)   0)
                      ((EQN X 0)  (ERROR (QUOTE "LOGARITHM OF ZERO")))
                      (T   (LIST (QUOTE LOG) X))))
     ((EQ (CAR X) (QUOTE EXP))   (CADR X))
     ((EQ (CAR X)(QUOTE EXPT)) (STIMES(LIST(CADDR X) (SLOG (CADR X))) ))
     ((EQ (CAR X)(QUOTE TIMES))   (COND
          ((AND (RANP (CADR X)) (RMINUSP (CADR X)))   (SPLUS (CONS
                    (LIST (QUOTE LOG) (LIST (CAR X) (CADR X) (CADDR X)))
                    (MAPCAR (CDDDR X) (QUOTE SLOG)) )))
          (T   (SPLUS (MAPCAR (CDR X) (QUOTE SLOG))) )))
     (T   (LIST (QUOTE LOG) X))     ))
(de JOINTIM (E) (COND
    ((NULL CONTENT)   (SETQ CONTENT (CONS E CONTENT)))
    ((EQUAL (CAAR CONTENT) (CAR E))   (NCONC (CAR CONTENT) (CDR E)))
    ((GREP (CAAR CONTENT) (CAR E))   (SETQ CONTENT (CONS E CONTENT)))
    (T   (PROG (HELP)
         (SETQ HELP CONTENT)
       A (OR (CDR HELP) (RETURN (NCONC HELP (CONS E NIL))))
         (COND ((EQUAL (CAADR HELP) (CAR E))
                                   (RETURN (NCONC (CADR HELP) (CDR E))))
               ((GREP (CAADR HELP) (CAR E))
                           (RETURN (RPLACD HELP (CONS E (CDR HELP)))) ))
         (SETQ HELP (CDR HELP))
         (GO A))) ))
(de STIMES (E) (PROG (NUMBER HELP HOLD CONTENT TEXP)
    (AND (MEMBER 0 E) (RETURN 0))
    (SETQ NUMBER 1)
 A  (SETQ HELP (CDR E))
    (COND ((RANP (SETQ HOLD (CAR (RPLACD E NIL))))
                                   (SETQ NUMBER (RANTIMES NUMBER HOLD)))
          ((ATOM HOLD)   (JOINTIM (RPLACD E (CONS 1 NIL))))
          ((EQ (CAR HOLD) (QUOTE TIMES))
                                   (SETQ HELP (APPEND (CDR HOLD) HELP)))
          ((EQ (CAR HOLD) (QUOTE MINUS))   (PROG2
                                  (SETQ  NUMBER (RANMINUS NUMBER))
                                  (SETQ HELP (APPEND (CDR HOLD) HELP))))
          ((EQ (CAR HOLD)(QUOTE EXP)) (SETQ TEXP (CONS(CADR HOLD)TEXP)))
          ((EQ (CAR HOLD)(QUOTE EXPT))  (JOINTIM (APPEND(CDR HOLD)NIL)))
          (T   (JOINTIM (RPLACD E (CONS 1 NIL)))))
    (AND (SETQ E HELP) (GO A))
    (AND TEXP (JOINTIM (CONS (QUOTE EXP) TEXP)))
    (MAP (SETQ CONTENT (REVERSIP CONTENT)) (FUNCTION (LAMBDA (CE) (COND
         ((NULL (CDDAR CE))   (COND
                ((EQ (CAAR CE) (QUOTE EXP))   NIL)
                ((EQN (CADAR CE) 1)   (RPLACA CE (CAAR CE)))
                (T   (RPLACA CE (CONS (QUOTE EXPT) (CAR CE)))) ))
         ((PROG2 (RPLACD (CAR CE) (SPLUS (CDAR CE)))
                 (EQN (CDAR CE) 0))
                               (SETQ CONTENT (EFFACE (CAR CE) CONTENT)))
         ((PROG2 (RPLACA CE (SEXPT (CAAR CE) (CDAR CE)))
                 (RANP (CAR CE)))   (PROG2
                      (SETQ NUMBER (RANTIMES NUMBER (CAR CE)))
                      (SETQ CONTENT (EFFACE (CAR CE) CONTENT))))
         ((AND (NOT (ATOM (CAR CE))) (EQ (CAAR CE) (QUOTE TIMES))
               (RANP (CADAR CE)))   (PROG2
                      (SETQ NUMBER (RANTIMES NUMBER (CADAR CE)))
                      (RPLACA CE (CADDAR CE))))
         (T   NIL)) )))
    (OR CONTENT (RETURN NUMBER))
    (SETQ HELP (COND ((EQN NUMBER 1)   CONTENT)
                     ((AND (EQN NUMBER -1) (NULL (CDR CONTENT)))
                                (RPLACA CONTENT (SMINUS (CAR CONTENT))))
                     (T   (CONS NUMBER CONTENT))))
    (SETQ CONTENT NIL)
    (MAPC HELP (FUNCTION (LAMBDA (HE) (AND
          (NOT (ATOM HE)) (EQ (CAR HE) (QUOTE PLUS))
          (SETQ CONTENT (CONS (CDR HE) CONTENT))
          (SETQ HELP (EFFACE HE HELP))) )))
    (SETQ HELP (COND ((NULL HELP)   1)
                     ((NULL (CDR HELP))   (CAR HELP))
                     (T   (CONS (QUOTE TIMES) HELP))))
 C  (OR CONTENT (RETURN HELP))
    (SETQ HOLD NIL)
    (SETQ HELP (COND
        ((AND (NOT (ATOM HELP)) (EQ (CAR HELP) (QUOTE PLUS)))   (PROGN
              (SETQ HOLD (CONS (QUOTE PLUS) (MAPCAR (CDR HELP)
                                                  (FUNCTION (LAMBDA (HE)
                               (STIMES (LIST (CAAR CONTENT) HE)) ))) ))
              (MAPC (CDAR CONTENT) (FUNCTION (LAMBDA (CE)
                    (SETQ HOLD (SPLUS (NCONC (CDR HOLD)
                         (MAPCAR (CDR HELP) (FUNCTION (LAMBDA (HE)
                                       (STIMES (LIST CE HE)) ))) ))) )))
              HOLD))
        ((EQN HELP 1)   (CONS (QUOTE PLUS) (APPEND (CAR CONTENT) NIL)))
        (T   (SPLUS (MAPCAR (CAR CONTENT) (FUNCTION (LAMBDA (CE)
                                       (STIMES (LIST CE HELP)) ))) )) ))
    (SETQ CONTENT (CDR CONTENT))
    (GO C)   ))
(de SEXPT (X Y) (COND
    ((AND (RANP X) (RANP Y))   (RANRANEXPT X Y))
    ((EQN Y 0)   1)
    ((EQN Y 1)   X)
    ((EQN X 0)   0)
    ((EQN X 1)   1)
    ((RANP X)   (COND
         ((ATOM Y)   (LIST (QUOTE EXPT) X Y))
         ((AND (EQ (CAR Y) (QUOTE TIMES)) (RANP (CADR Y)))   (COND
               ((NUMBERP (CADR Y))   (LIST (QUOTE EXPT) (COND
                        ((EQN (CADR Y) -1)   (RANINVER X))
                        (T   (RANINTEXPT X (CADR Y)))) (COND
                             ((CDDDR Y)   (CONS (QUOTE TIMES) (CDDR Y)))
                             (T   (CADDR Y)) )))
               ((AND (RMINUSP X) (ZEROP (REMAINDER (CDADR Y) 2)))
                                                (LIST (QUOTE EXPT) X Y))
               (T   (PROG (S)
                    (SETQ S (RANRANEXPT X (CADR Y)))
                    (RETURN (COND
                        ((RANP S)   (LIST (QUOTE EXPT) S (COND
                             ((CDDDR Y)   (CONS (CAR Y) (CDDR Y)))
                             (T   (CADDR Y)) )))
                        ((EQ (CAR S) (QUOTE EXPT))
                             (LIST (CAR S) (CADR S) (CONS (CAR Y)
                                           (CONS (CADDR S) (CDDR Y))) ))
                        (T   (LIST (QUOTE TIMES)
                                   (LIST (QUOTE EXPT) (CADR S) (COND
                                   ((CDDDR Y)   (CONS (CAR Y) (CDDR Y)))
                                   (T   (CADDR Y)) ))
                                   (LIST (QUOTE EXPT) (CADR (CADDR S))
                                   (CONS (CAR Y) (CONS (CADR (CDADDR S))
                                                  (CDDR Y))) ))) ))) )))
         ((AND (EQ (CAR Y) (QUOTE PLUS)) (RANP (CADR Y)))  (COND
               ((AND (RMINUSP X) (NOT (NUMBERP (CADR Y)))
                     (ZEROP (REMAINDER (CDADR Y) 2)))
                                              (LIST (QUOTE EXPT) X Y))
               (T  (LIST(QUOTE TIMES)(RANRANEXPT X(CADR Y))(SEXPT X(COND
                              ((CDDDR Y)   (CONS (QUOTE PLUS) (CDDR Y)))
                              (T   (CADDR Y))) ))) ))
         ((EQ (CAR Y) (QUOTE MINUS))
                              (LIST (QUOTE EXPT) (RANINVER X) (CADR Y)))
         (T   (LIST (QUOTE EXPT) X Y))))
    ((EQ X (QUOTE EXP))   (LIST X Y))
    ((ATOM X)   (LIST (QUOTE EXPT) X Y))
    ((EQ (CAR X) (QUOTE MINUS))   (PROG (S)
         (COND ((OR (ATOM Y)(NOT(EQ(CAR Y)(QUOTE TIMES))))   (SETQ S Y))
               (T   (SETQ S (CADR Y))))
         (OR (RANP S) (RETURN (LIST (QUOTE EXPT) X Y)))
         (OR (NUMBERP S) (RETURN (COND
             ((ZEROP (REMAINDER (CAR S) 2))   (SEXPT (CADR X) Y))
             ((ZEROP (REMAINDER (CDR S) 2))   (LIST (QUOTE EXPT) X Y))
             (T   (LIST (QUOTE MINUS) (SEXPT (CADR X) Y))) )))
         (SETQ S (REMAINDER S 2))
         (AND (ZEROP S) (RETURN (SEXPT (CADR X) Y)))
         (RETURN (LIST (QUOTE MINUS) (SEXPT (CADR X) Y))) ))
    ((EQ (CAR X) (QUOTE EXP))   (SEXP (STIMES (LIST (CADR X) Y))))
    ((EQ(CAR X)(QUOTE EXPT))   (SEXPT(CADR X)(STIMES(LIST(CADDR X)Y))) )
    ((EQ (CAR X) (QUOTE TIMES))   (STIMES (PROG (Q)
         (SETQ Q (CADR X))
         (OR (AND (RANP Q) (RANP Y)) (RETURN (MAPCAR (CDR X)
                              (FUNCTION (LAMBDA (XE) (SEXPT XE Y) ))) ))
         (SETQ Q (RANRANEXPT Q Y))
         (RETURN (CONS Q (MAPCAR (CDDR X) (FUNCTION (LAMBDA (XE)
                                                 (SEXPT XE Y) ))) )) )))
    ((AND (EQ (CAR X) (QUOTE PLUS)) (NUMBERP Y) (NOT (MINUSP Y))
          (NOT (GREATERP Y UPOWER)) (NOT (GREATERP LPOWER Y)))
               (PROG (C V)
               (SETQ C X)
               (SETQ Y (SUB1 Y))
             A (SETQ V (CONS (QUOTE PLUS) (MAPCAR (CDR C)
                                                  (FUNCTION (LAMBDA (CE)
                             (STIMES (LIST (CADR X) CE)) ))) ))
               (MAPC (CDDR X) (FUNCTION (LAMBDA (XE)
                     (SETQ V (SPLUS (NCONC (CDR V)
                             (MAPCAR (CDR C) (FUNCTION (LAMBDA (CE)
                                     (STIMES (LIST XE CE)) ))) ))) )))
               (SETQ C V)
               (OR (ZEROP (SETQ Y (SUB1 Y))) (GO A))
               (RETURN C)))
    ((EQ (CAR X) (QUOTE COT))   (COND
        ((EQN Y -1)   (CONS (QUOTE TAN) (CDR X)))
        ((OR (AND (RANP Y) (RMINUSP Y))
             (AND (NOT (ATOM Y)) (EQ (CAR Y) (QUOTE TIMES))
                  (RANP (CADR Y)) (RMINUSP (CADR Y))))
                        (LIST (QUOTE EXPT)
                              (CONS (QUOTE TAN) (CDR X)) (SMINUS Y)))
        (T   (LIST (QUOTE EXPT) X Y))))
    ((AND (EQ (CAR X) (QUOTE COS)) (NUMBERP Y) (NOT (MINUSP Y)))
         (PROG (V)
         (SETQ V (SEXPT (LIST (QUOTE PLUS) 1 (LIST (QUOTE MINUS)
                      (LIST (QUOTE EXPT) (CONS (QUOTE SIN) (CDR X)) 2)))
                                                        (QUOTIENT Y 2)))
         (AND (ZEROP (REMAINDER Y 2)) (RETURN V))
         (RETURN (STIMES (LIST X V))) ))
    (T   (LIST (QUOTE EXPT) X Y)) ))
(de DEVELOP (X N) (COND
    ((MINUSP N)   (LIST (QUOTE EXPT) (DEVELOP X (MINUS N)) -1))
    ((ONEP N)   X)
    (T   (PROG (V C)
         (SETQ C X)
         (SETQ N (SUB1 N))
       A (SETQ V (CONS (QUOTE PLUS) (MAPCAR (CDR C) (FUNCTION(LAMBDA(CE)
                                      (STIMES (LIST (CADR X) CE)) ))) ))
         (MAPC (CDDR X) (FUNCTION (LAMBDA (XE)
                        (SETQ V (SPLUS (NCONC (CDR V)
               (MAPCAR (CDR C) (FUNCTION (LAMBDA (CE)
                                       (STIMES (LIST CE XE)) ))) ))) )))
         (SETQ C V)
         (AND (ZEROP (SETQ N (SUB1 N))) (RETURN C))
         (GO A))) ))
(de SEXP (X) (COND
    ((ATOM X)   (COND ((EQN X 0)   1)
                      (T   (LIST (QUOTE EXP) X))))
    ((EQ (CAR X) (QUOTE LOG))   (CADR X))
    ((AND (EQ (CAR X) (QUOTE MINUS)) (NOT (ATOM (CADR X)))
          (EQ (CAADR X) (QUOTE LOG)))   (SEXPT (CADADR X) -1))
    ((EQ (CAR X) (QUOTE PLUS))   (STIMES (MAPCAR (CDR X) (QUOTE SEXP))))
    ((NOT (EQ (CAR X) (QUOTE TIMES)))   (LIST (QUOTE EXP) X))
    (T   (PROG (C M)
         (SETQ C (CDR X))
      A  (COND ((OR (ATOM (CAR C)) (NOT (EQ (CAAR C) (QUOTE LOG))))
                                                       (SETQ C (CDR C)))
               (T   (SETQ M (CAR C))))
         (OR M (NULL C) (GO A))
         (OR M (RETURN (LIST (QUOTE EXP) X)))
         (SETQ X (EFFACE M (APPEND (CDR X) NIL)))
         (SETQ X (COND ((CDR X)   (CONS (QUOTE TIMES) X))
                       (T   (CAR X))))
         (RETURN (SEXPT (CADR M) X)))) ))
(de SIMPLIFY (E MODE) (COND
    ((RANP E)   (RANSIM E))
    ((ATOM E)   E)
    ((NULL (CDR E))   (SIMPLIFY (CAR E) MODE))
    (T   (PROG2
         (COND (MODE   (MAP E (FUNCTION (LAMBDA (EE)
                                  (RPLACA EE (SIMPLIFY (CAR EE) T))) )))
               (T   (SETQ E (MAPCAR E (FUNCTION (LAMBDA (EE)
                                                (SIMPLIFY EE NIL)))) )))
         (SELECT (CAR E) ((QUOTE PLUS)   (SPLUS (CDR E)))
                         ((QUOTE TIMES)   (STIMES (CDR E)))
                         ((QUOTE EXPT)   (SEXPT (CADR E) (CADDR E)))
                         ((QUOTE MINUS)   (SMINUS (CADR E)))
                         ((QUOTE EXP)   (SEXP (CADR E)))
                         ((QUOTE LOG)   (SLOG (CADR E)))
                         ((QUOTE DERIV)   (PROG (V)
                             (SETQ V (LAST E))
                             (MAP (CDR E) (FUNCTION (LAMBDA (EE)
                                  (AND (CDR EE)
                                       (SETQ V (DERIV (CAR EE) V))) )))
                             (RETURN V)))
                         ((QUOTE COT)   (LIST (QUOTE EXPT)
                             (CONS (QUOTE TAN) (CDR E)) -1))   E))) ))

%The next group are functions that do the substitutions and simplify by
%pattern-matching

(de SMOOTH (E MODE) (COND
    ((RANP E)   (RANSIM E))
    ((ATOM E)   E)
    ((NULL (CDR E))   (SMOOTH (CAR E) MODE))
    (T   (PROG2
         (COND (MODE   (MAP E (FUNCTION (LAMBDA (EE)
                                    (RPLACA EE (SMOOTH (CAR EE) T))) )))
               (T   (SETQ E (MAPCAR E (FUNCTION (LAMBDA (EE)
                                                  (SMOOTH EE NIL)))) )))
    (SELECT (CAR E) ((QUOTE PLUS)   E)
                    ((QUOTE TIMES)   E)
                    ((QUOTE EXPT)   (COND
        ((OR (ATOM (CADR E)) (EQ (CAADR E) (QUOTE PLUS)))
                   (LIST (QUOTE EXPT) (CADR E) (SMOOTH (CADDR E) MODE)))
        ((EQ (CAADR E) (QUOTE TIMES))   (CONS (CAADR E)
             (MAPCAR (CDADR E) (FUNCTION (LAMBDA (EE)
                   (SMOOTH (LIST (QUOTE EXPT) EE (CADDR E)) MODE) ))) ))
        (T   (SEXPT (CADR E) (CADDR E))) ))
                    ((QUOTE MINUS)   (SMINUS (CADR E)))
                    ((QUOTE EXP)   (COND
        ((AND (NOT (ATOM (CADR E))) (EQ (CAADR E) (QUOTE PLUS)))
                  (CONS (QUOTE TIMES) (MAPCAR (CDADR E) (QUOTE SEXP))) )
        (T   (SEXP (CADR E))) ))
                    ((QUOTE LOG)   (COND
        ((AND (NOT (ATOM (CADR E))) (EQ (CAADR E) (QUOTE TIMES)))
        (T   (SLOG (CADR E))) ))
                   (CONS (QUOTE PLUS) (MAPCAR (CDADR E) (QUOTE SLOG))) )
                    ((QUOTE DERIV)   (PROG (V)
                        (SETQ V (LAST E))
                        (MAP (CDR E) (FUNCTION (LAMBDA (EE)
                             (AND (CDR EE)
                                  (SETQ V (DERIV (CAR EE) V))) )))
                        (RETURN V)))   E))) ))
(de SUBSET (SET1 SET2) (OR (NULL SET1) (AND SET2
    (MEMBER (CAR SET1) SET2) (SUBSET (CDR SET1) SET2)) ))
(de DIFFSET (SET1 SET2) (PROG ( )
    (MAPC SET2 (FUNCTION (LAMBDA (SE)
                         (AND SET1 (SETQ SET1 (EFFACE SE SET1))) )))
    (RETURN SET1) )))
(de SETDIFF (SET1 SET2) (DIFFSET (APPEND SET1 NIL) SET2))
(de EXCHANGE (LIS) (COND
    ((EQUAL S1 LIS)   (PROG2 (SETQ A T) S2))
    ((OR (ATOM LIS) (RANP LIS))   LIS)
    (T   (PROG (B C)
         (PROG (A) (MAP LIS (FUNCTION (LAMBDA (LE) (PROG2
              (SETQ B (EXCHANGE (CAR LE)))
              (AND A (COND
                   (C   (SETQ C (CONS B C)))
                   (T   (PROG (W)
                        (SETQ W LIS)
                      X (COND ((EQUAL W LE)
                                        (RETURN (SETQ C (CONS B C))) ))
                        (SETQ C (CONS (CAR W) C))
                        (SETQ W (CDR W))
                        (GO X)) )) )) ))) )
         (AND C (SETQ C (CDR (SETQ B (REVERSIP C)))) (SETQ LIS B))
         (AND V (EQ (CAR LIS) V) (SUBSET (CDR S1) (CDR LIS)) (SETQ A T)
              (RETURN (COND
               ((EQ (CAR LIS) (QUOTE PLUS))
                         (SPLUS (CONS S2 (SETDIFF (CDR LIS) (CDR S1)))))
               (T   (STIMES (CONS S2 (SETDIFF (CDR LIS) (CDR S1)))) ))))
         (COND (C   (PROG2 (SETQ A T)
                           (RETURN (SELECT (CAR B)
                               ((QUOTE PLUS)   (SPLUS C))
                               ((QUOTE TIMES)   (STIMES C))
                               ((QUOTE EXPT)   (SEXPT (CAR C) (CADR C)))
                               ((QUOTE MINUS)   (SMINUS (CAR C)))
                               ((QUOTE EXP)   (SEXP (CAR C)))
                               ((QUOTE LOG)   (SLOG (CAR C)))
                               ((QUOTE QUOTIENT)
                                            (QUOTIENT (CAR C) (CADR C)))
                               ((QUOTE REMAINDER)
                                           (REMAINDER (CAR C) (CADR C)))
                               ((OR (QUOTE DER) (QUOTE DERIV))   (PROGN
                                   (SETQ B (LAST C))
                                   (MAP C (FUNCTION (LAMBDA (CE)
                                        (AND (CDR CE)
                                         (SETQ B (DERIV (CAR CE)B))) )))
                                   B)) B))))
               (T   (RETURN LIS))) )) ))
(de SUBSTITUTE (S1 S2 LIS) (PROG (A V)
    (AND (NOT (ATOM S1))
         (OR (EQ (CAR S1) (QUOTE PLUS)) (EQ (CAR S1) (QUOTE TIMES)))
         (SETQ V (CAR S1)))
    (SETQ LIS (EXCHANGE LIS))
    (OR A (NOT MESS) (EQN LIS 0) (SETQ L (CONS (LIST S1 S2) L)))
    (RETURN LIS) ))
(de EQFORM (PAT OBJ) (COND
    ((EQUAL PAT OBJ)   (OR (NULL OBJ) OBJ))
    ((MEMQ PAT MARKERS)   (COND
        ((EVAL PAT)   (AND (EQUAL (EVAL PAT) OBJ) OBJ))
        (T   (PROG2 (SETQ LLM (NCONC LLM (CONS PAT NIL)))
                    (SET PAT OBJ))) ))
    ((OR (ATOM PAT) (ATOM OBJ))   NIL)
    ((AND (OR (EQ (CAR PAT) (QUOTE PLUS)) (EQ (CAR PAT) (QUOTE TIMES)))
          (EQ (CAR PAT) (CAR OBJ)))
                     (AND (EQCHAIN (CDR PAT) (CDR OBJ) (CAR OBJ)) OBJ))
    (T   (AND (EQFORM (CAR PAT) (CAR OBJ))
              (EQFORM (CDR PAT) (CDR OBJ)) OBJ)) ))
(de EQCHAIN (PAT OBJ OPER) (COND
    ((NULL PAT)   (NULL OBJ))
    ((NULL OBJ)   NIL)
    ((MEMQ (CAR PAT) MARKERS)   (COND
        ((CDR PAT)   (COND
            ((MEMQ (CADR PAT) MARKERS)   (COND
                ((CDDR PAT)   (ERROR (LIST
                       (QUOTE "I CANNOT UNIQUELY INTERPRET")
                       (QUOTE "A SUM OR A PRODUCT IN WHICH")
                       (QUOTE "TWO CONSECUTIVE MARKERS")
                       (QUOTE "ARE FOLLOWED BY ANY TERMS.")
                       (QUOTE "THIS HAPPENED WITH *****///") PAT
                       (QUOTE "///*****. SORRY, MUST QUIT.") )))
                ((NULL (CDR OBJ))   NIL)
                ((EVAL (CAR PAT))   (AND (EQUAL (EVAL (CAR PAT))
                                                (CONS OPER OBJ)) (COND
                    ((EVAL (CADR PAT))   (COND
                        ((OR (AND (EQ OPER (QUOTE PLUS))
                                  (EQN (EVAL (CADR PAT)) 0))
                             (AND (EQ OPER (QUOTE TIMES))
                                  (EQN (EVAL (CADR PAT)) 1)))   (CONS OPER OBJ))
                        (T   (ERROR (LIST
                                (QUOTE "YOU HAVE APPARENTLY USED")
                                (QUOTE "THE SAME MARKER IN TWO")
                                (QUOTE "DIFFERENT CONTEXTS WITH")
                                (QUOTE "DIFFERENT EXPECTED MEANINGS")
                                (QUOTE "PLEASE CHECK. THE MARKER IS")
                                (QUOTE "*****///") (CADR PAT)
                                (QUOTE "///*****, AND THE SUSPECTED")
                                (QUOTE "EXPRESSION IS *****///") PAT
                                (QUOTE "///*****. SORRY, MUST QUIT."))) )))
                    (T   (PROGN (SETQ LLM (NCONC LLM (CONS (CADR PAT) NIL)))
                                (SET (CADR PAT) (COND
                                     ((EQ OPER (QUOTE PLUS))   0)
                                     (T   1)))
                                (EVAL (CAR PAT))) )) ))
                (T   (PROGN (COND ((EVAL (CADR PAT))
                                      (OR (AND (EQ OPER (QUOTE PLUS))
                                               (EQN (EVAL (CADR PAT)) 0))
                                          (AND (EQ OPER (QUOTE TIMES))
                                               (EQN (EVAL (CADR PAT)) 1))
                                    (ERROR (LIST
                                    (QUOTE "YOU HAVE APPARENTLY USED")
                                    (QUOTE "THE SAME MARKER IN TWO")
                                    (QUOTE "DIFFERENT CONTEXTS WITH")
                                    (QUOTE "DIFFERENT EXPECTED MEANINGS")
                                    (QUOTE "PLEASE CHECK. THE MARKER IS")
                                    (QUOTE "*****///") (CADR PAT)
                                    (QUOTE "///*****, AND THE SUSPECTED")
                                    (QUOTE "EXPRESSION IS *****///") PAT
                                    (QUOTE "///*****. SORRY, MUST QUIT."))) ))
                                  (T   (SET (CADR PAT) (COND
                                            ((EQ OPER (QUOTE PLUS))   0)
                                            (T   1))) ))
                            (SETQ LLM (CONC LLM (CONS (CAR PAT) NIL)
                                                (CONS (CADR PAT) NIL)))
                            (SET (CAR PAT) (CONS OPER OBJ))) )))
            (T   (PROG (W X)
                 (SETQ W (MEMFORM (CADR PAT) OBJ))
                 (OR W (RETURN NIL))
                 (SETQ X (FRONT (CAR W) OBJ))
                 (SETQ X (COND ((CDR X)   (CONS OPER X))
                               (T   (CAR X))))
                 (AND (EVAL (CAR PAT)) (RETURN (AND
                      (EQUAL (EVAL (CAR PAT)) X)
                      (EQCHAIN (CDR PAT) W OPER)
                      (COND ((CDR OBJ)   (CONS OPER OBJ))
                            (T   (CAR OBJ))) )))
                 (OR (EQCHAIN (CDR PAT) W OPER) (RETURN NIL))
                 (SETQ LLM (NCONC LLM (CONS (CAR PAT) NIL)))
                 (SET (CAR PAT) X)
                 (RETURN (COND ((CDR OBJ)   (CONS OPER OBJ))
                               (T   (CAR OBJ))) )) )))
        ((EVAL (CAR PAT))   (AND (EQUAL (EVAL (CAR PAT)) (COND
                                 ((CDR OBJ)   (CONS OPER OBJ))
                                 (T   (CAR OBJ)))) (EVAL (CAR PAT))))
        (T   (PROG2 (SETQ LLM (NCONC LLM (CONS (CAR PAT) NIL)))
                    (SET (CAR PAT) (COND ((CDR OBJ)   (CONS OPER OBJ))
                                         (T   (CAR OBJ))) )) )))
    (T   (AND (EQFORM (CAR PAT) (CAR OBJ))
              (EQCHAIN (CDR PAT) (CDR OBJ) OPER) (COND
              ((CDR OBJ)   (CONS OPER OBJ))
              (T   (CAR OBJ))) )) ))
(de MEMFORM (PAT LIS) (AND LIS (COND
    ((EQFORM PAT (CAR LIS))   LIS)
    (T   (MEMFORM PAT (CDR LIS))) )) )
(de AFFINE (PAT OBJ OPER) (COND
    ((NULL PAT)   (OR (NULL OBJ) OBJ))
    ((NULL OBJ)   NIL)
    ((MEMQ (CAR PAT) MARKERS)   (COND
        ((CDR PAT)   (PROG (W X)
            (SETQ W (MEMFORM (CADR PAT) OBJ))
            (OR W (RETURN NIL))
            (SETQ X (FRONT (CAR W) OBJ))
            (SETQ X (COND ((CDR X)   (CONS OPER X))
                          (T   (CAR X))))
            (AND (EVAL (CAR PAT)) (RETURN (AND
                 (EQUAL (EVAL (CAR PAT)) X)
                 (OR (EQCHAIN (CDR PAT) W OPER)
                     (AFFINE (CDR PAT) W OPER))
                 (COND ((CDR OBJ)   (CONS OPER OBJ))
                       (T   (CAR OBJ))) )))
            (OR (EQCHAIN (CDR PAT) W OPER)
                (AFFINE (CDR PAT) W OPER) (RETURN NIL))
            (SETQ LLM (NCONC LLM (CONS (CAR PAT) NIL)))
            (SET (CAR PAT) X)
            (RETURN (COND ((CDR OBJ)   (CONS OPER OBJ))
                          (T   (CAR OBJ))) )))
        ((EVAL (CAR PAT))   (AND (EQUAL (EVAL (CAR PAT)) (COND
                                 ((CDR OBJ)   (CONS OPER OBJ))
                                 (T   (CAR OBJ)))) (EVAL (CAR PAT))))
        (T   (PROG2 (SETQ LLM (NCONC LLM (CONS (CAR PAT) NIL)))
                    (SET (CAR PAT) (COND ((CDR OBJ)   (CONS OPER OBJ))
                                         (T   (CAR OBJ))) )) )))
    ((EQFORM (CAR PAT) (CAR OBJ))
             (AND (OR (EQCHAIN (CDR PAT) (CDR OBJ) OPER)
                      (AFFINE (CDR PAT) (CDR OBJ) OPER)) (COND
                  ((CDR OBJ)   (CONS OPER OBJ))
                  (T   (CAR OBJ))) ))
    (T   (AND (OR (EQCHAIN PAT (CDR OBJ) OPER)
                  (AFFINE PAT (CDR OBJ) OPER)) (COND
              ((CDR OBJ)   (CONS OPER OBJ))
              (T   (CAR OBJ))) )) ))
(de DIFFEX (SET1 SET2) (AND SET1 (COND
    ((NULL SET2)   SET1)
    ((EQFORM (CAR SET2) (CAR SET1))   (DIFFEX (CDR SET1) (CDR SET2)))
    (T   (CONS (CAR SET1) (DIFFEX (CDR SET1) SET2))) )) )
(de REPLACE (LIS) (COND
    ((EQFORM S1 LIS)   (PROG2
        (SETQ A T)
        (COND ((EQ S2 (QUOTE EXPAND))   (COND
                   ((AND (NOT (ATOM LIS)) (EQ (CAR LIS) (QUOTE EXPT))
                         (CDR LIS) (NOT (ATOM (CADR LIS)))
                         (EQ (CAADR LIS) (QUOTE PLUS)) (CDDR LIS)
                         (NUMBERP (CADDR LIS)) (NULL (CDDDR LIS)))(PROGN
                             (MAPC LLM (FUNCTION (LAMBDA (LE)
                                       (SET LE NIL) )))
                             (SETQ LLM NIL)
                             (DEVELOP (CADR LIS) (CADDR LIS))))
                   (T   (ERROR (LIST (QUOTE "THE EXPRESSION *****///")
                             LIS (QUOTE "///***** MATCHES THE")
                             (QUOTE "EXPRESSION *****///") S1
                             (QUOTE "///***** WHICH YOU REQUESTED")
                             (QUOTE "TO BE EXPANDED HERE.")
                             (QUOTE "HOWEVER, THE FIRST EXPRESSION")
                             (QUOTE "IS NOT AN EXPONENTIATED SUM.")
                             (QUOTE "PLEASE CHANGE THE FORM OF")
                             (QUOTE "THE SECOND EXPRESSION BECAUSE")
                             (QUOTE "ITS PRESENT FORM CREATED AN")
                             (QUOTE "AMBIGUITY THAT I CANNOT")
                            (QUOTE "RESOLVE. SORRY, MUST QUIT."))))))
              (T   (PROGN (SETQ LS2 S2)
                          (MAPC LLM (FUNCTION (LAMBDA (LE) (PROG (L)
                                (SETQ LS2 (SUBSTITUTE LE (EVAL LE) LS2))
                                (SET LE NIL)) )))
                          (SETQ LLM NIL)
                          LS2))) ))
    ((OR (ATOM LIS) (RANP LIS))   (PROGN
         (MAPC LLM (FUNCTION (LAMBDA (LE) (SET LE NIL) )))
         (SETQ LLM NIL)
         LIS))
    (T   (PROG (B C)
         (PROG (A) (MAP LIS (FUNCTION (LAMBDA (LE) (PROG2
              (SETQ B (REPLACE (CAR LE)))
              (AND A (COND (C   (SETQ C (CONS B C)))
                           (T   (PROG (W)
                                (SETQ W LIS)
                              X (COND ((EQUAL W LE)
                                        (RETURN (SETQ C (CONS B C))) ))
                                (SETQ C (CONS (CAR W) C))
                                (SETQ W (CDR W))
                                (GO X)) ))
                   LLM (PROG2
                   (MAPC LLM (FUNCTION (LAMBDA (LE) (SET LE NIL) )))
                   (SETQ LLM NIL))) ) ))) )
         (AND C (SETQ C (CDR (SETQ B (REVERSIP C)))) (SETQ LIS B))
         (AND V (EQ (CAR LIS) V) (AFFINE (CDR S1) (CDR LIS) V) (SETQ A T)
              (PROGN (SETQ LS2 S2)
                     (MAPC LLM (FUNCTION (LAMBDA (LE) (PROG (L)
                         (SETQ LS2 (SUBSTITUTE LE (EVAL LE) LS2))) )))
                     (SETQ LS2 (CONS LS2 (DIFFEX (CDR LIS) (CDR S1))))
                     (MAPC LLM (FUNCTION (LAMBDA (LE) (SET LE NIL) )))
                     (SETQ LLM NIL)
                     (RETURN (COND
                         ((EQ (CAR LIS) (QUOTE PLUS))   (SPLUS LS2))
                         (T   (STIMES LS2))) ) ))
         (AND LLM (PROG2 (MAPC LLM (FUNCTION (LAMBDA (LE)(SET LE NIL))))
                         (SETQ LLM NIL)))
         (COND (C   (PROG2 (SETQ A T)
                           (RETURN (SELECT (CAR B)
                               ((QUOTE PLUS)   (SPLUS C))
                               ((QUOTE TIMES)   (STIMES C))
                               ((QUOTE EXPT)   (SEXPT (CAR C) (CADR C)))
                               ((QUOTE MINUS)   (SMINUS (CAR C)))
                               ((QUOTE EXP)   (SEXP (CAR C)))
                               ((QUOTE LOG)   (SLOG (CAR C)))
                               ((QUOTE QUOTIENT)
                                            (QUOTIENT (CAR C) (CADR C)))
                               ((QUOTE REMAINDER)
                                           (REMAINDER (CAR C) (CADR C)))
                               ((OR (QUOTE DER) (QUOTE DERIV))   (PROGN
                                   (SETQ B (LAST C))
                                   (MAP C (FUNCTION (LAMBDA (CE)
                                        (AND (CDR CE)
                                         (SETQ B (DERIV (CAR CE)B))) )))
                                   B)) B))))
               (T   (RETURN LIS))) )) ))
(de MATCH (S1 S2 LIS) (PROG (A V LLM LS2)
    (AND (NOT (ATOM S1))
         (OR (EQ (CAR S1) (QUOTE PLUS)) (EQ (CAR S1) (QUOTE TIMES)))
         (SETQ V (CAR S1)))
    (SETQ LIS (REPLACE LIS))
    (OR A (NOT MESS) (EQN LIS 0) (SETQ L (CONS (LIST S1 S2) L)))
    (RETURN LIS) ))
(de SUBSALL (LISNAME AT VALENCE INDICES PAIRS) (PROG (L)
    (MAPC PAIRS (FUNCTION (LAMBDA (SUBL) (SET LISNAME (COND
         ((CAR SUBL)   (MATCH (CADR SUBL) (CADDR SUBL) (EVAL LISNAME)))
         (T (SUBSTITUTE (CADR SUBL) (CADDR SUBL) (EVAL LISNAME))) )) )))
    (MAPC (GET AT (QUOTE SUBS)) (FUNCTION (LAMBDA (VE) (AND
       (OR (NULL VALENCE) (NULL (CADR VE)) (EQUAL (CADR VE) VALENCE))
       (OR (NULL INDICES) (NULL (CADDR VE)) (MEMBER INDICES (CADDR VE)))
       (SET LISNAME (COND
            ((EQ (CADDDR VE) (QUOTE ACTUAL))   (CAR (CDDDDR VE)))
            ((CAR VE)   (MATCH (CADDDR VE) (CAR (CDDDDR VE))
                               (EVAL LISNAME)))
            (T   (SUBSTITUTE (CADDDR VE) (CAR (CDDDDR VE))
                             (EVAL LISNAME))) ))) )))
    (AND L (PROGN
         (TURNCAR) (TURNCAR) (TURNCAR)
         (INPRINT AT VALENCE INDICES (QUOTE DID) (QUOTE (TIMES NOT
       PROVIDE ANY OPPORTUNITY TO EXECUTE THE FOLLOWING SUBSTITUTIONS)))
         (TURNCAR) (TURNCAR)
         (MAPC L (FUNCTION (LAMBDA (LE) (PROGN
               (INPRINT (CAR LE) NIL NIL (QUOTE =) (CADR LE))
               (TURNCAR) (TURNCAR)) ))) ))
    (RETURN (EVAL LISNAME)) ))

%The next group are functions for differentiation

(de REMOVELAST (L) (PROG2
    (OR L (ERROR (QUOTE "NO LAST ELEMENT IN NIL")))
    (AND (CDR L) (PROG2
         (MAP L (FUNCTION (LAMBDA (LE) (OR (AND (CDR LE) (CDDR LE))
                                         (RPLACD LE NIL)) )))
         L)) ))
(de DERSUM (X S) (PROG (V W)
    (MAPC (CDR S) (FUNCTION (LAMBDA (SE)
         (OR (EQN (SETQ W (DERIV X SE)) 0) (SETQ V (CONS W V))) )))
    (OR V (RETURN 0))
    (OR (CDR V) (RETURN (CAR V)))
    (RETURN (SPLUS V))   ))
(de DERPROD (X S) (PROG (CONST VAR DERV RES V)
    (MAPC (CDR S) (FUNCTION (LAMBDA (SE) (COND
         ((EQN (SETQ RES (DERIV X SE)) 0)  (SETQ CONST (CONS SE CONST)))
         (T   (PROG2 (SETQ VAR (CONS SE VAR))
                     (SETQ DERV (CONS RES DERV))) )) )))
    (OR VAR (RETURN 0))
    (OR (CDR VAR) (RETURN (STIMES (NCONC DERV CONST))))
    (SETQ RES NIL)
    (MAPC DERV (FUNCTION (LAMBDA (DE) (PROGN
         (SETQ RES (CONS (STIMES (CONS DE (APPEND CONST
                                        (APPEND (CDR VAR) NIL)) )) RES))
         (SETQ V (CDR VAR))
         (RPLACD VAR NIL)
         (SETQ VAR (NCONC V VAR))) )))
    (RETURN (SPLUS RES)) ))
(de DEREXPT (X S) (PROG (V E) (RETURN (COND
    ((EQN (SETQ E (DERIV X (CADDR S))) 0)   (COND
                 ((EQN (SETQ V (DERIV X (CADR S))) 0)   0)
                 (T   (STIMES (LIST (CADDR S) (SEXPT (CADR S)
                                    (SPLUS (LIST (CADDR S) -1))) V)) )))
    ((EQN (SETQ V(DERIV X(CADR S))) 0)  (STIMES(LIST(SLOG(CADR S))S E)))
    (T   (SPLUS (LIST (STIMES (LIST (SLOG (CADR S)) S E))
                         (STIMES (LIST (CADDR S) (SEXPT (CADR S)
                             (SPLUS (LIST (CADDR S) -1))) V)) ))) )) ))
(de DERIV (X S) (COND
    ((OR (RANP S) (MEMQ S CONSTANTS))   0)
    ((EQ X S)   1)
    ((MEMQ X MARKERS)   (LIST (QUOTE DER) X S))
    ((ATOM S)   (COND
        ((MEMQ S COORD)   0)
        ((GET S (QUOTE DEPS))   (PROG (U) (RETURN (COND
            ((AND (SETQ U (GET S (QUOTE DERIVS)))
                  (SETQ U (SASSOC X U NIL)))   (CADR U))
            (T   (PROGN
                 (SETQ U (COND
                     ((MEMQ X (SETQ U (GET S (QUOTE DEPS))))
                                                 (LIST (QUOTE DER) X S))
                     ((SETQ U (SETDIFF U COORD))   (PROG (W D1 D2)
                         (MAPC U (FUNCTION (LAMBDA (UE)
                             (OR (EQN (SETQ D1 (DERIV X UE)) 0)
                                 (EQN (SETQ D2 (DERIV UE S)) 0)
                                 (SETQ W (NCONC W (CONS
                                       (STIMES (LIST D2 D1)) NIL)))) )))
                         (RETURN (COND ((NULL W)   0)
                                       ((NULL (CDR W))   (CAR W))
                                       (T   (SPLUS W)))) ))
                     (T   0)))
                 (PUT S (QUOTE DERIVS) (NCONC (GET S (QUOTE DERIVS))
                                              (CONS (LIST X U) NIL)))
                 U) ))) ))
        ((GET S (QUOTE CONTENT))   (PROG (U) (RETURN (COND
            ((AND (SETQ U (GET S (QUOTE DERIVS)))
                  (SETQ U (SASSOC X U NIL)))   (CADR U))
            (T   (PROG2 (PUT S (QUOTE DERIVS) (NCONC
                             (GET S (QUOTE DERIVS))
                             (CONS (LIST X (SETQ U (DERIV X
                                      (GET S (QUOTE CONTENT))) )) NIL)))
                        U) ))) ))
        ((MEMQ S MARKERS)   (LIST (QUOTE DER) X S))
        (T   (NOPRIOR S))) )
    ((EQ (CAR S) (QUOTE PLUS))   (DERSUM X S))
    ((EQ (CAR S) (QUOTE TIMES))   (DERPROD X S))
    ((EQ (CAR S) (QUOTE EXPT))   (DEREXPT X S))
    ((NULL (CDDR S))   (PROG (U) (RETURN (COND
                             ((EQN (SETQ U (DERIV X (CADR S))) 0)   0)
                             (T   (SELECT (CAR S)
        ((QUOTE MINUS)   (SMINUS U))
        ((QUOTE LOG)   (STIMES (LIST (SEXPT (CADR S) -1) U)))
        ((QUOTE EXP)   (STIMES (LIST S U)))
        ((QUOTE SIN)   (STIMES (LIST (LIST (QUOTE COS) (CADR S)) U)))
        ((QUOTE COS)   (STIMES (LIST -1 (LIST (QUOTE SIN) (CADR S)) U)))
        ((QUOTE TAN)
              (STIMES (LIST (SEXPT (LIST (QUOTE COS) (CADR S)) -2) U)))
        ((QUOTE COT)
              (STIMES (LIST -1 (SEXPT (LIST(QUOTE SIN)(CADR S)) -2) U)))
        ((QUOTE SINH)   (STIMES (LIST (LIST (QUOTE COSH) (CADR S)) U)))
        ((QUOTE COSH)   (STIMES (LIST (LIST (QUOTE SINH) (CADR S)) U)))
        ((QUOTE TANH)
              (STIMES (LIST (SEXPT (LIST (QUOTE COSH) (CADR S)) -2) U)))
        ((QUOTE COTH)
              (STIMES (LIST -1 (SEXPT (LIST(QUOTE SINH)(CADR S))-2) U)))
        ((QUOTE ARCSIN)   (STIMES (LIST (SEXPT (SPLUS (LIST 1
                      (SMINUS (SEXPT (CADR S) 2)))) (QUOTE (-1 2))) U)))
        ((QUOTE ARCTAN)
              (STIMES (LIST (SEXPT(SPLUS(LIST 1(SEXPT(CADR S)2)))-1)U)))
        ((QUOTE ARSH)   (STIMES (LIST (SEXPT (SPLUS (LIST 1
                               (SEXPT (CADR S) 2))) (QUOTE (-1 2))) U)))
        ((QUOTE ARCH)   (STIMES (LIST (SEXPT (SPLUS (LIST -1
                               (SEXPT (CADR S) 2))) (QUOTE (-1 2))) U)))
        ((QUOTE ARTH)   (STIMES (LIST (SEXPT (SPLUS (LIST 1
                                  (SMINUS (SEXPT (CADR S) 2)))) -1) U)))
        (COND ((ATOM (CADR S))
                 (STIMES (LIST (LIST (QUOTE DER) (CADR S) (CAR S)) U)))
              (T   (STIMES (LIST (CONS (LIST (QUOTE DER) 1 (CAR S))
                                       (CDR S)) U)) ))) )) )))
    ((EQ (CAR S) (QUOTE DER))   (PROG (V K)
           (SETQ V (DERIV X (LAST S)))
           (AND (EQN V 0) (RETURN 0))
           (AND (OR (ATOM V) (NOT (EQ (CAR V) (QUOTE DER)))) (RETURN
                     (PROG (W R)
                     (SETQ R (DERIV (CADR S) V))
                     (MAP (CDDR S) (FUNCTION (LAMBDA (SE)
                          (AND (CDR SE) (SETQ R (DERIV (CAR SE) R))) )))
                     (RETURN R))))
           (SETQ K (APPEND S NIL))
           (SETQ S K)
           (SETQ V (CADR V))
         A (COND ((OR (NULL (CDDR K)) (GREATERP (GET V (QUOTE PRIOR))
                                        (GET (CADR K) (QUOTE PRIOR)) ))
                                            (RPLACD K (CONS V (CDR K))))
                 (T   (PROG2 (SETQ K (CDR K))
                             (GO A)) ))
           (RETURN S)))
    ((EQ (CAR S) (QUOTE INT))   (PROG (V)
                   (SETQ V (DERIV X (CADR S)))
                   (OR (EQN V 0) (RETURN (COND
                       ((EQN V 1)   (CADDR S))
                       (T   (STIMES (LIST (CADDR S) V))) )))
                   (SETQ V (DERIV X (CADDR S)))
                   (RETURN (COND ((EQN V 0)   0)
                                 ((EQN (DERIV (CADR S) V) 0)
                                             (STIMES (LIST (CADR S) V)))
                                 (T  (LIST (QUOTE INT) (CADR S) V)))) ))
    (T   (PROG (V W C1 C2)
         (SETQ C1 0)
         (SETQ C2 (OR (ATOM (CAR S)) (NOT (EQ (CAAR S) (QUOTE DER)))))
         (MAPC (CDR S) (FUNCTION (LAMBDA (SE) (COND
              ((EQN (SETQ W (DERIV X SE)) 0)   (SETQ C1 (ADD1 C1)))
              (T   (SETQ V (CONS (STIMES (LIST
                              (COND
                   (C2   (CONS (LIST (QUOTE DER) (SETQ C1 (ADD1 C1))
                                    (CAR S)) (CDR S)))
                   (T   (PROG (U B)
                        (SETQ C1 (ADD1 C1))
                        (SETQ U (APPEND (CAR S) NIL))
                        (SETQ B U)
                      A (COND ((OR (NULL (CDDR U)) (GREP C1 (CADR U)))
                                      (PROG2 (RPLACD U (CONS C1 (CDR U)))
                                             (RETURN (CONS B (CDR S))) ))
                              (T   (PROG2 (SETQ U (CDR U))
                                          (GO A)) )) )))
                              W)) V)))) )))
         (RETURN (COND ((NULL V)   0)
                       ((NULL (CDR V))   (CAR V))
                       (T   (SPLUS V)))) )) ))

%The next group are functions that supervise the consecutive steps
%in calculating the curvature tensors. Ortocartan is the main supervisor
%and init is its initial part

 (de TIMEMESSAGE (L C)
    (OR (MEMQ (QUOTE TIMEMESSAGES) NOPRINT) (PROGN
        (PRINTC (LIST L (COND (C   (QUOTE COMPLETED))
                             (T   (QUOTE CALCULATED))) ))
        (PRINTC (LIST (QUOTE "TIME =") (PLUS (TIME) (MINUS CLOCK))
                     (QUOTE MSEC)))
        (TERPRI) )))

(putd 'edi 'expr 'mathprint)
(putd 'turncar 'expr 'terpri)

(DE MESSAGE (SEX MODE) (COND (MODE   (PRINTC SEX))
                             (T   (PRINC SEX))))

(de INIT (L NUMBER) (PROG (V ARRAY MEM GLS)
    (TERPRI) (TERPRI)
    (PRINTC (CAR L))
    (TERPRI) (TERPRI)
    (MAPC (CDR L) (FUNCTION (LAMBDA (LE) (SELECT (CAR LE)
        ((QUOTE COORDINATES)   (SETQ COORD (CDR LE)))
        ((QUOTE FUNCTIONS)   (SETQ FUNCTIONS (CDR LE)))
        ((QUOTE CONSTANTS)   (SETQ CONSTANTS (CDR LE)))
        ((QUOTE EMATRIX)   (SETQ ARRAY (CDR LE)))
        ((QUOTE SYMBOLS)   (SETQ METSUBS (CDR LE)))
        ((QUOTE SUBSTITUTIONS)   (SETQ SIMPLSUBS (CDR LE)))
        ((QUOTE DONT)   (SETQ NOPRINT (CDDR LE)))
        ((QUOTE STOP)   (SETQ STOP (CADDR LE)))
        ((QUOTE TENSORS)   (SETQ TENSORS (CDR LE)))
        ((QUOTE DATA)   (SETQ DATASUBS (CDDR LE)))
        ((QUOTE EXPAND)   (PROG2 (SETQ LPOWER (CADDDR LE))
                                 (SETQ UPOWER (CADR (CDDDDR LE))) ))
        ((QUOTE MARKERS)   (SETQ MARKERS (CDR LE)))
        ((QUOTE RMARGIN)   (SETQ RMARGIN (CADR LE)))
        ((QUOTE LMARGIN)   (SETQ LMARGIN (CADR LE)))
        ((QUOTE OUTPUT)   (COND
           ((EQUAL LE (QUOTE (OUTPUT FOR INPUT)))
                                            (SETQ OUTINP (QUOTE INPUT)))
           ((EQUAL LE (QUOTE (OUTPUT FOR LATEX)))
                                            (SETQ OUTINP (QUOTE LATEX)))
           (T          (ERROR (LIST (QUOTE "*****///") LE (QUOTE "///*****")
                                    (QUOTE "IS AN ILLEGAL ARGUMENT")
                                    (QUOTE "FOR OUR SYSTEM.")
                                    (QUOTE "SORRY, CAN'T GO ON."))) )))
        (ERROR (LIST (QUOTE "*****///") LE (QUOTE "///*****")
                          (QUOTE "IS AN ILLEGAL ARGUMENT")
                          (QUOTE "FOR OUR SYSTEM.")
                                    (QUOTE "SORRY, CAN'T GO ON")))) )))
    (OR (EQN (SETQ V (LENGTH ARRAY)) NUMBER)
        (ERROR (LIST (COND ((GREATERP V NUMBER)   (QUOTE "TOO MANY"))
                           (T   (QUOTE "TOO FEW")))
                     (QUOTE "ELEMENTS OF THE MATRIX.")
                     (QUOTE "CHEER UP BOY,")
                     (QUOTE "YOU CAN TRY ONCE MORE"))))
    (OR COORD (ERROR (LIST (QUOTE "YOU DID NOT SPECIFY THE NAMES OF")
                           (QUOTE "THE COORDINATES. I CANNOT DO MY")
                           (QUOTE "JOB WITHOUT THIS INFORMATION.")
                           (QUOTE "SORRY, TRY AGAIN PLEASE.")) ))
    (SETQ MESS (NOT (MEMQ (QUOTE MESSAGES) NOPRINT)))
    (OR LPOWER (SETQ LPOWER 2))
    (OR UPOWER (SETQ UPOWER 3))
    (AND (GREATERP RMARGIN 72) (LINELENGTH RMARGIN))
    (MAP METSUBS (FUNCTION (LAMBDA (ME)
                 (RPLACA ME (INTOPRE (CAR ME))) )))
    (LISTDEPS)
    (DEFSYMB)
    (MAKEPAIRS)
    (PUTSYMB)
    (MAP DATASUBS (FUNCTION (LAMBDA (DE)
         (RPLACA DE (SIMPLIFY (INTOPRE (CAR DE)) T)) )))
    (AND SYMBOLS (PROGN
         (MESSAGE (QUOTE SYMBOLS) T)
         (TURNCAR)
         (MAPC SYMBOLS (FUNCTION (LAMBDA (SE) (PROG2
               (INPRINT SE NIL NIL (QUOTE =) (GET SE (QUOTE CONTENT)))
               (TURNCAR)) ))) ))
    (MAPC MARKERS (FUNCTION (LAMBDA (ME) (SET ME NIL) )))
    (AND SIMPLSUBS (PROG (S M L DGLS M!?)
         (OR (SETQ MEM (MEMQ (QUOTE SUBSTITUTIONS) NOPRINT)) (PROG2
             (MESSAGE (QUOTE SUBSTITUTIONS) T)
             (TURNCAR)))
         (SETQ S (QUOTE =))
         (SETQ V SIMPLSUBS)
         (AND MARKERS (SETQ GLS
              (MAPCAR V (FUNCTION (LAMBDA (VE) (AND (EQ VE S) S) ))) )
              (SETQ DGLS GLS))
       A (OR (SETQ M (FRONT (SETQ L (PREVIOUS S V)) V)) MEM
             (MESSAGE (QUOTE EVERYWHERE) T))
         (SETQ V (MEMBER L V))
         (OR MEM (PROGN
             (MAPC M (FUNCTION (LAMBDA (ME) (PROG2
                (MESSAGE ME NIL)
                (MESSAGE BLANK NIL)) )))
             (TURNCAR) (TURNCAR) ))
         (RPLACA V (INTOPRE (CAR V)))
         (COND (M!?   (PROGN (SETQ DGLS (EQUATE V DGLS))
                            (RPLACA DGLS T)
                            (RPLACA V (SMOOTH (CAR V) T))
                            (SETQ M!? NIL)))
               (T   (RPLACA V (SIMPLIFY (CAR V) T))))
         (RPLACA (CDDR V) (SIMPLIFY (INTOPRE (CADDR V)) T))
         (SETQ M!? NIL)
         (AND (EQ (CADDR V) (QUOTE EXPAND)) (COND
              ((AND (NOT (ATOM (CAR V))) (EQ (CAAR V) (QUOTE EXPT))
                    (CDAR V) (CDDAR V) (NULL (CDDDAR V)))
                        (OR (AND DGLS (CAR DGLS)) (RPLACA (CDDR V)
                                      (DEVELOP (CADAR V) (CADDAR V))) ))
              (T   (ERROR (LIST (QUOTE "THE EXPRESSION *****///")
                      (CAR V) (QUOTE "///***** IS NOT AN EXPONENTIAL")
                      (QUOTE "EXPRESSION, AND SO THE COMMAND")
                      (QUOTE "** EXPAND ** IS MEANINGLESS IN THIS")
                      (QUOTE "CASE. SORRY, MUST QUIT."))) )))
         (OR MEM (PROGN
             (INPRINT (CAR V) NIL NIL S (CADDR V))
             (TURNCAR) (TURNCAR) ))
         (AND (SETQ V (CDDDR V)) (GO A)) ))
    (AND DATASUBS (PROG (GL)
         (PROG ( ) (MESSAGE (QUOTE (THE SUBSTITUTIONS LISTED ABOVE WILL
                            BE THEMSELVES TRANSFORMED BY THE FOLLOWING
                            SUBSTITUTIONS)) T)
                   (SETQ V DATASUBS)
                 A (COND ((EQ (CADR V) (QUOTE =))
                                         (MESSAGE (QUOTE EVERYWHERE) T))
                         (T   (MAPC (FRONT (PREVIOUS (QUOTE =) V) V)
                                    (FUNCTION (LAMBDA (FE) (PROG2
                                    (INPRINT (QUOTE "IN THE VALUE") NIL
                                       NIL (QUOTE "OF THE EXPRESSION")
                                       (CAR V))
                                    (SETQ V (CDR V))) ))) ))
                   (INPRINT (CAR V) NIL NIL (QUOTE =) (CADDR V))
                   (AND (SETQ V (CDDDR V)) (GO A)))
         (SETQ GL (MAPCAR SIMPLSUBS (FUNCTION (LAMBDA (SE)
                          (AND (EQ SE (QUOTE =)) SE) ))) )
         (CLEARDATA)
         (SETQ DATASUBS NIL)
         (OR (MEMQ (QUOTE MODIFICATIONS) NOPRINT) (PROGN
             (MESSAGE (QUOTE (THE SUBSTITUTIONS YOU ASKED ME TO
                 MODIFY WILL HAVE THE FOLLOWING FINAL FORM)) T)
             (TURNCAR) (TURNCAR) (TURNCAR)
             (PROG (S M L)
                 (SETQ S (QUOTE =))
                 (SETQ V SIMPLSUBS)
              A  (COND ((OR (PREVIOUS S GL) (NEXT S GL)) (PROGN
                            (OR (SETQ M (REMOVELAST (FRONT S V)))
                                (MESSAGE (QUOTE EVERYWHERE) T))
                            (MAPC M (FUNCTION (LAMBDA (ME) (PROGN
                                  (SETQ V (CDR V))
                                  (MESSAGE ME NIL)
                                  (MESSAGE BLANK NIL)) )))
                            (TURNCAR) (TURNCAR)
                            (INPRINT (CAR V) NIL NIL S (CADDR V))
                            (TURNCAR) (TURNCAR)
                            (AND (SETQ V (CDDDR V))
                                 (SETQ GL (CDDR (MEMQ S GL)))
                                 (GO A)) ))
                       (T   (AND (SETQ GL (CDDR (MEMQ S GL)))
                                 (SETQ V (CDDR (MEMQ S V)))
                                 (GO A))) ))) )))
    (SETQ SIMPLSUBS (SUBSTITUTIONS SIMPLSUBS))
    (LISTTENS TENSORS)
    (MAP ARRAY (FUNCTION (LAMBDA (AE)
                         (RPLACA AE (SIMPLIFY (INTOPRE (CAR AE)) T)) )))
    (SETQ EMATRIX (GENSYM))
    (MKARRAY EMATRIX (LIST 4 4))
    (SETQ MEM (MEMQ (QUOTE EMATRIX) NOPRINT))
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
        (RPLACA LIJ I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJ) J)
            (SETQ V (CAR ARRAY))
            (SUBSALL (QUOTE V) (QUOTE EMATRIX) NIL LIJ SIMPLSUBS)
            (PUTIN EMATRIX LIJ V)
            (OR (EQN V 0) MEM (INPRINT (QUOTE EMATRIX) (QUOTE (+ -))
                         (RPLACD LIJ (CONS (CDR LIJ) NIL)) (QUOTE =) V))
            (SETQ ARRAY (CDR ARRAY))) ))) ))))
    (TIMEMESSAGE (QUOTE EMATRIX) T)
    (TURNCAR) (TURNCAR) (TURNCAR)
    (REMPROP (QUOTE EMATRIX) (QUOTE SUBS)) ))
(de RESETVARS (LE) (PROG ()
   (REMPROP LE (QUOTE SUBS))
   (REMPROP LE (QUOTE PRIOR))
   (REMPROP LE (QUOTE OUTFILE))
   (REMPROP LE (QUOTE CONTENT))
   (REMPROP LE (QUOTE DERIVS))
   (REMPROP LE (QUOTE DEPS))
   (REMPROP LE (QUOTE TENS))
   (REMPROP LE (QUOTE EINSTEIN))   ))
(de ORTOCARTAN (LIS)
    (PROG (COORD FUNCTIONS CONSTANTS EMATRIX METSUBS SIMPLSUBS NOPRINT
           STOP TENSORS DATASUBS IE AGAM GAM RM RC RINV DETEM
           FUNNAMES SYMBOLS UPIE LPOWER UPOWER WORKARR WV LIND LIJ LIJK
           LIJKL LAB LABC LABCD MESS MARKERS LMARGIN CLOCK CHRIS OUTINP)
    (MAPC (OBLIST) (FUNCTION RESETVARS))
    (SETQ CLOCK (TIME))
    (SETQ RMARGIN 72)
    (SETQ LMARGIN  8)
% LMARGIN IS THE MARGIN FOR CONTINUATION LINES ONLY
    (SETQ LIND (LIST 0 1 2 3))
    (SETQ LIJ (LIST NIL NIL))
    (SETQ LIJK (LIST NIL NIL NIL))
    (SETQ LIJKL (LIST NIL NIL NIL NIL))
    (SETQ LAB (LIST NIL NIL))
    (SETQ LABC (LIST NIL NIL NIL))
    (SETQ LABCD (LIST NIL NIL NIL NIL))
    (INIT LIS 16)
    (RPLACD LIS NIL)
    (SETQ RC (GENSYM))
    (MKARRAY RC (LIST 4 4))
    (INVAR EMATRIX 4)
    (AND (EQ STOP (QUOTE DETERMINANT)) (GO END))
    (UPANDTRANS)
    (AND (SETQ WV (GET (QUOTE IE) (QUOTE TENS))) (PROG2
         (MAPC WV (FUNCTION (LAMBDA (WE)
               (MAKETENSOR2 (QUOTE G) (CAR WE) (CADR WE) NIL) )))
         (REMPROP (QUOTE G) (QUOTE SUBS))))
    (AND (EQ STOP (QUOTE IE)) (GO END))
    (OR (AGAMMA) (GO END))
    (AND (EQ STOP (QUOTE AGAMMA)) (GO END))
    (GAMMA)
    (AND (GET (QUOTE GAMMA) (QUOTE TENS)) (PROGN
         (MAKECHRISTOFFEL)
         (REMPROP (QUOTE CHRISTOFFEL) (QUOTE SUBS))
         (REMPROP (QUOTE GAMMA) (QUOTE TENS))))
    (AND (OR (EQ STOP (QUOTE GAMMA)) (EQ STOP (QUOTE CHRISTOFFEL)))
         (GO END))
    (OR (RIEMANN) (GO END))
    (AND (EQ STOP (QUOTE RIEMANN)) (GO END))
    (OR (RICCI) (GO END))
    (AND (MEMQ STOP (QUOTE (RICCI CURVATURE EINSTEIN))) (GO END))
    (WEYL)
 END (LINELENGTH 72)
    (TERPRI) (TERPRI)
    (MESSAGE (QUOTE ("I REALLY LIKED THIS!" "CAN I HAVE MORE ?"
                                           "  PLEASE ?!?")) T)
    (TERPRI)
    (MESSAGE (QUOTE "END OF WORK") T)
    (MESSAGE (LIST (QUOTE "RUN TIME =") (PLUS (TIME) (MINUS CLOCK))
                   (QUOTE MSEC)) T)
     ))

%The next group are functions that translate the infix notation from
%the input into the prefix Lisp notation

(de POWER (E) (AND (NOT (ATOM E)) (NOT (RANP E)) (CDR E)
                  (EQ (CADR E) (QUOTE ^)) (CDDR E) (NULL (CDDDR E))) )
(de FRACTION (E) (AND (NOT (ATOM E)) (NOT (RANP E)) (CDR E)
                   (EQ (CADR E) (QUOTE /)) (CDDR E) (NULL (CDDDR E))) )
(de RANPIN (A) (OR (NUMBERP A) (AND (NOT (ATOM A)) (NUMBERP (CAR A))
                       (CDR A) (NUMBERP (CADR A)) (NOT (ZEROP (CADR A)))
                       (NULL (CDDR A))) ))
(de TERM (E) (OR (ATOM E) (RANP E) (AND (NOT (MEMQ (QUOTE +) E))
                  (NOT (MEMQ (QUOTE -) E)) (NOT (MEMQ (QUOTE =) E)))) )
(de FACTOR (E) (OR (ATOM E) (RANP E) (AND (TERM E)
                      (NOT (MEMQ (QUOTE ^) E)) (NOT (MEMQ (QUOTE /) E))
                      (NOT (MEMQ (QUOTE *) E))) ))
(de FRONT (X M) (COND
    ((OR (NULL M) (EQUAL X (CAR M)))   NIL)
    (T   (CONS (CAR M) (FRONT X (CDR M)))) ))
(de INTOPRETERM (E) (COND
    ((ATOM E)   E)
    ((RANP E)   E)
    ((NULL (CDR E))   (INTOPRETERM (CAR E)))
    ((FACTOR E)   E)
    ((POWER E)   (CONS (QUOTE EXPT) (RPLACD E (CDDR E))))
    (T   (PROG (STORE FR TA)
         (AND (SETQ TA (MEMQ (QUOTE /) E)) (RETURN (COND
              ((AND (EQ (CADR E) (QUOTE /)) (EQN (CAR E) 1))
                          (LIST (QUOTE EXPT) (INTOPRETERM (CDR TA)) -1))
              ((MEMQ (QUOTE *) (SETQ FR (FRONT (QUOTE /) E)))
                        (NCONC (INTOPRETERM FR) (CONS (LIST (QUOTE EXPT)
                                       (INTOPRETERM (CDR TA)) -1) NIL)))
              (T   (LIST (QUOTE TIMES) (INTOPRETERM FR)
                      (LIST (QUOTE EXPT) (INTOPRETERM (CDR TA)) -1))))))
         (SETQ STORE (CONS (QUOTE TIMES) NIL))
         (SETQ FR (APPEND E NIL))
      A  (COND ((EQ (CADR E) (QUOTE ^))   (PROGN
                   (SETQ TA (CDDDR E))
                   (RPLACD (CDDR E) NIL)
                   (NCONC STORE (CONS (CONS (QUOTE EXPT)
                                            (RPLACD E (CDDR E))) NIL))))
               ((EQ (CADR E) (QUOTE *))   (PROG2
                   (SETQ TA (CDDR E))
                   (NCONC STORE (COND
                            ((OR (ATOM (CAR (RPLACD E NIL)))
                                 (NOT (EQ (CAAR E) (QUOTE TIMES))))   E)
                            (T   (CDAR E))) )))
               (T   (ERROR (LIST
                         (QUOTE "THERE IS A SYNTAX ERROR IN THE")
                         (QUOTE "EXPRESSION THAT FOLLOWS")
                         (QUOTE "*****///") E
                         (QUOTE "///*****. IT IS A PART OF")
                         (QUOTE "THE EXPRESSION *****///") FR
                         (QUOTE "///*****."))) ))
         (OR (SETQ E TA) (RETURN STORE))
         (AND (EQ (CAR E) (QUOTE *)) (SETQ E (CDR E)))
         (OR (CDR E) (RETURN (NCONC STORE E)))
         (GO A))) ))
(de MAKETERMS (E) (PROG (STORE TEMPSTORE HELP)
    (COND ((TERM E)   (RETURN E))
          ((AND (OR (EQ (CAR E) (QUOTE -)) (EQ (CAR E) (QUOTE +)))
                (TERM (CDR E)))   (RETURN (COND
                   ((CDDR E)   (RPLACD E (CONS (CDR E) NIL)))
                   (T   E))))
          ((AND (NOT (EQ (CAR E)(QUOTE +))) (NOT (EQ (CAR E)(QUOTE -))))
                                           (SETQ E (CONS (QUOTE +) E))))
    (SETQ HELP (CDR E))
    (SETQ STORE (RPLACD E NIL))
    (SETQ E HELP)
    (GO B)
 A  (SETQ HELP (CDR E))
    (NCONC STORE (RPLACD E NIL))
    (AND (TERM (SETQ E HELP)) (RETURN (NCONC STORE (COND
                                                ((CDR E)   (CONS E NIL))
                                                (T   E)) )))
 B  (SETQ HELP (CDR E))
    (SETQ TEMPSTORE (NCONC TEMPSTORE (RPLACD E NIL)))
    (AND (OR (EQ (CAR (SETQ E HELP)) (QUOTE +)) (EQ (CAR E) (QUOTE -)))
         (PROGN
         (NCONC STORE (COND ((CDR TEMPSTORE)   (CONS TEMPSTORE NIL))
                            (T   TEMPSTORE)))
         (SETQ TEMPSTORE NIL)
         (GO A)))
    (GO B) ))
(de INTOPRESUM (E) (PROG (STORE HELP)
    (OR (CDDR E) (RETURN (COND
              ((EQ (CAR E) (QUOTE -))   (RPLACA E (QUOTE MINUS)))
              ((EQ (CAR E) (QUOTE +))   (CADR E))
              (T   E))))
    (SETQ STORE (CONS (QUOTE PLUS) NIL))
 A  (COND ((EQ (CAR E) (QUOTE +))   (PROG2
               (SETQ HELP (CDDR E))
               (NCONC STORE (RPLACD (CDR E) NIL))))
          ((EQ (CAR E) (QUOTE -))   (PROGN
               (SETQ HELP (CDDR E))
               (RPLACD (CDR E) NIL)
               (COND ((AND (NOT (ATOM (CADR E)))
                           (EQ (CAADR E) (QUOTE TIMES)))   (PROG2
                        (COND ((RANP (CADADR E))   (COND
                                  ((EQN (CADADR E) -1)
                                           (RPLACD (CADR E) (CDDADR E)))
                                  (T   (RPLACA (CDADR E)
                                              (RANMINUS (CADADR E))) )))
                              (T (RPLACD (CADR E) (CONS -1 (CDADR E)))))
                        (NCONC STORE (CDR E)) ))
                     (T   (PROG2 (RPLACA E (QUOTE MINUS))
                                 (NCONC STORE (CONS E NIL))) )) )))
    (OR (SETQ E HELP) (RETURN STORE))
    (GO A)   ))
(de INTOPRE (E) (COND
    ((ATOM E)   (COND ((MEMQ E MARKERS)   (SETQ M!? E))
                      (T   E)))
    ((RANP E)   E)
    ((RANPIN E)   (RPLACD E (CADR E)))
    ((NULL (CDR E))   (INTOPRE (CAR E)))
    ((PROG2
     (MAP E (FUNCTION (LAMBDA (EE) (RPLACA EE (INTOPRE (CAR EE))) )))
     (TERM E))   (INTOPRETERM E))
    (T   (PROG2
         (MAP (SETQ E (MAKETERMS E)) (FUNCTION (LAMBDA (EE)
                                  (RPLACA EE (INTOPRETERM (CAR EE))) )))
         (INTOPRESUM E))) ))

%The next group are functions that define the various classes of variables
%used in the program

(de LISTDEPS ( ) (PROG (HELP)
 A  (OR FUNCTIONS (RETURN NIL))
    (PUT (CAR FUNCTIONS) (QUOTE DEPS) (CADR FUNCTIONS))
    (SETQ HELP (CDDR FUNCTIONS))
    (SETQ FUNNAMES (NCONC FUNNAMES (RPLACD FUNCTIONS NIL)))
    (SETQ FUNCTIONS HELP)
    (GO A) ))
(de DEFSYMB ( ) (PROG (HELP STORE)
 A  (OR METSUBS (RETURN (SETQ METSUBS STORE)))
    (SETQ HELP (CDDDR METSUBS))
    (SETQ STORE (NCONC STORE (RPLACD (CDDR METSUBS) NIL)))
    (SETQ SYMBOLS (NCONC SYMBOLS (RPLACD METSUBS NIL)))
    (SETQ METSUBS HELP)
    (GO A) ))
(de PUTSYMB ( ) (PROG (S)
    (SETQ S SYMBOLS)
 A  (OR S (RETURN NIL))
    (PUT (CAR S) (QUOTE CONTENT) (SIMPLIFY (CAR METSUBS) T))
    (SETQ S (CDR S))
    (SETQ METSUBS (CDR METSUBS))
    (GO A) ))
(de MAKEPAIRS ( ) (PROG (LIS NUM UNIFN)
    (SETQ UNIFN (QUOTE (INT DER ARTH
                     ARCH ARSH ARCSIN ARCTAN COTH TANH SINH COSH COT
                     TAN SIN COS LOG EXP MINUS EXPT PLUS TIMES       )))
    (SETQ LIS (CONC (REVERSE SYMBOLS) (REVERSE FUNNAMES) UNIFN
                 (REVERSE MARKERS) (REVERSE COORD) (REVERSE CONSTANTS)))
    (SETQ NUM -1)
    (MAPC LIS (FUNCTION (LAMBDA (LE)
                    (PUT LE (QUOTE PRIOR) (SETQ NUM (ADD1 NUM))) ))) ))
(de NOPRIOR (E) (ERROR (LIST
                 (QUOTE "THE SYMBOL *****///") E
                 (QUOTE "///***** WAS NOT ASSIGNED")
                 (QUOTE "A PRIORITY. PLEASE PLACE IT IN ONE")
                 (QUOTE "OF THE FOLLOWING LISTS")
                 (QUOTE "*****///CONSTANTS,")
                 (QUOTE "COORDINATES, FUNCTIONS,")
                 (QUOTE "SYMBOLS, MARKERS///*****"))) )
(de NEXT (S L) (CADR (MEMBER S L)))
(de PREVIOUS (S L) (COND
    ((EQUAL S (CADR L))   (CAR L))
    (T   (PREVIOUS S (CDR L))) ))

%The next functions code the substitutions requested by the user

(de EQUATE (PAT COP) (PROG ( )
    (SETQ PAT (PLUS (LENGTH COP) (MINUS (LENGTH PAT))))
 A  (AND (EQN PAT 0) (RETURN COP))
    (SETQ PAT (SUB1 PAT))
    (SETQ COP (CDR COP))
    (GO A) ))
(de CLEARDATA ( ) (PROG (V W DGL)
    (SETQ V DATASUBS)
 A  (OR V (RETURN NIL))
    (AND (EQ (CADR V) (QUOTE =)) (PROGN
         (SETQ DGL GL)
         (MAP SIMPLSUBS (FUNCTION (LAMBDA (SE) (PROG (L MESS)
              (RPLACA SE (SUBSTITUTE (CAR V) (CADDR V) (CAR SE)))
              (OR L (RPLACA DGL T))
              (SETQ DGL (CDR DGL))) )))
         (SETQ V (CDDDR V))
         (GO A)))
    (SETQ W SIMPLSUBS)
    (SETQ DGL GL)
 B  (SETQ W (MEMBER (CAR V) W))
    (AND W (SETQ W (CDDR W)) (PROG (L MESS)
         (RPLACA W (SUBSTITUTE (PREVIOUS (QUOTE =) V) (NEXT (QUOTE =) V)
                               (CAR W)))
         (OR L (PROGN (SETQ DGL (EQUATE W DGL))
                      (RPLACA DGL T)
                      (SETQ DGL (CDR DGL))))
         (RETURN T))
         (SETQ W (CDR W)) (GO B))
    (SETQ V (CDR V))
    (AND (EQ (CADR V) (QUOTE =)) (PROG2 (SETQ V (CDDDR V))
                                        (GO A)))
    (SETQ W SIMPLSUBS)
    (SETQ DGL GL)
    (GO B) ))
(de SUBSTITUTIONS (LISOFSUBS) (PROG (L U W X Y RES)
    (SETQ L LISOFSUBS)
 A  (OR L (RETURN RES))
    (AND MARKERS (PROG ( )
     A (AND (NOT (EQ (CADR GLS) (QUOTE =))) (SETQ GLS (CDR GLS)) (GO A))
       (RETURN T))   (NOT (CAR GLS)) (CADDR GLS) (ERROR (LIST
         (QUOTE "THE EXPRESSION *****///") (NEXT (QUOTE =) L)
         (QUOTE "///***** CONTAINS A MARKER")
         (QUOTE "WHICH IS NOT CONTAINED")
         (QUOTE "IN THE LEFT-HAND SIDE")
         (QUOTE "OF THE CORRESPONDING EQUATION.")
         (QUOTE "THERE IS NO WAY I COULD")
         (QUOTE "KNOW WHAT EXPRESSION")
         (QUOTE "THIS MARKER REPRESENTS.")
         (QUOTE "SORRY, MUST QUIT.") )))
    (AND (EQ (CADR L) (QUOTE =)) (PROGN
              (SETQ W (CDDDR L))
              (RPLACD (CDDR L) NIL)
              (SETQ RES (NCONC RES (CONS
                   (CONS (AND MARKERS (CAR GLS)) (RPLACD L (CDDR L)))
                                    NIL)))
              (SETQ L W)
              (AND MARKERS (SETQ GLS (CDDDR GLS)))
              (GO A)))
 B  (AND (ATOM (CADR L)) (PROGN
              (SETQ W (GET (CAR L) (QUOTE SUBS)))
              (SETQ X (CONS (LIST (AND MARKERS (CAR GLS)) NIL NIL
                        (PREVIOUS (QUOTE =) L) (NEXT (QUOTE =) L)) NIL))
              (OR W (PUT (CAR L) (QUOTE SUBS) X))
              (SETQ L (CDR L))
              (AND (EQ (CADR L) (QUOTE =)) (PROG2
                   (SETQ L (CDDDR L))
                   (AND MARKERS (SETQ GLS (CDDDR GLS))) ))
              (NCONC W X)
              (GO A)))
    (SETQ X (GET (SETQ Y (CAR L)) (QUOTE SUBS)))
    (SETQ L (CDR L))
 C  (COND ((OR (EQ (CADR L) (QUOTE =)) (NUMBERP (CAAR L)))
                                                (SETQ W (CONS NIL NIL)))
          (T   (PROGN (SETQ U (CDR L))
                      (SETQ W (RPLACD L NIL))
                      (SETQ L U))))
    (OR (NUMBERP (CAAR L)) (NCONC W (CONS NIL NIL)))
 D  (AND (NUMBERP (CAAR L)) (SETQ U (CDR L))
         (NOT (MAP (CAR L) (FUNCTION (LAMBDA (LE)
                   (RPLACA LE (CAR (MEMBER (CAR LE) LIND))) ))) )
         (NCONC W (RPLACD L NIL)) (SETQ L U) (NOT (ATOM (CAR L)))(GO D))
    (AND (CADR W) (RPLACD W (CONS (CDR W) NIL)))
    (SETQ W (CONS (CONS (AND MARKERS (CAR GLS))
             (NCONC W (LIST (PREVIOUS (QUOTE =) L) (NEXT (QUOTE =) L))))
                  NIL))
    (OR X (PUT Y (QUOTE SUBS) W))
    (SETQ X (NCONC X W))
    (AND (EQ (CADR L) (QUOTE =)) (PROGN
         (SETQ L (CDDDR L))
         (AND MARKERS (SETQ GLS (CDDDR GLS)))
         (GO A)))
    (OR (ATOM (CAR L)) (GO C))
    (GO B) ))
(de GSASSOC (AT LIS FN) (COND
    ((NULL LIS)   (EVAL FN))
    ((AND (NOT (ATOM (CAR LIS))) (EQUAL AT (CAAR LIS)))   (CAR LIS))
    (T   (GSASSOC AT (CDR LIS) FN)) ))

(de LISTTENS (TENS) (PROG (U V W X Y)
    (SETQ V TENS)
 A  (OR V (RETURN NIL))
    (COND ((EQ (SETQ X (CAR V)) (QUOTE METRIC))   (SETQ X (QUOTE IE)))
          ((EQ X (QUOTE CHRISTOFFEL))   (SETQ X (QUOTE GAMMA)))
          ((EQ X(QUOTE EINSTEIN))  (PUT(QUOTE RICCI)(QUOTE EINSTEIN)T)))
    (AND (OR (NULL (CDR V)) (ATOM (CADR V))) (COND
              ((EQ X (QUOTE EINSTEIN))   (PROG2 (SETQ V (CDR V))
                                                (GO A)))
              (T   (RPLACD V (CONS NIL (CDR V))) )))
    (SETQ U (GET X (QUOTE TENS)))
    (SETQ V (CDR V))
 B  (SETQ Y (CDR V))
    (SETQ W (RPLACD V NIL))
    (SETQ V Y)
    (AND (OR (NULL V) (ATOM (CAR V)) (NOT (NUMBERP (CAAR V))))
         (NCONC W (CONS NIL NIL)))
 C  (AND V (NOT (ATOM (CAR V))) (NUMBERP (CAAR V)) (PROGN
         (SETQ Y (CDR V))
         (NCONC W (RPLACD V NIL))
         (SETQ V Y)
         (GO C)))
    (AND (CADR W) (RPLACD W (CONS (CDR W) NIL)))
    (COND (U   (NCONC U (CONS W NIL)))
          (T   (PUT X (QUOTE TENS) (SETQ U (CONS W NIL))) ))
    (AND V (NOT (ATOM (CAR V))) (GO B))
    (GO A) ))

 %The next group are functions for calculating determinants and inverting
 %matrices

 (de DETFACTORS (ARRAY RANKD) (COND
    ((EQN RANKD 1)   (CONS (PICKEL ARRAY (LIST N N)) NIL))
    (T   (PROG (RES V I J W X E00)
         (SETQ V (PLUS RANK (MINUS RANKD)))
         (SETQ I V)
      A  (SETQ W (PICKEL ARRAY (LIST I V)))
         (AND (EQN W 0) (NOT (EQN I N)) (SETQ I (ADD1 I)) (GO A))
         (AND (EQN W 0) (RETURN (CONS 0 NIL)))
         (OR (EQN I V) (PROGN
             (DO (QUOTE J) V N (FUNCTION
                 (SETQ X (NCONC X (CONS (PICKEL ARRAY(LIST I J))NIL)))))
             (DO (QUOTE J) V N (FUNCTION
                 (PUTIN ARRAY (LIST I J) (PICKEL ARRAY (LIST V J))) ))
             (DO (QUOTE J) V N (FUNCTION (PROG2
                 (PUTIN ARRAY (LIST V J) (CAR X))
                 (SETQ X (CDR X))) ))
             (SETQ RES (CONS -1 NIL))))
         (SETQ E00 (PICKEL ARRAY (LIST V V)))
         (AND (NOT (ATOM E00)) (EQ (CAR E00) (QUOTE PLUS)) (PROGN
              (SETQ X (GENSYM))
              (PUT X (QUOTE PRIOR) (COND
                   (LOCSUBS   (SUB1 (GET (CAAR LOCSUBS) (QUOTE PRIOR))))
                   (T   -1)))
              (SETQ LOCSUBS (CONS (LIST X E00) LOCSUBS))
              (SETQ E00 X)))
         (SETQ RES (CONS E00 RES))
         (SETQ I (ADD1 V))
         (SETQ X NIL)
      B  (SETQ W (PICKEL ARRAY (LIST I V)))
         (AND (EQN W 0) (NOT (EQN I N)) (SETQ I (ADD1 I)) (GO B))
         (OR (EQN W 0) X (PROG2 (SETQ E00 (SEXPT E00 -1))
                                (SETQ X T)))
         (OR (EQN W 0) (PROGN
             (SETQ W (STIMES (LIST -1 W E00)))
             (DO (QUOTE J) (ADD1 V) N (FUNCTION
                 (PUTIN ARRAY (LIST I J) (SPLUS (LIST
                        (PICKEL ARRAY (LIST I J))
                        (STIMES (LIST W (PICKEL ARRAY (LIST V J)))))))))
             (AND (NOT (EQN I N)) (SETQ I (ADD1 I)) (GO B))))
         (RETURN (NCONC RES (DETFACTORS ARRAY (SUB1 RANKD)))) )) ))
(de DET (ARRAY RANKD) (PROG (V)
    (SETQ V (STIMES (DETFACTORS ARRAY RANKD)))
    (MAPC LOCSUBS (FUNCTION (LAMBDA (LE)
          (SETQ V (SUBSTITUTE (CAR LE) (CADR LE) V)) )))
    (SETQ LOCSUBS NIL)
    (RETURN V) ))
(de MINOR (ARRAY RANK K L) (PROG (I J)
    (DO (QUOTE I) 0 N (FUNCTION (OR (EQN I K)
        (DO (QUOTE J) 0 N (FUNCTION (OR (EQN J L)
            (PUTIN WORKARR (LIST (COND
                   ((GREATERP K I)   (ADD1 I))
                   (T   I)) (COND
                   ((GREATERP L J)   (ADD1 J))
                   (T   J))) (PICKEL ARRAY (LIST I J))) ))) )))
    (RETURN (COND ((ZEROP (REMAINDER (PLUS K L) 2))
                                             (DET WORKARR (SUB1 RANK)))
                  (T   (SMINUS (DET WORKARR (SUB1 RANK)))) )) ))
(de INVAR (E RANK) (PROG (N SIG RHO DETE MEM HELP LSR LOCSUBS)
    (SETQ N (SUB1 RANK))
    (SETQ WORKARR (GENSYM))
    (MKARRAY WORKARR (LIST RANK RANK))
    (DO (QUOTE SIG) 0 N (FUNCTION
        (DO (QUOTE RHO) 0 N (FUNCTION (PROG2
            (SETQ LSR (LIST SIG RHO))
            (PUTIN WORKARR LSR (PICKEL E LSR))) )) ))
    (SETQ DETE (DET WORKARR RANK))
    (SETQ DETEM DETE)
    (AND (EQN DETE 0) (ERROR (QUOTE ("SINGULAR EMATRIX,"
                                                "TOO BAD, TOO BAD"))))
    (SUBSALL (QUOTE DETE) (QUOTE DETERMINANT) NIL NIL SIMPLSUBS)
    (REMPROP (QUOTE DETERMINANT) (QUOTE SUBS))
    (SETQ MEM (MEMQ (QUOTE DETERMINANT) NOPRINT))
    (OR MEM (INPRINT (QUOTE "DETERMINANT EMATRIX") NIL NIL (QUOTE =)
                     DETE))
    (TIMEMESSAGE (QUOTE "DETERMINANT EMATRIX") NIL)
    (OR MEM (PROGN (TURNCAR) (TURNCAR) (TURNCAR) ))
    (AND (EQ STOP (QUOTE DETERMINANT)) (RETURN NIL))
    (SETQ DETE (SEXPT DETE -1))
    (SETQ IE (GENSYM))
    (MKARRAY IE (LIST RANK RANK))
    (SETQ MEM (MEMQ (QUOTE IE) NOPRINT))
    (DO (QUOTE SIG) 0 N (FUNCTION
        (DO (QUOTE RHO) 0 N (FUNCTION (PROGN
            (SETQ LSR (LIST SIG RHO))
            (SETQ HELP (STIMES (LIST (MINOR E RANK RHO SIG) DETE)))
            (SUBSALL (QUOTE HELP) (QUOTE IE) NIL LSR SIMPLSUBS)
            (PUTIN IE LSR HELP)
            (OR MEM (EQN HELP 0) (INPRINT (QUOTE IE) (QUOTE (+ -))
                     (RPLACA LSR (CONS SIG NIL)) (QUOTE =) HELP))) )) ))
    (TIMEMESSAGE (QUOTE IE) NIL)
    (OR MEM (PROGN (TURNCAR) (TURNCAR) (TURNCAR) ))
    (REMPROP (QUOTE IE) (QUOTE SUBS))
    (RETURN IE) ))

%The next functions calculate the Ricci rotation coefficients and the
%Crhistoffel symbols

(de UPANDTRANS ( ) (PROGN
    (RPLACA LIJ 0)
    (RPLACA (CDR LAB) 0)
    (MAPC LIND (FUNCTION (LAMBDA (B) (PROGN
        (RPLACA (CDR LIJ) B)
        (RPLACA LAB B)
        (PUTIN WORKARR LIJ (PICKEL IE LAB))) )))
    (MAPC LIND (FUNCTION (LAMBDA (B) (PROGN
        (RPLACA (CDR LIJ) B)
        (RPLACA LAB B)
        (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
            (RPLACA LIJ I)
            (RPLACA (CDR LAB) I)
            (PUTIN WORKARR LIJ (SMINUS (PICKEL IE LAB))) )))) ))))
    (SETQ UPIE WORKARR) ))
(de MAKETENSOR2 (PRINTNAME VALENCE INDICES SOURCE)
    (PROG (V1 V2 V R E1 E2 LIA LJB)
    (COND (VALENCE   (PROG2
              (SETQ V1 (COND ((EQ (CAR VALENCE) (QUOTE -))   EMATRIX)
                             (T   UPIE)))
              (SETQ V2 (COND ((EQ (CADR VALENCE) (QUOTE -))   EMATRIX)
                             (T   UPIE))) ))
          (T   (PROG2 (SETQ V1 EMATRIX)
                      (SETQ V2 EMATRIX) )))
    (AND (EQ PRINTNAME (QUOTE G)) (PROGN
              (RPLACA LAB 0)
              (RPLACA (CDR LAB) 0)
              (PUTIN RC LAB 1)
              (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
                  (RPLACA LAB I)
                  (RPLACA (CDR LAB) I)
                  (PUTIN RC LAB -1)) )))
              (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
                  (RPLACA LAB I)
                  (MAPC LIND (FUNCTION (LAMBDA (J) (OR (EQN I J) (PROG2
                      (RPLACA (CDR LAB) J)
                      (PUTIN RC LAB 0))) ))) ))))
              (SETQ SOURCE RC)))
    (SETQ LIA (LIST NIL NIL))
    (SETQ LJB (LIST NIL NIL))
    (MAPC LIND (FUNCTION (LAMBDA (A) (PROGN
        (RPLACA (CDR LIA) A)
        (RPLACA LAB A)
        (MAPC (COND ((OR (NULL VALENCE)
                         (EQ (CAR VALENCE) (CADR VALENCE)))
                                                        (MEMBER A LIND))
                    (T   LIND)) (FUNCTION (LAMBDA (B) (PROG ( )
            (RPLACA (CDR LAB) B)
            (AND INDICES (NOT (MEMBER LAB INDICES)) (RETURN NIL))
            (RPLACA (CDR LJB) B)
            (SETQ R 0)
            (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
                (RPLACA LIA I)
                (OR (EQN (SETQ E1 (PICKEL V1 LIA)) 0) (PROG2
                    (RPLACA LIJ I)
                    (MAPC LIND (FUNCTION (LAMBDA (J) (PROG2
                        (RPLACA LJB J)
                        (OR (EQN (SETQ E2 (PICKEL V2 LJB)) 0) (PROGN
                            (RPLACA (CDR LIJ) J)
                            (SETQ V (STIMES (LIST (PICKEL SOURCE LIJ)
                                                                E1 E2)))
                            (OR (EQN V 0)
                                (SETQ R (SPLUSPARTS R V)))) ))))) ))))))
            (SUBSALL (QUOTE R) PRINTNAME VALENCE LAB SIMPLSUBS)
            (AND (EQN R 0) (NULL INDICES) (RETURN NIL))
            (INPRINT PRINTNAME VALENCE LAB (QUOTE =) R)
            (TURNCAR) )))) ))))
    (TIMEMESSAGE (LIST PRINTNAME VALENCE) NIL)
    (TURNCAR) (TURNCAR) (TURNCAR) ))

(de DIFPROD (X Y Z V) (SPLUS (LIST
    (STIMES (LIST (QUOTE (1 . 2)) X Y))
    (STIMES (LIST (QUOTE (-1 . 2)) Z V)) )) )
(de COMMUT (N1 N2) (PROG (RES V1 V2 V3 V4)
    (RPLACA LIJ N1)
    (RPLACA (CDR LIJ) N2)
    (SETQ RES (CONS (PICKEL RC LIJ) RES))
    (RPLACA (CDR LIJ) J)
    (SETQ V1 (PICKEL IE LIJ))
    (RPLACA LIJ N2)
    (RPLACA (CDR LIJ) K)
    (SETQ V2 (PICKEL IE LIJ))
    (RPLACA LIJ N1)
    (SETQ V3 (PICKEL IE LIJ))
    (RPLACA LIJ N2)
    (RPLACA (CDR LIJ) J)
    (SETQ V4 (PICKEL IE LIJ))
    (SETQ V1 (DIFPROD V1 V2 V3 V4))
    (RETURN (STIMES (CONS V1 RES))) ))
(de AGAMMA ( ) (PROG (HELP MEM CHECK)
    (SETQ AGAM (GENSYM))
    (MKARRAY AGAM (LIST 4 4 4))
    (SETQ MEM (MEMQ (QUOTE AGAMMA) NOPRINT))
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJK I)
        (RPLACA LIJ I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (OR (EQN J 3) (PROG2
            (RPLACA LAB J)
            (MAPC (CDR (MEMBER J LIND)) (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDR LIJ) J)
                (RPLACA (CDR LAB) K)
                (SETQ HELP (CONS (SMINUS (DERIV (NTH COORD (ADD1 K))
                                            (PICKEL EMATRIX LIJ))) NIL))
                (RPLACA (CDR LIJ) K)
                (SETQ HELP (CONS (DERIV (NTH COORD (ADD1 J))
                                        (PICKEL EMATRIX LIJ)) HELP))
                (SETQ HELP (SPLUS HELP))
                (PUTIN RC LAB HELP)) ))) )) )))
        (MAPC LIND (FUNCTION (LAMBDA (J) (OR (EQN J 3) (PROG2
            (RPLACA (CDR LIJK) J)
            (MAPC (CDR (MEMBER J LIND)) (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDDR LIJK) K)
                (SETQ HELP (SPLUS (LIST (COMMUT 0 1) (COMMUT 0 2)
                  (COMMUT 0 3) (COMMUT 1 2) (COMMUT 1 3) (COMMUT 2 3))))
                (SUBSALL (QUOTE HELP) (QUOTE AGAMMA) NIL LIJK SIMPLSUBS)
                (AND (NOT (EQN HELP 0)) (SETQ CHECK T) (NOT MEM)
                     (INPRINT (QUOTE AGAMMA) (QUOTE (+ - -)) LIJK
                              (QUOTE =) HELP) (TURNCAR))
                (PUTIN AGAM LIJK HELP)) ))) )) ))) ))))
    (TIMEMESSAGE (QUOTE AGAMMA) NIL)
    (OR CHECK (PROGN
        (MESSAGE(QUOTE("ALL COMPONENTS OF THE" "AGAMMA ARE ZERO"))T)
        (TURNCAR) (TURNCAR) (TURNCAR)
        (RETURN NIL)))
    (TURNCAR) (TURNCAR) (TURNCAR)
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJK I)
        (RPLACA LABC I)
        (MAPC (CDR LIND) (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJK) J)
            (RPLACA (CDDR LABC) J)
            (MAPC LIND (FUNCTION (LAMBDA (K) (AND (GREATERP J K) (PROGN
                (RPLACA (CDDR LIJK) K)
                (RPLACA (CDR LABC) K)
                (PUTIN AGAM LIJK
                            (SMINUS (PICKEL AGAM LABC))))) )))) ))) ))))
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
        (RPLACA LIJK I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJK) J)
            (RPLACA (CDDR LIJK) J)
            (PUTIN AGAM LIJK 0)) ))) ))))
    (REMPROP (QUOTE AGAMMA) (QUOTE SUBS))
    (TIMEMESSAGE (QUOTE AGAMMA) T)
    (RETURN CHECK) ))

 (de GAMMA ( ) (PROG (MEM HELP)
    (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJK I)
        (RPLACA LABC I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (OR (EQN J 3) (PROGN
            (RPLACA (CDR LIJK) J)
            (RPLACA (CDDR LABC) J)
            (MAPC (CDR (MEMBER J LIND)) (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDDR LIJK) K)
                (RPLACA (CDR LABC) K)
                (SETQ HELP (PICKEL AGAM LIJK))
                (PUTIN AGAM LIJK (PICKEL AGAM LABC))
                (PUTIN AGAM LABC HELP)) ))) ))))) ))))
    (SETQ GAM (GENSYM))
    (MKARRAY GAM (LIST 4 4 4))
    (SETQ MEM (MEMQ (QUOTE GAMMA) NOPRINT))
    (MAPC LIND (FUNCTION (LAMBDA (I) (OR (EQN I 3) (PROGN
        (RPLACA LIJK I)
        (RPLACA (CDR LABC) I)
        (MAPC (CDR (MEMBER I LIND)) (FUNCTION (LAMBDA (J)
            (MAPC LIND (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDDR LIJK) J)
                (RPLACA (CDR LIJK) K)
                (SETQ HELP (CONS (PICKEL AGAM LIJK) NIL))
                (RPLACA LABC J)
                (RPLACA (CDDR LABC) K)
                (SETQ HELP (CONS (PICKEL AGAM LABC) HELP))
                (SETQ HELP (CONS (PICKEL AGAM (SETQ LABC
                                                (REVERSIP LABC))) HELP))
                (SETQ HELP (SPLUS HELP))
                (AND (ZEROP I) (NOT (EQN HELP 0))
                     (SETQ HELP (SMINUS HELP)))
                (RPLACD LIJK (REVERSIP (CDR LIJK)))
                (SUBSALL (QUOTE HELP) (QUOTE GAMMA) NIL LIJK SIMPLSUBS)
                (OR MEM (EQN HELP 0) (PROG2
                    (INPRINT (QUOTE GAMMA)(QUOTE(+ - -))LIJK(QUOTE =)
                             HELP)
                    (TURNCAR) ))
                (PUTIN GAM LIJK HELP)) ))) ))) )) )))
    (TIMEMESSAGE (QUOTE GAMMA) NIL)
    (AND (EQ STOP (QUOTE GAMMA)) (NULL (GET (QUOTE GAMMA) (QUOTE TENS)))
         (RETURN NIL))
    (OR MEM (PROGN (TURNCAR) (TURNCAR) (TURNCAR) ))
    (REMPROP (QUOTE GAMMA) (QUOTE SUBS))
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJK I)
        (RPLACA (CDR LIJK) I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (PROG2
            (RPLACA (CDDR LIJK) J)
            (PUTIN GAM LIJK 0)) ))) ))))
    (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJK I)
        (RPLACA (CDR LABC) I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (AND (GREATERP I J) (PROGN
            (RPLACA (CDR LIJK) J)
            (RPLACA LABC J)
            (MAPC LIND (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDDR LIJK) K)
                (RPLACA (CDDR LABC) K)
                (PUTIN GAM LIJK (COND
                    ((EQN J 0)   (PICKEL GAM LABC))
                    (T   (SMINUS (PICKEL GAM LABC))) ))) ))) )) ))) ))))
    (TIMEMESSAGE (QUOTE GAMMA) T)
    (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJK I)
        (RPLACA LABC I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (OR (EQN J 3) (PROGN
            (RPLACA (CDR LIJK) J)
            (RPLACA (CDDR LABC) J)
            (MAPC (CDR (MEMBER J LIND)) (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDDR LIJK) K)
                (RPLACA (CDR LABC) K)
                (SETQ HELP (PICKEL AGAM LIJK))
                (PUTIN AGAM LIJK (PICKEL AGAM LABC))
                (PUTIN AGAM LABC HELP)) ))) ))))) ))))
            ))
 (de MAKECHRISTOFFEL ( ) (PROG (V R E1 E2 E3 LKC MEM)
    (SETQ CHRIS (GENSYM))
    (MKARRAY CHRIS (LIST 4 4 4))
    (SETQ LKC (LIST NIL NIL))
    (SETQ MEM (MEMQ (QUOTE CHRISTOFFEL) NOPRINT))
    (MAPC LIND (FUNCTION (LAMBDA (A) (PROGN
        (RPLACA LIJ A)
        (RPLACA LABC A)
        (MAPC LIND (FUNCTION (LAMBDA (B) (PROGN
            (RPLACA (CDR LAB) B)
            (RPLACA (CDR LABC) B)
            (MAPC (MEMBER B LIND) (FUNCTION (LAMBDA (C) (PROG ( )
                (RPLACA (CDDR LABC) C)
                (SETQ R 0)
                (RPLACA (CDR LKC) C)
                (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
                    (RPLACA (CDR LIJ) I)
                    (OR (EQN (SETQ E1 (PICKEL IE LIJ)) 0) (PROG2
                        (RPLACA LIJK I)
                        (MAPC LIND (FUNCTION (LAMBDA (J) (OR (EQN I J)
                                                             (PROG2
                            (RPLACA LAB J)
                            (OR (EQN (SETQ E2 (PICKEL EMATRIX LAB)) 0)
                                (PROG2
                                (RPLACA (CDR LIJK) J)
                                (MAPC LIND (FUNCTION (LAMBDA (K) (PROG2
                                    (RPLACA LKC K)
                                    (OR (EQN (SETQ E3 (PICKEL EMATRIX
                                                         LKC)) 0) (PROGN
                                        (RPLACA (CDDR LIJK) K)
                                        (SETQ V (STIMES (LIST E1 E2 E3
                                                   (PICKEL GAM LIJK) )))
                                        (OR (EQN V 0)
                                            (SETQ R (SPLUSPARTS R V))))
                                                  ))))) )))) ))) )) ))))
                (MAPC LIND (FUNCTION (LAMBDA (I) (PROGN
                    (RPLACA (CDR LIJ) I)
                    (SETQ V (COND ((EQN (SETQ V (PICKEL IE LIJ)) 0)   0)
                                  (T   (STIMES (LIST V
                                       (DERIV (NTH COORD (ADD1 C))(PROG2
                                           (RPLACA LAB I)
                                           (PICKEL EMATRIX LAB)) ))) )))
                    (OR (EQN V 0) (SETQ R (SPLUSPARTS R V)))) )))
                (SUBSALL (QUOTE R)(QUOTE CHRISTOFFEL)NIL LABC SIMPLSUBS)
                (PUTIN CHRIS LABC R)
                (AND (EQN R 0) (RETURN NIL))
                (OR MEM (PROG2
                    (INPRINT (QUOTE CHRISTOFFEL)(QUOTE (+ - -)) LABC
                         (QUOTE =) R)
                    (TURNCAR))) )))) )))) ))))
    (REMPROP (QUOTE CHRISTOFFEL) (QUOTE SUBS))
    (TIMEMESSAGE (QUOTE "CHRISTOFFEL SYMBOLS") NIL)
    (OR MEM (PROGN (TURNCAR) (TURNCAR) (TURNCAR) ))
    (MAPC LIND (FUNCTION (LAMBDA (A) (PROGN
        (RPLACA LIJK A)
        (RPLACA LABC A)
        (MAPC (CDR LIND) (FUNCTION (LAMBDA (B) (PROGN
            (RPLACA (CDR LIJK) B)
            (RPLACA (CDDR LABC) B)
            (MAPC LIND (FUNCTION (LAMBDA (C) (AND (GREATERP B C) (PROGN
                (RPLACA (CDDR LIJK) C)
                (RPLACA (CDR LABC) C)
                (PUTIN CHRIS LIJK (PICKEL CHRIS LABC)) )) ))) )))) ))))
    (TIMEMESSAGE (QUOTE "CHRISTOFFEL SYMBOLS") T)
    (OR MEM (PROGN (TURNCAR) (TURNCAR) (TURNCAR) ))
                ))

%The next functions calculate the Riemann tensor

(de DIRDERG (K L N) (PROG (V)
    (RPLACA LIJ N)
    (RPLACA (CDR LIJ) L)
    (COND ((EQN (SETQ V (PICKEL IE LIJ)) 0)   (RETURN 0)))
    (RPLACA (CDDR LIJK) K)
    (RETURN (STIMES (LIST (DERIV (NTH COORD (ADD1 N))
                                 (PICKEL GAM LIJK)) V)))  ))
(de PRODAG (N) (STIMES (LIST 2 (PROG2 (RPLACA (CDDR LIJK) N)
                                            (PICKEL GAM LIJK))
                                   (PROGN (RPLACA LABC N)
                                          (RPLACA (CDR LABC) K)
                                          (RPLACA (CDDR LABC) L)
                                          (PICKEL AGAM LABC)) )) )
(de PRODG (N K L) (STIMES (LIST (PROGN (RPLACA (CDR LIJK) N)
                                             (RPLACA (CDDR LIJK) K)
                                             (PICKEL GAM LIJK))
                                      (PROGN (RPLACA LABC N)
                                             (RPLACA (CDR LABC) J)
                                             (RPLACA (CDDR LABC) L)
                                             (PICKEL GAM LABC)) )) )
(de PRODUCERIEM (I J K L) (PROG (R V)
    (RPLACA LIJK I)
    (RPLACA (CDR LIJK) J)
    (DO 'A 0 3 (FUNCTION (SETQ V (CONS (SMINUS (DIRDERG K L A)) V)) ))
    (DO 'A 0 3 (FUNCTION (SETQ V (CONS (DIRDERG L K A) V)) ))
    (DO 'A 0 3 (FUNCTION (SETQ V (CONS (PRODAG A) V)) ))
    (DO 'A 0 3 (FUNCTION (SETQ V (CONS (PRODG A K L) V)) ))
    (DO 'A 0 3 (FUNCTION (SETQ V (CONS (SMINUS (PRODG A L K)) V)) ))
    (SETQ R (SPLUS V))
    (OR (ZEROP I) (EQN R 0) (SETQ R (SMINUS R)))
    (SUBSALL (QUOTE R) (QUOTE RIEMANN) NIL LIJKL SIMPLSUBS)
    (AND (NOT (EQN R 0)) (SETQ CHECK T) (NOT MEM)
         (INPRINT (QUOTE RIEMANN) NIL LIJKL (QUOTE =) R) (TURNCAR))
    (RETURN R) ))

(de RIEMANN ( ) (PROG (MEM CHECK)
    (SETQ RM (GENSYM))
    (MKARRAY RM (LIST 4 4 4 4))
    (SETQ MEM (MEMQ (QUOTE RIEMANN) NOPRINT))
    (MAPC LIND (FUNCTION (LAMBDA (I) (OR (EQN I 3) (PROG2
        (RPLACA LIJKL I)
        (MAPC (CDR (MEMBER I LIND)) (FUNCTION (LAMBDA (J) (PROG2
            (RPLACA (CDR LIJKL) J)
            (MAPC (MEMBER I LIND) (FUNCTION (LAMBDA (K) (OR (EQN K 3)
                                                            (PROG2
                (RPLACA (CDDR LIJKL) K)
                (MAPC (COND ((EQN K I)   (MEMBER J LIND))
                            (T   (CDR (MEMBER K LIND))))
                      (FUNCTION (LAMBDA (L) (PROG2
                         (RPLACA (CDDDR LIJKL) L)
                         (PUTIN RM LIJKL
                            (PRODUCERIEM I J K L)) )))) ))))) )))) )))))
    (TIMEMESSAGE (QUOTE RIEMANN) NIL)
    (OR CHECK (PROGN
        (MESSAGE (QUOTE ("ALL COMPONENTS OF THE"
                                        "RIEMANN TENSOR ARE ZERO")) T)
        (TURNCAR) (TURNCAR) (TURNCAR)
        (RETURN NIL)))
    (AND (EQ STOP (QUOTE RIEMANN))
         (NULL (GET (QUOTE RIEMANN) (QUOTE TENS))) (RETURN CHECK))
    (TURNCAR) (TURNCAR) (TURNCAR)
    (CLARRAY AGAM) (CLARRAY GAM) (CLARRAY IE)
    (REMPROP (QUOTE RIEMANN) (QUOTE SUBS))
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
        (RPLACA LIJKL I)
        (MAPC LIND (FUNCTION (LAMBDA (K)
            (MAPC LIND (FUNCTION (LAMBDA (L) (PROGN
                (RPLACA (CDR LIJKL) I)
                (RPLACA (CDDR LIJKL) K)
                (RPLACA (CDDDR LIJKL) L)
                (PUTIN RM LIJKL 0)
                (RPLACA (CDR LIJKL) K)
                (RPLACA (CDDR LIJKL) L)
                (PUTIN RM LIJKL 0)) ))) ))) ))))
    (COMPLETE)
    (TIMEMESSAGE (QUOTE RIEMANN) T)
    (AND (SETQ MEM (GET (QUOTE RIEMANN) (QUOTE TENS))) (PROG2
         (MAPC MEM (FUNCTION (LAMBDA (ME)
               (MAKETENSOR4 (QUOTE RIE) (CAR ME) (CADR ME) RM) )))
         (REMPROP (QUOTE RIE) (QUOTE SUBS)) ))
    (RETURN CHECK) ))
(de COMPLETE ( ) (PROGN
    (MAPC LIND (FUNCTION (LAMBDA (I) (OR (EQN I 3) (PROGN
        (RPLACA LIJKL I)
        (RPLACA (CDDR LABCD) I)
        (MAPC (CDR (MEMBER I LIND)) (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJKL) J)
            (RPLACA (CDDDR LABCD) J)
            (MAPC (MEMBER I LIND) (FUNCTION (LAMBDA (K) (OR (EQN K 3)
                                                            (PROGN
                (RPLACA (CDDR LIJKL) K)
                (RPLACA LABCD K)
                (MAPC (CDR (MEMBER K LIND)) (FUNCTION (LAMBDA (L)
                                    (AND (EQN K I) (GREATERP J L) (PROGN
                    (RPLACA (CDDDR LIJKL) L)
                    (RPLACA (CDR LABCD) L)
                    (PUTIN RM LIJKL
                           (PICKEL RM LABCD)) ))))) ))))) )))) )))))
    (MAPC LIND (FUNCTION (LAMBDA (I) (OR (EQN I 3) (PROGN
        (RPLACA LIJKL I)
        (RPLACA (CDDR LABCD) I)
        (MAPC (CDR (MEMBER I LIND)) (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJKL) J)
            (RPLACA (CDDDR LABCD) J)
            (MAPC LIND (FUNCTION (LAMBDA (K) (AND (GREATERP I K) (PROGN
                (RPLACA (CDDR LIJKL) K)
                (RPLACA LABCD K)
                (MAPC (CDR (MEMBER K LIND)) (FUNCTION (LAMBDA (L) (PROGN
                    (RPLACA (CDDDR LIJKL) L)
                    (RPLACA (CDR LABCD) L)
                    (PUTIN RM LIJKL
                           (PICKEL RM LABCD)) )))) ))))) )))) )))))
    (MAPC LIND (FUNCTION (LAMBDA (I) (OR (EQN I 3) (PROGN
        (RPLACA LIJKL I)
        (RPLACA LABCD I)
        (MAPC (CDR (MEMBER I LIND)) (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJKL) J)
            (RPLACA (CDR LABCD) J)
            (MAPC (CDR LIND) (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDDR LIJKL) K)
                (RPLACA (CDDDR LABCD) K)
                (MAPC LIND (FUNCTION (LAMBDA (L) (AND (GREATERP K L)
                                                      (PROGN
                    (RPLACA (CDDDR LIJKL) L)
                    (RPLACA (CDDR LABCD) L)
                    (PUTIN RM LIJKL
                       (SMINUS (PICKEL RM LABCD))) ))))) )))) )))) )))))
    (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJKL I)
        (RPLACA (CDR LABCD) I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (AND (GREATERP I J) (PROGN
            (RPLACA (CDR LIJKL) J)
            (RPLACA LABCD J)
            (MAPC LIND (FUNCTION (LAMBDA (K) (PROGN
                (RPLACA (CDDR LIJKL) K)
                (RPLACA (CDDDR LABCD) K)
                (MAPC LIND (FUNCTION (LAMBDA (L) (OR (EQN K L) (PROGN
                    (RPLACA (CDDDR LIJKL) L)
                    (RPLACA (CDDR LABCD) L)
                    (PUTIN RM LIJKL
                            (PICKEL RM LABCD)) ))))) )))) ))))) )))) ))
(de MAKETENSOR4 (PRINTNAME VALENCE INDICES SOURCE)
    (PROG (V1 V2 V3 V4 V T01 T02 T13 T23 R E1 E2 E3 E4 LKC LLD)
    (SETQ LKC (LIST NIL NIL))
    (SETQ LLD (LIST NIL NIL))
    (OR (SETQ V VALENCE) (SETQ V (QUOTE (- - - -))))
    (SETQ VALENCE V)
    (MAPC (QUOTE (V1 V2 V3 V4)) (FUNCTION (LAMBDA (WE) (PROG2
        (SET WE (COND ((EQ (CAR V) (QUOTE -))   EMATRIX)
                      (T   UPIE)))
        (SETQ V (CDR V))) )))
    (SETQ T01 (EQ (CAR VALENCE) (CADR VALENCE)))
    (SETQ T02 (EQ (CAR VALENCE) (CADDR VALENCE)))
    (SETQ T13 (EQ (CADR VALENCE) (CADDDR VALENCE)))
    (SETQ T23 (EQ (CADDR VALENCE) (CADDDR VALENCE)))
    (MAPC LIND (FUNCTION (LAMBDA (A) (OR (AND T01 (EQN A 3)) (PROGN
        (RPLACA LABCD A)
        (RPLACA (CDR LIJ) A)
        (MAPC (COND (T01   (CDR (MEMBER A LIND)))
                    (T   LIND)) (FUNCTION (LAMBDA (B) (PROGN
            (RPLACA (CDR LABCD) B)
            (RPLACA (CDR LAB) B)
            (MAPC (COND ((AND T02 T13)   (MEMBER A LIND))
                        (T   LIND)) (FUNCTION (LAMBDA (C)
                                    (OR (AND T23 (EQN C 3)) (PROGN
                (RPLACA (CDDR LABCD) C)
                (RPLACA (CDR LKC) C)
                (MAPC (COND ((AND T02 T13)   (COND
                                 ((EQN A C)   (MEMBER B LIND))
                                 (T23   (CDR (MEMBER C LIND)))
                                 (T   LIND)))
                            (T23   (CDR (MEMBER C LIND)))
                            (T   LIND)) (FUNCTION (LAMBDA (D) (PROG ( )
                    (RPLACA (CDDDR LABCD) D)
                    (SETQ R 0)
                    (AND INDICES(NOT(MEMBER LABCD INDICES))(RETURN NIL))
                    (RPLACA (CDR LLD) D)
                    (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
                        (RPLACA LIJ I)
                        (OR (EQN (SETQ E1 (PICKEL V1 LIJ)) 0) (PROGN
                            (RPLACA LIJKL I)
                            (MAPC LIND (FUNCTION (LAMBDA (J)
                                       (OR (EQN I J) (PROG2
                                (RPLACA LAB J)
                                (OR (EQN (SETQ E2 (PICKEL V2 LAB)) 0)
                                    (PROGN
                                    (RPLACA (CDR LIJKL) J)
                                    (MAPC LIND (FUNCTION (LAMBDA (K)
                                               (PROG2
                                        (RPLACA LKC K)
                                        (OR (EQN(SETQ E3(PICKEL V3 LKC))
                                                 0) (PROGN
                                            (RPLACA (CDDR LIJKL) K)
                                            (MAPC LIND (FUNCTION
                                                             (LAMBDA (L)
                                                    (OR (EQN K L) (PROG2
                                                (RPLACA LLD L)
                                                (OR(EQN(SETQ E4(PICKEL
                                                       V4 LLD))0)(PROGN
                                                  (RPLACA(CDDDR LIJKL)L)
                                                  (SETQ V (STIMES (LIST
                                                   (PICKEL SOURCE LIJKL)
                                                   E1 E2 E3 E4)))
                                                  (OR (EQN V 0)
                                                      (SETQ R
                                                      (SPLUSPARTS R V)))
                                          )) ))))) )))))) ))))))) ))))))
                    (SUBSALL (QUOTE R)PRINTNAME VALENCE LABCD SIMPLSUBS)
                    (AND (EQN R 0) (NULL INDICES) (RETURN NIL))
                    (INPRINT PRINTNAME VALENCE LABCD (QUOTE =) R)
                    (TURNCAR)) ))) ))))) )))) )))))
    (TIMEMESSAGE (LIST PRINTNAME VALENCE) NIL)
    (TURNCAR) (TURNCAR) (TURNCAR) ))

%The next functions calculate the Ricci and Einstein tensors

(de RICCI ( ) (PROG (HELP MEM CHECK)
    (SETQ MEM (MEMQ (QUOTE RICCI) NOPRINT))
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJ I)
        (RPLACA (CDR LABCD) I)
        (MAPC (MEMBER I LIND) (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJ) J)
            (RPLACA (CDDDR LABCD) J)
            (RPLACA LABCD 0)
            (RPLACA (CDDR LABCD) 0)
            (SETQ HELP (CONS (PICKEL RM LABCD) NIL))
            (RPLACA LABCD I)
            (RPLACA (CDR LABCD) 1)
            (RPLACA (CDDR LABCD) 1)
            (SETQ HELP (CONS (PICKEL RM LABCD) HELP))
            (RPLACA (CDR LABCD) 2)
            (RPLACA (CDDR LABCD) 2)
            (SETQ HELP (CONS (PICKEL RM LABCD) HELP))
            (RPLACA (CDR LABCD) 3)
            (RPLACA (CDDR LABCD) 3)
            (SETQ HELP (SPLUS (CONS (PICKEL RM LABCD) HELP)))
            (RPLACA (CDR LABCD) I)
            (SUBSALL (QUOTE HELP) (QUOTE RICCI) NIL LIJ SIMPLSUBS)
            (AND (NOT (EQN HELP 0)) (SETQ CHECK T) (NOT MEM)
                 (INPRINT (QUOTE RICCI) NIL LIJ (QUOTE =) HELP)
                 (TURNCAR))
            (PUTIN RC LIJ HELP)) ))) ))))
    (TIMEMESSAGE (QUOTE RICCI) NIL)
    (OR CHECK (PROGN
        (MESSAGE (QUOTE ("ALL COMPONENTS OF THE"
                                          "RICCI TENSOR ARE ZERO")) T)
        (TURNCAR) (TURNCAR) (TURNCAR)
        (RETURN NIL)))
    (TURNCAR) (TURNCAR) (TURNCAR)
    (REMPROP (QUOTE RICCI) (QUOTE SUBS))
    (AND (SETQ HELP (GET (QUOTE RICCI) (QUOTE TENS))) (PROGN
         (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
             (RPLACA (CDR LIJ) I)
             (RPLACA LAB I)
             (MAPC LIND (FUNCTION (LAMBDA (J) (AND (GREATERP I J) (PROGN
                 (RPLACA LIJ J)
                 (RPLACA (CDR LAB) J)
                 (PUTIN RC LAB (PICKEL RC LIJ)) )) ))) ))))
         (TIMEMESSAGE (QUOTE RICCI) T)
         (MAPC HELP (FUNCTION (LAMBDA (HE)
              (MAKETENSOR2 (QUOTE RIC) (CAR HE) (CADR HE) RC) )))
         (REMPROP (QUOTE RICCI) (QUOTE TENS))
         (REMPROP (QUOTE RIC) (QUOTE SUBS))))
    (AND (EQ STOP (QUOTE RICCI)) (RETURN T))
    (SETQ RINV (SPLUS (LIST (PICKEL RC (LIST 0 0))
         (SMINUS (PICKEL RC (LIST 1 1))) (SMINUS (PICKEL RC (LIST 2 2)))
         (SMINUS (PICKEL RC (LIST 3 3))) )))
    (SUBSALL (QUOTE RINV) (QUOTE CURVATURE) NIL NIL SIMPLSUBS)
    (TIMEMESSAGE (QUOTE "CURVATURE INVARIANT") NIL)
    (REMPROP (QUOTE CURVATURE) (QUOTE SUBS))
    (OR (MEMQ (QUOTE CURVATURE) NOPRINT) (PROGN
        (INPRINT (QUOTE "CURVATURE INVARIANT") NIL NIL (QUOTE =) RINV)
        (TURNCAR) (TURNCAR) (TURNCAR)))
    (AND (GET (QUOTE RICCI) (QUOTE EINSTEIN)) (MAKEINSTEIN))
    (RETURN T) ))
(de MAKEINSTEIN ( ) (PROG (MEM V)
    (SETQ MEM (MEMQ (QUOTE EINSTEIN) NOPRINT))
    (SETQ HELP (STIMES (LIST (QUOTE (1 . 2)) RINV)))
    (MAPC LIND (FUNCTION (LAMBDA (I) (PROG2
        (RPLACA LIJ I)
        (MAPC (MEMBER I LIND) (FUNCTION (LAMBDA (J) (PROGN
            (RPLACA (CDR LIJ) J)
            (SETQ V (COND ((AND (ZEROP I) (ZEROP J))
                              (SPLUS (LIST (PICKEL RC LIJ)
                                                        (SMINUS HELP))))
                          ((EQN I J)
                                    (SPLUS (LIST (PICKEL RC LIJ) HELP)))
                          (T   (PICKEL RC LIJ)) ))
            (SUBSALL (QUOTE V) (QUOTE EINSTEIN) NIL LIJ SIMPLSUBS)
            (OR (EQN V 0) MEM (PROG2
                (INPRINT (QUOTE EINSTEIN) NIL LIJ (QUOTE =) V)
                (TURNCAR) ))
            (PUTIN IE LIJ V)) ))) ))))
    (REMPROP (QUOTE EINSTEIN) (QUOTE SUBS))
    (TURNCAR) (TURNCAR) (TURNCAR)
    (TIMEMESSAGE (QUOTE EINSTEIN) NIL)
    (AND (SETQ V (GET (QUOTE EINSTEIN) (QUOTE TENS))) (PROGN
         (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
             (RPLACA LIJ I)
             (RPLACA (CDR LAB) I)
             (MAPC LIND (FUNCTION (LAMBDA (J) (AND (GREATERP I J) (PROGN
                 (RPLACA (CDR LIJ) J)
                 (RPLACA LAB J)
                 (PUTIN IE LIJ (PICKEL IE LAB)) )) ))) ))))
         (TIMEMESSAGE (QUOTE EINSTEIN) T)
         (MAPC V (FUNCTION (LAMBDA (VE)
               (MAKETENSOR2 (QUOTE EIN) (CAR VE) (CADR VE) IE) )))
         (TURNCAR) (TURNCAR) (TURNCAR)
         (REMPROP (QUOTE EINSTEIN) (QUOTE TENS))
         (REMPROP (QUOTE EIN) (QUOTE SUBS))))   ))

%The next functions calculate the Weyl tensor

(de PRODUCEWEYL (I J K L) (PROG (HELP DELTA)
    (MAPC LIND (FUNCTION (LAMBDA (R) (PROG2
        (RPLACA (CDR LIJ) R)
        (MAPC LIND (FUNCTION (LAMBDA (S) (PROGN
            (RPLACA LIJ S)
            (SETQ DELTA (COND
               ((OR (EQN I J) (EQN J R) (EQN R I))   0)
               ((OR (AND (EQN I K) (EQN J L) (EQN R S))
                    (AND (EQN I L) (EQN J S) (EQN R K))
                    (AND (EQN I S) (EQN J K) (EQN R L)))   1)
               ((OR (AND (EQN I L) (EQN J K) (EQN R S))
                    (AND (EQN I K) (EQN J S) (EQN R L))
                    (AND (EQN I S) (EQN J L) (EQN R K)))   -1)
               (T   0)  ))
            (OR (ZEROP DELTA)
                 (SETQ HELP (CONS (STIMES (LIST (QUOTE (1 . 2))
                               DELTA (PICKEL RC LIJ))) HELP)))) ))) ))))
    (AND (OR (ZEROP I) (ZEROP J)) (MAP HELP (FUNCTION (LAMBDA (HE)
                                      (RPLACA HE (SMINUS (CAR HE))) ))))
    (SETQ R (PICKEL RM LIJKL))
    (OR (EQN R 0) (SETQ HELP (CONS R HELP)))
    (SETQ DELTA (COND ((EQN I J)   0)
                      ((AND (EQN K I) (EQN J L))   1)
                      ((AND (EQN L I) (EQN J K))   -1)
                      (T   0)))
    (OR (ZEROP DELTA) (PROGN
        (SETQ R (COND
            ((EQN RINV 0)   NIL)
            ((OR (ATOM RINV) (NOT (EQ (CAR RINV) (QUOTE PLUS))))
                 (CONS (STIMES (LIST (QUOTE (-1 . 3)) DELTA RINV)) NIL))
            (T   (MAPCAR (CDR RINV) (FUNCTION (LAMBDA (RE)
                       (STIMES (LIST (QUOTE (-1 . 3)) DELTA RE)) ))) )))
        (AND (OR (ZEROP I) (ZEROP J))
             (MAP R (FUNCTION (LAMBDA(RE)
                    (RPLACA RE (SMINUS (CAR RE))) ))))
        (SETQ HELP (NCONC HELP R))))
    (SETQ HELP (COND (HELP   (SPLUS HELP))
                     (T   0)))
    (SUBSALL (QUOTE  HELP) (QUOTE WEYL) NIL LIJKL SIMPLSUBS)
    (AND (NOT (EQN HELP 0)) (SETQ CHECK T) (NOT MEM)
         (INPRINT (QUOTE WEYL) NIL LIJKL (QUOTE =) HELP) (TURNCAR))
    (RETURN HELP)   ))
(de WEYL ( ) (PROG (MEM CHECK)
    (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROGN
        (RPLACA LIJ I)
        (RPLACA (CDR LAB) I)
        (MAPC LIND (FUNCTION (LAMBDA (J) (AND (GREATERP I J) (PROGN
            (RPLACA (CDR LIJ) J)
            (RPLACA LAB J)
            (PUTIN RC LIJ (SMINUS (PICKEL RC LAB))) )) ))) ))))
    (MAPC (CDR LIND) (FUNCTION (LAMBDA (I) (PROG2
        (RPLACA LIJ I)
        (MAPC (MEMBER I LIND) (FUNCTION (LAMBDA (J) (PROG2
            (RPLACA (CDR LIJ) J)
            (PUTIN RC LIJ (SMINUS (PICKEL RC LIJ))) )))) ))))
    (SETQ MEM (MEMQ (QUOTE WEYL) NOPRINT))
    (MAPC LIND (FUNCTION (LAMBDA (I) (OR (EQN I 3) (PROG2
        (RPLACA LIJKL I)
        (MAPC (CDR (MEMBER I LIND)) (FUNCTION (LAMBDA (J) (PROG2
            (RPLACA (CDR LIJKL) J)
            (MAPC (MEMBER I LIND) (FUNCTION (LAMBDA (K) (OR (EQN K 3)
                                                            (PROG2
                (RPLACA (CDDR LIJKL) K)
                (MAPC (COND ((EQN K I)   (MEMBER J LIND))
                            (T   (CDR (MEMBER K LIND))))
                                            (FUNCTION (LAMBDA (L) (PROG2
                    (RPLACA (CDDDR LIJKL) L)
                    (PUTIN RM LIJKL
                           (PRODUCEWEYL I J K L)) )))) ))))) )))) )))))
    (TIMEMESSAGE (QUOTE WEYL) NIL)
    (TURNCAR) (TURNCAR) (TURNCAR)
    (OR CHECK (RETURN (PROGN
        (MESSAGE (QUOTE
                ("ALL COMPONENTS OF THE" "WEYL TENSOR ARE ZERO")) T)
        (TURNCAR) (TURNCAR) (TURNCAR) )))
    (OR (GET (QUOTE WEYL) (QUOTE TENS)) (RETURN CHECK))
    (TURNCAR) (TURNCAR) (TURNCAR)
    (CLARRAY RC)
    (REMPROP (QUOTE WEYL) (QUOTE SUBS))
    (SETQ RINV NIL)
    (COMPLETE)
    (TIMEMESSAGE (QUOTE WEYL) T)
    (MAPC (GET (QUOTE WEYL) (QUOTE TENS)) (FUNCTION (LAMBDA (GE)
          (MAKETENSOR4 (QUOTE C) (CAR GE) (CADR GE) RM) ))) ))

%This is the end of the Ortocartan code
