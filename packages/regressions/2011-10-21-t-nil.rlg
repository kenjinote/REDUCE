operator fun;



for all t,f,nt,nf let fun( t,f,nt,nf) =
fun_t * t + fun_f * f + fun_nt * nt + fun_nf * nf + fun_0
$



x := fun( 1,b,c,d) ;


x := b*fun_f + c*fun_nt + d*fun_nf + fun_0 + fun_t

y := fun( a,b,c,d) ;


y := a*fun_t + b*fun_f + c*fun_nt + d*fun_nf + fun_0


share t;


***** t is a reserved identifier 


symbolic procedure ws(u); u;


ws


symbolic procedure nil(u
***** nil invalid as formal parameter name 

); u;


u


algebraic procedure nil(u
***** nil invalid as formal parameter name 

); u;


u


for all t let fun(t,t^2)=t;



for all nil let fun(nil,nil) = nil;


***** nil is a reserved identifier 


showrules fun;


          2
{fun(~t,~t ) => t,

 fun(~t,~f,~nt,~nf) => fun_t*t + fun_f*f + fun_nt*nt + fun_nf*nf + fun_0}


for all t clear fun(t,t^2);



showrules fun;


{fun(~t,~f,~nt,~nf) => fun_t*t + fun_f*f + fun_nt*nt + fun_nf*nf + fun_0}


for all nil clear fun(nil,nil);


***** nil is a reserved identifier 


showrules fun;


{fun(~t,~f,~nt,~nf) => fun_t*t + fun_f*f + fun_nt*nt + fun_nf*nf + fun_0}


fun(t);


fun(t)


fun(nil);


fun()


% test empty variable list in declaration

begin scalar;
*** Empty variable list in scalar declaration 
 return 0 end;


0


% test binding nil or t

begin scalar nil; return nil end;
***** nil is a reserved identifier 



begin scalar t; return t end;
***** t is a reserved identifier 



(lambda(t); 0)(a);
***** t is a reserved identifier 



(lambda(nil,t); 0)(a,b);
***** nil is a reserved identifier 



algebraic procedure x1(t);
***** t found where right parenthesis expected 

t;


t


x1(1);


*** x1 declared operator 

x1(1)


algebraic procedure x2(t);
***** t found where right parenthesis expected 

 begin scalar nil; return (t+nil); end;
***** nil is a reserved identifier 



x2(a);


*** x2 declared operator 

x2(a)


x2(1);


x2(1)


%% next line commented out sine it crashes CSL
%x2(nil);

algebraic procedure y1(t);
***** t found where right parenthesis expected 

 begin integer nil; return (t+nil); end;
***** nil is a reserved identifier 



y1(1);


*** y1 declared operator 

y1(1)


y1(nil);


y1()


algebraic procedure z1(t,u
***** t found where right parenthesis expected 

); begin t := t + u^2; return t; end;


***** t improperly defined in terms of itself 


z1(1,2);


*** z1 declared operator 

z1(1,2)


z1(a,b);


z1(a,b)


t(u);


*** t declared operator 

t(u)


clear t;



algebraic procedure t(x
***** t invalid as formal parameter name 

); x;


b*fun_f + c*fun_nt + d*fun_nf + fun_0 + fun_t


t(u);


*** t declared operator 

t(u)


t(t);


t(t)


t(nil);


t()


algebraic procedure nil(x
***** nil invalid as formal parameter name 

); x;


b*fun_f + c*fun_nt + d*fun_nf + fun_0 + fun_t


nil(u);


***** nil invalid as operator


nil(t);


***** nil invalid as operator


nil(nil);


***** nil invalid as operator


end;

