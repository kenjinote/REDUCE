%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%			  Details of ordering relation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                   David Hartley <David.Hartley@gmd.de>

In the problem

        on groebopt;
        depend x,w;
        groesolve({w+x-y,x-z},{w,x,y,z});

        -> {{w= - x + y,z=x}}.

turning on trgroeb shows that the groebopt module chooses

        optimized sequence of kernels: (w y z x)

so the "sort(intvdpvars!*,function vdpvordopt3)" line in vdpvordop has not
picked up the dependency (which should put x before w).

Writing a D b for depends(a,b) and a > b for the "optimal" ordering
ignoring dependency constraints, vdpvordopt3 defines a relation >> by

        a >> b iff a D b or a > b.

Since we have w > y > z > x and x D w, we get both w >> x and x >> w, so >>
is not antisymmetric.

I tried to correct this by setting

        a >> b iff a D b or not(b D a) and a > b,

which makes >> antisymmetric, but this is still no good, since we get w >> y
and y >> x but x >> w, so it's not transitive.

I've racked my brains trying to think how to construct an ordering relation
from D and >, but can't come up with anything non-trivial. The problem
seems to be that D is only a partial ordering. Maybe someone who knows a
bit more set theory could help. 

The answer I've settled on is very crude, and disrupts > a lot. Starting
with the complete set of variables V, define a strictly shrinking sequence
of subsets by

	V(1) = V
	V(i+1) = {x in V(i) | x D y for some y in V(i)}

Then, for each x in V define grade(x) to be the maximum i such that x is in
V(i). The grading can be combined with > in the usual way to give an
ordering relation: grade(x) > grade(y) or (grade(x) = grade(y) and x > y).

