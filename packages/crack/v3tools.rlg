Do Feb  2 13:42:56 CET 2006
Loading image file :/silo/cons/reduce36/lisp/psl/linux/red/reduce.img 

REDUCE Development Version, 21-Nov-2005 ...

1: 
2: 2: 2: 2: 2: 2: 2: 2: 2: 
********************************************************************
* Please note the following conventions to use these routines:     *
* - Vectors are denoted by a single character and products         *
*   (A,Bx(Cx(Dx...))) by single identifiers ABCD... . For example, *
*   scalar products (A,B) by AB, triple products (A,BxC) by ABC,   *
*   (A,Bx(CxD)) by ABCD and so on. For scalar and triple products  *
*   only those versions are used for which letters are sorted      *
*   alphabetically, for example, AB, ABU but not BA, AUB or BUA.   *
* - Any non-vectorial variable starts with the two characters !&.  *
* - For further comments see the beginning of this file and the    *
*   files v3tools.tex and v3tools.tst.                             *
********************************************************************

3: 3: %*******************************************************************%
%                                                                   %
%                      V 3 T O O L S . T S T                        %
%                      ---------------------                        %
%  v3tools.tst contains test examples for the program v3tools.red.  %
%  To run this test read into the session the files crack.red and   %
%  v3tools.red or load their compiled version before.               %
%                                                                   %
%  Author: Thomas Wolf                                              %
%  Date:   15. June 2004                                            %
%                                                                   %
%  Details about the syntax of v3tools are given in v3tools.tex.    %
%                                                                   %
%                                                                   %
%*******************************************************************%

comment -------------------------------------------------------------
The package v3tools involves 3 global variables:
V_     : the list of vectors involved
GBASE_ : a Groebner basis of the identities satisfied by the vectors V_
HEADS_ : the list of leading terms in GBASE_.

The computations to be done in this test file involve only vectors
A,B,U,V. For these the global variables V_, GBASE_, HEADS_ are already
assigned. If other vectors shall be used, call the procedure VINIT
first with the list of vectors to be used, e.g. VINIT({A,B,U,V})  .

The following are vector expessions which we will use in the tests below.
Identifiers starting with !& are parameters, all others are vector products.;


lisp(print_:=nil)$

           % to suppress printing the computation

kap:=-aa$


HAMh:=ab*uu-1/2*au*bu+buv$

   
HAMi:=!&p1*abu$


FI6:=bu**2*((bu*aa-ab*au)**2*uu+2*(bu*aa-ab*au)*(bu*auv-buv*au)
              -vv*uba**2-(bu*av-bv*au)**2-uu*vv*ab**2-kap*uu*vv*bb)$



FI5:=4*!&p1*bu*((ab*uu*(aa*bu-au*ab)*abu+vv*(ab*bu-au*bb)*abu)
                +(au*bv-av*bu)*(bv*abu-bu*abv)
                +bu*uv*(ab*(aa*bu-au*ab)-kap*(ab*bu-au*bb))
                -ab*(ab*bu-au*bb)*(2*au*uv-av*uu)
                +uu*(aa*bu-au*ab)*(bb*av-2*ab*bv))$



FI4:=!&p1**2*(4*((ab*bu-au*bb)*(av*bu+2*ab*uv)-bv*bu*(aa*bu-au*ab)
              -2*ab*uu*(ab*bv-av*bb))*abu
              +4*bu*(bu*(aa*bu-au*ab)-au*(ab*bu-au*bb))*abv
              -8*(ab*bu-au*bb)*(ab*bv-av*bb)*uv
              +(4*ab**2*au*(ab*bu-au*bb)-4*bu*(2*ab**2-aa*bb)*
                (aa*bu-ab*au)
                +4*(ab*bv-av*bb)**2)*uu-4*ab**2*(ab**2-aa*bb)*uu**2)$



FI3:=8*!&p1**3*(aa*bb-ab**2)*(ab*uu*abu+(bb*av-bv*ab)*uu+
                              (ab*bu-au*bb)*uv)$



FI2:=-4*!&p1**4*(aa*bb-ab**2)*(ab**2*uu-bb*vv)$



comment -------------------------------------------------------------
In order to ensure that the same order of vector names is used for the same products
one can convert all to the correct name using the procedure e2s. The following
should produce all zeros:  ;


write"0 = ",e2s (abu - uab);


0 = 0

write"0 = ",e2s (abu + aub);


0 = 0

write"0 = ",e2s (ba*uu-1/2*ua*ub+vbu - HAMh);


0 = 0


comment -------------------------------------------------------------
Just in case the data above which have not been generated by the program have
vectors ordered not lexicographically we re-write them again: ;


HAMh:=e2s HAMh$

   HAMi:=e2s HAMi$


FI6:=e2s FI6$

   FI5:=e2s FI5$

   FI4:=e2s FI4$

   FI3:=e2s FI3$

   FI2:=e2s FI2$

 

comment -------------------------------------------------------------
To convert a vector expression into component form we can use v2c;


write"Conversion into component form: 0 = ",
    v2c(HAMh)  
    - (  a1*b1*u1**2 + 2*a1*b1*u2**2 + 2*a1*b1*u3**2 - a1*b2*u1*u2 - a1*b3*u1*u3
       - a2*b1*u1*u2 + 2*a2*b2*u1**2 + a2*b2*u2**2 + 2*a2*b2*u3**2 - a2*b3*u2*u3
       - a3*b1*u1*u3 - a3*b2*u2*u3 + 2*a3*b3*u1**2 + 2*a3*b3*u2**2 + a3*b3*u3**2
       + 2*b1*u2*v3 - 2*b1*u3*v2 - 2*b2*u1*v3 + 2*b2*u3*v1 + 2*b3*u1*v2 
       - 2*b3*u2*v1)/2;


Conversion into component form: 0 = 0


comment -------------------------------------------------------------
To convert a component form vector expression into standard vector form 
we can use c2s. $


write"Conversion into vector form: 0 = ",
   c2s(  a1*b1*u1**2 + 2*a1*b1*u2**2 + 2*a1*b1*u3**2 - a1*b2*u1*u2 - a1*b3*u1*u3
       - a2*b1*u1*u2 + 2*a2*b2*u1**2 + a2*b2*u2**2 + 2*a2*b2*u3**2 - a2*b3*u2*u3
       - a3*b1*u1*u3 - a3*b2*u2*u3 + 2*a3*b3*u1**2 + 2*a3*b3*u2**2 + a3*b3*u3**2
       + 2*b1*u2*v3 - 2*b1*u3*v2 - 2*b2*u1*v3 + 2*b2*u3*v1 + 2*b3*u1*v2 
       - 2*b3*u2*v1)/2 
     - HAMh;



Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Conversion into vector form: 0 = 0


comment -------------------------------------------------------------
The procedure s2e introduces n-products, like abcd for (a,bx(cxd)),
in order to compress an expression. (For notation see v3tools.tex). 
We call this extended vector form. The following computation can take 
a few minutes. It also needs some memory (10MB) ;


s2e(ab*abu*uu*(aa*bb - ab**2))$


==========================================================

                                             2
One partition of input: ab*abu*uu*(aa*bb - ab )

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : (#) 6 terms, 19 factors, with derivatives of functions of all variables: 

          2      3   2       3    2       2
 (aa,uu,bu ,bu,ab ,ab ,ab,abu ,abu ,abu,au ,au,bb)



functions : aa, uu, bu, ab, abu, au, bb
with 7 terms
number of equations : 1
total no of terms   : 6
total no of factors :  19
1 equation in 0 variables: 
e_1(6#)
7 constants : bb,au,abu,ab,bu,uu,aa

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Generating specific permutations of products of the vectors aaaabbbbuuu.
8400 permutations generated.
Applying another filter, 6160 are left.
At a first look 61 seem to be non-equivalent.

Enter `h' for help.

old input: 67
The number must be in 1 .. 61 .

old input: e_1
illegal input: 'e_1'

old input: nil

hd : Help to inspect data
hp : Help to proceed
hf : Help to change flags & parameters
hc : Help to change data of equations
hi : Help to work with identities
hb : Help to trace and debug

old input: q

What is the maximal number of terms of equations to be shown? 
old input: 0
equations : 


functions : ab, abu, au, bb, auauaubbbab, aa, bu, auauabbubab, 
auauabbbbau, auaububbaab, auaubbaubab, auaubbaabbu, auababbuuab, 
auababbubau, uu, auababbbuau, auababbaubu, auababuubab, 
auababubuab, auababuabbu, auabaaubbbu, auabbuabuab, auabbuabbau, 
auabbubaabu, auabbbuuaab, auabbbuaabu, auabbauubab, auabbaubbau, 
auaabbbbuau, auaabbuubab, auaabbuabbu, aubbaubaabu, aubbauubaab, 
aubbababuau, aubbabaaubu, aubbabuaabu, aubbaabuuab, aubbaabbuau, 
aubbaauubab, aubbaaubbau, aubbuaaubab, aubbuabuaab, aubababaubu, 
aubaubaubab, aubaubbuaab, aubaubbaabu, auubbaaubab, abauaububab, 
abauabbuuab, abaububaabu, abaubbauuab, abaubbuuaab, abaubabaubu, 
abaubauubab, abauuubbaab, abauubaubab, abauuaabbbu, ababuubaabu, 
abaabubuuab, abaabuuabbu, abbuauaabbu, abbuaabuuab, abbuaauubab, 
buabbaaaubu, buaabuaabbu, buaabbaaubu, buaabbuaabu, buaaubaabbu, 
g0007
with 69 terms
number of equations : 63
total no of terms   : 248
total no of factors :  981
63 equations in 0 variables: 
e_24(6),e_29(6),e_32(6),e_44(6),e_3(5),e_5(5),e_6(5),e_8(5),e_15(5),
e_17(5),e_19(5),e_30(5),e_33(5),e_34(5),e_43(5),e_48(5),e_2(6#),
e_4(4),e_9(4),e_10(4),e_11(4),e_14(4),e_18(4),e_20(4),e_21(4),
e_25(4),e_26(4),e_27(4),e_31(4),e_36(4),e_39(4),e_40(4),e_41(4),
e_45(4),e_46(4),e_47(4),e_49(4),e_51(4),e_53(4),e_54(4),e_57(4),
e_58(4),e_59(4),e_1(3),e_7(3),e_12(3),e_13(3),e_16(3),e_22(3),
e_23(3),e_35(3),e_37(3),e_38(3),e_42(3),e_55(3),e_56(3),e_61(3),
e_28(2),e_50(2),e_52(2),e_60(2),e_62(2),e_63(2)
69 constants : g0007,buaaubaabbu,buaabbuaabu,buaabbaaubu,buaabuaabbu,buabbaaaubu
,abbuaauubab,abbuaabuuab,abbuauaabbu,abaabuuabbu,
abaabubuuab,ababuubaabu,abauuaabbbu,abauubaubab,abauuubbaab,abaubauubab,
abaubabaubu,abaubbuuaab,abaubbauuab,abaububaabu,abauabbuuab,
abauaububab,auubbaaubab,aubaubbaabu,aubaubbuaab,aubaubaubab,aubababaubu,
aubbuabuaab,aubbuaaubab,aubbaaubbau,aubbaauubab,aubbaabbuau,
aubbaabuuab,aubbabuaabu,aubbabaaubu,aubbababuau,aubbauubaab,aubbaubaabu,
auaabbuabbu,auaabbuubab,auaabbbbuau,auabbaubbau,auabbauubab,
auabbbuaabu,auabbbuuaab,auabbubaabu,auabbuabbau,auabbuabuab,auabaaubbbu,
auababuabbu,auababubuab,auababuubab,auababbaubu,auababbbuau,
uu,auababbubau,auababbuuab,auaubbaabbu,auaubbaubab,auaububbaab,auauabbbbau,
auauabbubab,bu,aa,auauaubbbab,
bb,au,abu,ab

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Partition is unchanged.

comment -------------------------------------------------------------
To test the correctness the following should give zero;


write"Conversion into extended vector form: 0 = ",ws - abauuubbaab;


                                                              3
Conversion into extended vector form: 0 = aa*ab*abu*bb*uu - ab *abu*uu

 - abauuubbaab


comment -------------------------------------------------------------
To convert a extended vector form into standard vector form is an easier
task and done by procedure e2s as well.  ;


write"Conversion into standard vector form: 0 = ",e2s(abauuubbaab) 
                                                  - ab*abu*uu*(aa*bb - ab**2)$


Conversion into standard vector form: 0 = 0


comment -------------------------------------------------------------
Another quick (and absolute safe) test whether two vector expressions
are equal is to convert them into component form;


write"Conversion into component form: 0 = ",v2c(abauuubbaab) - 
                                            v2c(ab*abu*uu*(aa*bb - ab**2))$


Conversion into component form: 0 = 0


comment -------------------------------------------------------------
There are a number of identities between vectors. The function s2s
generates them and uses them to shorten a given vector expression. ;


s2s(aa*bb*vv - aa*bv**2 - ab**2*vv + 2*ab*av*bv)$


==========================================================

                                        2     2
One partition of input: aa*bb*vv - aa*bv  - ab *vv + 2*ab*av*bv

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 :  6 terms, 17 factors, with derivatives of functions of all variables: 

          2      2       2   2
 (aa,vv,bv ,bv,ab ,ab,abv ,av ,av,bb)



functions : aa, vv, bv, ab, abv, av, bb
with 7 terms
number of equations : 1
total no of terms   : 6
total no of factors :  17
1 equation in 0 variables: 
e_1(6)
7 constants : bb,av,abv,ab,bv,vv,aa

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: 67
The number must be in 1 .. 61 .

old input: e_1
illegal input: 'e_1'

old input: nil

hd : Help to inspect data
hp : Help to proceed
hf : Help to change flags & parameters
hc : Help to change data of equations
hi : Help to work with identities
hb : Help to trace and debug

old input: q

What is the maximal number of terms of equations to be shown? 
old input: 0
equations : 


functions : aa, vv, bv, ab, abv, av, bb, g0009
with 8 terms
number of equations : 2
total no of terms   : 11
total no of factors :  30
2 equations in 0 variables: 
e_2(6),e_1(5)
8 constants : g0009,bb,av,abv,ab,bv,vv,aa

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Partition is unchanged.

comment -------------------------------------------------------------
The new vector expression found should be shorter. To check correctness
we do: ;


write"Shortening of standard vector form: 0 = ",ws - (abv**2 + av**2*bb);


                                                        2     2
Shortening of standard vector form: 0 = aa*bb*vv - aa*bv  - ab *vv + 2*ab*av*bv

      2     2
 - abv  - av *bb


comment -------------------------------------------------------------
The procedure poisson_c computes the poisson bracket of two expressions
in component form. We need the Poisson structure matrix which we will
assign once as STRUC_CONS and then use repeatedly in a number of examples.
Any assignment of identifiers in the structure matrix has to be done in
component form before the first call of poisson_c (or poisson_v, see below). 
The default structure constants used in v3tools.tst are: ;


kap:=-a1**2-a2**2-a3**2$



STRUC_CONS:={{U1,U2, U3}, {U2,U3, U1}, {U3,U1, U2},
             {U1,V2, V3}, {U2,V3, V1}, {U3,V1, V2},
             {U1,V3,-V2}, {U2,V1,-V3}, {U3,V2,-V1},
             {V1,V2, kap*U3}, {V2,V3, kap*U1}, {V3,V1, kap*U2}}$



comment : Structure matrices for other Lie-Poisson brackets are given
in v3tools.red. The following test shows that FI6 is a 6th degree
first integral of the Hamiltonian HAMh. (It needs 40MB memory!);


on time$


Time: 386770 ms  plus GC time: 12090 ms
off time$


write"Poisson bracket in components: 0 = ",
     poisson_c(v2c(HAMh),v2c(FI6),STRUC_CONS);


Poisson bracket in components: 0 = 0


comment -------------------------------------------------------------
One can compute the Poisson bracket also directy in standard vector
form.  When doing this the first time Poisson brackets for scalar
products and triple products have to be worked out automatically which
takes a bit more time and which takes the structure constants in
component form (and therefore also anything that turns up in the
structur constants, like kap, in component form). 


+++++++++++++++++++++++
The procedure
poisson_v needs a list of vectors as third argument. 
The third of the following tests shows that FI6+FI5+FI4+FI3+FI2
is a 6th degree (inhomogeneous) first integral of the (inhomogeneous)
Hamiltonian HAMh+HAMi ! $


on time$


Time: 8820 ms  plus GC time: 1200 ms
off time$


write"Poisson bracket in vector form: 0 = ",poisson_v(HAMh,FI6,STRUC_CONS);



Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : Poisson bracket in vector form: 0 = 

0=abu*vv - abv*uv + auv*bv - av*buv



functions : abu, vv, uv, abv, auv, bv, buv, av
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : av,buv,bv,auv,abv,uv,vv,abu

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : 
0=ab*buv - abu*bv + abv*bu - auv*bb



functions : buv, ab, abu, bv, bu, abv, auv, bb
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : bb,auv,abv,bu,bv,abu,ab,buv

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 :  7 terms, 20 factors, with derivatives of functions of all variables: 

                                 2
 (aa,uv,ab,uu,auv,abu,bv,bu,av,au ,au)



functions : aa, uv, ab, uu, auv, abu, bv, bu, av, au
with 10 terms
number of equations : 1
total no of terms   : 7
total no of factors :  20
1 equation in 0 variables: 
e_1(7)
10 constants : au,av,bu,bv,abu,auv,uu,ab,uv,aa

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 :  6 terms, 17 factors, with derivatives of functions of all variables: 

          2      2       2   2
 (aa,uu,bu ,bu,ab ,ab,abu ,au ,au,bb)



functions : aa, uu, bu, ab, abu, au, bb
with 7 terms
number of equations : 1
total no of terms   : 6
total no of factors :  17
1 equation in 0 variables: 
e_1(6)
7 constants : bb,au,abu,ab,bu,uu,aa

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : 
0=abu*vv - abv*uv + auv*bv - av*buv



functions : abu, vv, uv, abv, auv, bv, buv, av
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : av,buv,bv,auv,abv,uv,vv,abu

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : 
0=aa*buv - ab*auv - abu*av + abv*au



functions : buv, aa, ab, auv, abu, av, au, abv
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : abv,au,av,abu,auv,ab,aa,buv

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : 
0=ab*buv - abu*bv + abv*bu - auv*bb



functions : buv, ab, abu, bv, bu, abv, auv, bb
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : bb,auv,abv,bu,bv,abu,ab,buv

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : 
0=aa*buv - ab*auv - abu*av + abv*au



functions : buv, aa, ab, auv, abu, av, au, abv
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : abv,au,av,abu,auv,ab,aa,buv

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 :  7 terms, 20 factors, with derivatives of functions of all variables: 

                                 2
 (aa,uv,ab,uu,auv,abu,bv,bu,av,au ,au)



functions : aa, uv, ab, uu, auv, abu, bv, bu, av, au
with 10 terms
number of equations : 1
total no of terms   : 7
total no of factors :  20
1 equation in 0 variables: 
e_1(7)
10 constants : au,av,bu,bv,abu,auv,uu,ab,uv,aa

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : 
0=aa*buv - ab*auv - abu*av + abv*au



functions : buv, aa, ab, auv, abu, av, au, abv
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : abv,au,av,abu,auv,ab,aa,buv

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 :  6 terms, 17 factors, with derivatives of functions of all variables: 

          2      2       2   2
 (aa,uu,bu ,bu,ab ,ab,abu ,au ,au,bb)



functions : aa, uu, bu, ab, abu, au, bb
with 7 terms
number of equations : 1
total no of terms   : 6
total no of factors :  17
1 equation in 0 variables: 
e_1(6)
7 constants : bb,au,abu,ab,bu,uu,aa

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success

old input: q

equations : 

e_1 : 
0=aa*buv - ab*auv - abu*av + abv*au



functions : buv, aa, ab, auv, abu, av, au, abv
with 8 terms
number of equations : 1
total no of terms   : 4
total no of factors :  8
1 equation in 0 variables: 
e_1(4)
8 constants : abv,au,av,abu,auv,ab,aa,buv

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Enter `h' for help.

old input: l
Select a method by its number that is to be executed repeatedly:
old input: 11

To repeat this method as often as possible, enter `;' 
To repeat this method as often as possible, 
but at most a number of n times, enter n :
old input: ;


Step 1:
no success


>>>>>>>>> Solution : 
no equations


no equations
no functions or constants

This is the end of the CRACK run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0

on time$


Time: 5110 ms  plus GC time: 70 ms
off time$


write"Poisson bracket in vector form: 0 = ",poisson_v(HAMh,FI6,STRUC_CONS);


Poisson bracket in vector form: 0 = 0

on time$


Time: 140 ms
off time$


write"Poisson bracket in vector form: 0 = ",
poisson_v(HAMh+HAMi,FI6+FI5+FI4+FI3+FI2,STRUC_CONS);


Poisson bracket in vector form: 0 = 0

on time$


Time: 450 ms
off time$



comment -------------------------------------------------------------
The following procedure creates for a given list of vectors a list of
all their scalar and triple products. $


write"Generation of vector products: ",
      if (genpro {a,b,u,v}) =
         {aa,ab,au,av,bb,bu,bv,uu,uv,vv,abu,abv,auv,buv} then "ok." 
                                                         else "*** wrong! ***"$


Generation of vector products: ok.


comment -------------------------------------------------------------
Procedure genpro_wg generates a list of all scalar and triple products 
with weight lists for a given vector weight list. $


write"Generation of vector products with weights: ",

     if genpro_wg {{A,1,0,0},{B,0,1,0},{U,0,0,1},{V,1,0,1}} =
        {{aa,2,0,0}, {ab,1,1,0}, {au,1,0,1}, {av,2,0,1}, {bb,0,2,0},
         {bu,0,1,1}, {bv,1,1,1}, {uu,0,0,2}, {uv,1,0,2}, {vv,2,0,2},
         {abu,1,1,1},{abv,2,1,1},{auv,2,0,2},{buv,1,1,2}} then "ok." 
                                                          else "*** wrong! ***"$


Generation of vector products with weights: ok.


comment ------------------------------------------------------------- 
The following is a longer computation. To show intermediate results simply
replace the dollar sign by semicolon signs. The purpose will be to find
a first integral FI for the Hamiltonian HAMh.
At first we generate an ansatz using the procedure gfi to generate a 4th degree
expression in vectors u,v with appropriate homogeneity which then is multiplied 
with bu**2 as we want the first integral to have this factor. FL will be the
list of unknown coefficients. $


hh:=
gfi({4,2,4},                                    % total weights
    {{A,1,0,0},{B,0,1,0},{U,0,0,1},{V,1,0,1} }, % list of vectors + weights
    {},                                         % no restrictions for the
                                                % terms to be generated
    heads_                                      % apart from avoiding heads_
   )$


FI:=bu**2*(first hh)$


FL:=rest hh$



comment ------------------------------------------------------------- 
Now we compute the Poisson bracket and split it wrt to all occuring
scalar and triple products to generate a list of conditions for the
unknown coefficients which is solved using solve. $


hh:={poisson_v(HAMh,FI,STRUC_CONS)}$



for each g in genpro {a,b,u,v} do 
hh:=for each h in hh join coeff(h,g)$



hh:=solve(hh,fl)$



comment ------------------------------------------------------------- 
The solution for the coefficients is substituted into the ansatz for FI
and we check that it is the same as FI6 up to vector identities which
we get rid of by transforming into component form. 
The first of the two tests is sufficient to show that FI is a first
integral but to show that it is not any integral but the 6th degree
integral FI6 one can use preduce or v2c. The higher the degree the 
slower v2c becomes compared to preduce. To use s2s in order to shorten
an expression and find it to be zero is not reliable due to the non-
reliability of shortening of non-linear expressions in CRACK. $


FI:=sub(first hh,FI)$


off nat$



write"Check of a computed first integral: 0 = ",poisson_v(HAMh,FI,STRUC_CONS)$


Check of a computed first integral: 0 = 0$


comment ------------------------------------------------------------- 
Test that FI ~ FI6 can be done by
factorize(preduce(FI,gbase_)-preduce(FI6,gbase_))
to find the value of arbcomplex(1). Assuming arbcomplex(1)=2 we check: $


write"Equivalence check with FI6: 0 = ",
      preduce(sub(arbcomplex(1)=-1,FI),gbase_)
     -preduce(FI6                     ,gbase_)$


Equivalence check with FI6: 0 = (3*bu**2*( - aa**2*bu**2*uu + 2*aa*ab*au*bu*uu +
 2*aa*abu*bu*uv - 2*aa*abv*bu*uu - aa*bu**2*vv - ab**2*au**2*uu - 2*ab*abu*au*uv
 + 2*ab*abv*au*uu + 2*ab*au*bu*vv - au**2*bb*vv + au**2*bv**2 - 2*au*av*bu*bv + 
av**2*bu**2))/2$


comment ------------------------------------------------------------- 
Now the same without assuming bu**2 to be a factor of the first
integral FI. The following example demonstrates the use of the
procedure fnc_dep which can determine any functional dependence of
homogeneous vectorial expressions even modulo vector identities. The
call of gfi() generates an ansatz for the first integral.  From this
ansatz terms had been dropped in gfi() such that the resulting
polynomial does not contain a functionally depending on
AA,AB,BB,UV,-AA*UU+VV,HAMh. $


hh:=
gfi({4,4,6},                                   % total weights
    {{A,1,0,0},{B,0,1,0},{U,0,0,1},{V,1,0,1}}, % list of vectors + weights
    {AA,AB,BB,        %  all constant
     UV,-AA*UU+VV,    %  Casimir 1 and 2
     HAMh             %  Hamiltonian
    },
    heads_
   )$



FI:=first hh$


FL:=rest hh$



hh:={poisson_v(HAMh,FI,STRUC_CONS)}$



for each g in genpro {a,b,u,v} do 
hh:=for each h in hh join coeff(h,g)$



hh:=solve(hh,fl)$


FI:=sub(first hh,FI)$



write"Check of a computed first integral: 0 = ",
poisson_v(HAMh,FI,STRUC_CONS);


Check of a computed first integral: 0 = 0$


if fnc_dep(FI,{aa,ab,bb,uv,uu*aa-vv,HAMh,FI6},
           {{A,1,0,0},{B,0,1,0},{U,0,0,1},{V,1,0,1}})
then write"Known first integral."
else write"New first integral!"$

The expression in question is functionally dependent on
the list of expressions {p_1,p_2,...} in the following way:
( - 4*arbcomplex(4)*p_2*p_3*p_4**2*p_6 - 4*arbcomplex(4)*p_2*p_6**3 - 2*
arbcomplex(4)*p_3*p_5*p_6**2 - 2*arbcomplex(3)*p_2*p_3*p_4**2*p_6 - 2*arbcomplex
(3)*p_2*p_6**3 - 2*arbcomplex(3)*p_3*p_5*p_6**2 + 2*arbcomplex(2)*p_2*p_3*p_4**2
*p_6 + arbcomplex(1)*p_7)/2$

Known first integral.$


clear g,h,hh,FI,FL$



lisp(depl!*:=nil)$

 % to delete all dependencies of functions on variables

end$

4: 4: 4: 4: 4: 4: 4: 4: 4: 

Time for test: 428640 ms, plus GC time: 13510 ms

5: 5: 
Quitting
Do Feb  2 13:53:09 CET 2006
